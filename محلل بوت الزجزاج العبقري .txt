//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 1/6        |
//| محلل بوت الزجزاج العبقري - الجزء الأول: الهياكل والمتغيرات     |
//+------------------------------------------------------------------+

#include <Trade\Trade.mqh>
#include <Trade\HistoryOrderInfo.mqh>
#include <Trade\PositionInfo.mqh>

//--- معاملات الإدخال
input int AnalysisPeriodDays = 1;        // فترة التحليل بالأيام
input bool ShowDetailedReport = true;    // إظهار التقرير المفصل
input bool SaveReportToFile = true;      // حفظ التقرير في ملف
input bool SendEmailReport = false;     // إرسال التقرير بالإيميل
input string ReportFileName = "ZigzagAdvancedReport"; // اسم ملف التقرير

//--- المتغيرات العامة
CTrade trade;
CHistoryOrderInfo historyOrder;
CPositionInfo position;

//+------------------------------------------------------------------+
//| هيكل تحليل الأوامر الشامل                                       |
//+------------------------------------------------------------------+
struct OrderAnalysis {
    // معلومات أساسية
    ulong ticket;
    datetime timeSetup;
    datetime timeDone;
    string symbol;
    ENUM_ORDER_TYPE type;
    ENUM_ORDER_STATE state;
    double volume;
    double priceOpen;
    double priceActual;
    double sl;
    double tp;
    double profit;
    double swap;
    double commission;
    double netProfit;
    bool isExecuted;
    
    // حالة التنفيذ
    string executionStatus;
    string failureReason;
    string detailedAnalysis;
    
    // تحليل الأوامر المنفذة
    double maxPrice;
    double minPrice;
    double spreadAtSetup;
    double spreadAtExecution;
    double maxSpread;
    double pointsToTP;
    double pointsToSL;
    bool reachedTPLevel;
    bool reachedSLLevel;
    string marketCondition;
    bool wasCorrectDirection;
    int executionDelay;
    double slippage;
    double maxDrawdown;
    double maxRunup;
    double volatilityDuringTrade;
    bool hitStopLoss;
    bool hitTakeProfit;
    string exitReason;
    double percentageDrawdown;
    int holdingTimeMinutes;
    int barsDuration;
    
    // تحليل الأوامر غير المنفذة
    double priceAtTime;
    double bestPriceReached;
    double distanceFromPrice;
    bool priceReachedLevel;
    string marketConditionAtSetup;
    int orderLifetimeMinutes;
    double maxDistanceFromTarget;
    double minDistanceFromTarget;
    string timeAnalysis;
    
    // تحليل المخاطر والعوائد
    double riskRewardRatio;
    double actualRiskReward;
    
    // تحليل الوقت
    bool wasWeekend;
    bool wasNewsTime;
    bool wasSessionOpen;
    string dayOfWeek;
    int hourOfDay;
    
    // إحصائيات السبريد والفجوات
    double spreadPercentage;
    bool hadGap;
    double gapSize;
};

//+------------------------------------------------------------------+
//| هيكل الإحصائيات العامة                                         |
//+------------------------------------------------------------------+
struct GlobalStatistics {
    // أعداد الأوامر
    int totalOrders;
    int executedOrders;
    int pendingExpired;
    int pendingCancelled;
    int pendingRejected;
    int partiallyFilled;
    
    // إحصائيات الأوامر المنفذة (للحسابات النهائية)
    int executedWins;
    int executedLosses;
    int executedBreakeven;
    double totalProfit;
    double grossProfit;
    double grossLoss;
    double totalVolume;
    double totalCommission;
    double totalSwap;
    
    // معدلات ونسب للأوامر المنفذة
    double winRate;
    double avgWin;
    double avgLoss;
    double profitFactor;
    double avgVolume;
    double maxWin;
    double maxLoss;
    double sharpeRatio;
    double recoveryFactor;
    
    // إحصائيات الأوامر غير المنفذة (للمعلومات فقط)
    int priceDidntReach;
    int priceReachedButNotExecuted;
    int cancelledManually;
    int expiredOrders;
    int rejectedOrders;
    double avgOrderLifetime;
    double avgDistanceFromTarget;
    
    // تحليل الأوقات
    int bestHourExecution;
    int worstHourExecution;
    int bestDayExecution;
    int worstDayExecution;
    double bestHourExecutionRate;
    double worstHourExecutionRate;
    
    // تحليل المخاطر
    double maxDrawdownPct;
    double avgDrawdownPct;
    double maxRunupPct;
    double avgRiskReward;
    double actualRiskReward;
    
    // أنماط الفشل
    int highSpreadFailures;
    int wrongDirectionFailures;
    int almostTPFailures;
    int slippageFailures;
    int timeoutFailures;
    int liquidityFailures;
    
    // إحصائيات متقدمة
    double avgSlippage;
    double maxSlippage;
    double avgSpread;
    double maxSpread;
    int weekendOrders;
    int newsTimeOrders;
    double avgGapSize;
    int gappedOrders;
};

//--- المصفوفات والمتغيرات العامة
OrderAnalysis orders[];
GlobalStatistics stats;

//+------------------------------------------------------------------+
//| دالة التهيئة                                                    |
//+------------------------------------------------------------------+
int OnInit()
{
    Print("🔍 محلل الزجزاج العبقري تم تشغيله - جاري التحليل الشامل...");
    Print("📊 سيتم تحليل ", AnalysisPeriodDays, " يوم من البيانات");
    
    // تهيئة الإحصائيات
    InitializeStatistics();
    
    // تأخير قصير للتأكد من تحديث البيانات
    Sleep(2000);
    
    // بدء التحليل الشامل
    PerformAdvancedAnalysis();
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| دالة إنهاء الخبير                                              |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    Print("📊 انتهى التحليل المتقدم لبوت الزجزاج");
    Print("✅ تم تحليل ", stats.totalOrders, " أمر بنجاح");
    Print("🟢 منفذة: ", stats.executedOrders, " (", DoubleToString((double)stats.executedOrders/MathMax(stats.totalOrders,1)*100, 1), "%)");
    Print("🟡 منتهية: ", stats.pendingExpired, " 🔴 ملغاة: ", stats.pendingCancelled, " 🚫 مرفوضة: ", stats.pendingRejected);
}

//+------------------------------------------------------------------+
//| دالة التك (لا تعمل - المحلل يعمل مرة واحدة)                    |
//+------------------------------------------------------------------+
void OnTick()
{
    return; // هذا المحلل يعمل مرة واحدة فقط عند التشغيل
}

//+------------------------------------------------------------------+
//| تهيئة نظام الإحصائيات                                          |
//+------------------------------------------------------------------+
void InitializeStatistics()
{
    // تصفير أعداد الأوامر
    stats.totalOrders = 0;
    stats.executedOrders = 0;
    stats.pendingExpired = 0;
    stats.pendingCancelled = 0;
    stats.pendingRejected = 0;
    stats.partiallyFilled = 0;
    
    // تصفير إحصائيات الأوامر المنفذة
    stats.executedWins = 0;
    stats.executedLosses = 0;
    stats.executedBreakeven = 0;
    stats.totalProfit = 0;
    stats.grossProfit = 0;
    stats.grossLoss = 0;
    stats.totalVolume = 0;
    stats.totalCommission = 0;
    stats.totalSwap = 0;
    
    // تصفير المعدلات والنسب
    stats.winRate = 0;
    stats.avgWin = 0;
    stats.avgLoss = 0;
    stats.profitFactor = 0;
    stats.avgVolume = 0;
    stats.maxWin = 0;
    stats.maxLoss = 0;
    stats.sharpeRatio = 0;
    stats.recoveryFactor = 0;
    
    // تصفير إحصائيات غير المنفذة
    stats.priceDidntReach = 0;
    stats.priceReachedButNotExecuted = 0;
    stats.cancelledManually = 0;
    stats.expiredOrders = 0;
    stats.rejectedOrders = 0;
    stats.avgOrderLifetime = 0;
    stats.avgDistanceFromTarget = 0;
    
    // تصفير تحليل الأوقات
    stats.bestHourExecution = -1;
    stats.worstHourExecution = -1;
    stats.bestDayExecution = -1;
    stats.worstDayExecution = -1;
    stats.bestHourExecutionRate = 0;
    stats.worstHourExecutionRate = 100;
    
    // تصفير تحليل المخاطر
    stats.maxDrawdownPct = 0;
    stats.avgDrawdownPct = 0;
    stats.maxRunupPct = 0;
    stats.avgRiskReward = 0;
    stats.actualRiskReward = 0;
    
    // تصفير أنماط الفشل
    stats.highSpreadFailures = 0;
    stats.wrongDirectionFailures = 0;
    stats.almostTPFailures = 0;
    stats.slippageFailures = 0;
    stats.timeoutFailures = 0;
    stats.liquidityFailures = 0;
    
    // تصفير الإحصائيات المتقدمة
    stats.avgSlippage = 0;
    stats.maxSlippage = 0;
    stats.avgSpread = 0;
    stats.maxSpread = 0;
    stats.weekendOrders = 0;
    stats.newsTimeOrders = 0;
    stats.avgGapSize = 0;
    stats.gappedOrders = 0;
    
    Print("📋 تم تهيئة نظام الإحصائيات بنجاح");
}

//+------------------------------------------------------------------+
//| دالة التحليل الشامل المتقدم                                    |
//+------------------------------------------------------------------+
void PerformAdvancedAnalysis()
{
    Print("📈 بدء التحليل الشامل للأوامر والصفقات...");
    
    // المرحلة 1: جمع بيانات جميع الأوامر (منفذة وغير منفذة)
    CollectAllOrdersData();
    
    // التحقق من وجود بيانات للتحليل
    if(stats.totalOrders == 0) {
        Print("⚠️ لا توجد أوامر للتحليل في الفترة المحددة");
        return;
    }
    
    // المرحلة 2: تحليل كل أمر بالتفصيل
    AnalyzeAllOrders();
    
    // المرحلة 3: حساب الإحصائيات الشاملة
    CalculateGlobalStatistics();
    
    // المرحلة 4: إنشاء التقرير الشامل
    GenerateAdvancedReport();
    
    // المرحلة 5: حفظ التقرير إذا كان مطلوب
    if(SaveReportToFile)
        SaveAdvancedReportToFile();
        
    // المرحلة 6: إرسال التقرير بالإيميل (إختياري)
    if(SendEmailReport)
        SendReportByEmail();
        
    Print("✅ انتهى التحليل المتقدم بنجاح!");
    PrintFinalSummary();
}

//+------------------------------------------------------------------+
//| طباعة الملخص النهائي                                           |
//+------------------------------------------------------------------+
void PrintFinalSummary()
{
    Print("📊 ملخص التحليل النهائي:");
    Print("══════════════════════════════════════════");
    Print("🔢 إجمالي الأوامر: ", stats.totalOrders);
    Print("✅ منفذة: ", stats.executedOrders, " (", DoubleToString((double)stats.executedOrders/MathMax(stats.totalOrders,1)*100, 1), "%)");
    Print("⏰ منتهية الصلاحية: ", stats.pendingExpired);
    Print("❌ ملغاة: ", stats.pendingCancelled);
    Print("🚫 مرفوضة: ", stats.pendingRejected);
    Print("⚡ جزئية: ", stats.partiallyFilled);
    
    if(stats.executedOrders > 0) {
        Print("💰 الأوامر المنفذة فقط (للحسابات النهائية):");
        Print("   🟢 رابحة: ", stats.executedWins, " (", DoubleToString((double)stats.executedWins/stats.executedOrders*100, 1), "%)");
        Print("   🔴 خاسرة: ", stats.executedLosses, " (", DoubleToString((double)stats.executedLosses/stats.executedOrders*100, 1), "%)");
        Print("   ⚖️ متعادلة: ", stats.executedBreakeven);
        Print("   💵 صافي الربح: ", DoubleToString(stats.totalProfit, 2), "$");
        Print("   📈 إجمالي الأرباح: ", DoubleToString(stats.grossProfit, 2), "$");
        Print("   📉 إجمالي الخسائر: ", DoubleToString(stats.grossLoss, 2), "$");
        Print("   ⚖️ معامل الربح: ", DoubleToString(stats.profitFactor, 2));
    }
    
    Print("══════════════════════════════════════════");
}

//+------------------------------------------------------------------+
//| دالة بداية التشغيل (للاستخدام كسكريبت)                        |
//+------------------------------------------------------------------+
void OnStart()
{
    // يمكن استدعاء هذه الدالة لتشغيل التحليل كسكريپت منفصل
    Print("🚀 تم تشغيل محلل الزجزاج العبقري كسكريپت");
    InitializeStatistics();
    PerformAdvancedAnalysis();
}

//+------------------------------------------------------------------+
//| دوال مساعدة للتحقق من صحة البيانات                            |
//+------------------------------------------------------------------+
bool IsValidTicket(ulong ticket)
{
    return (ticket > 0);
}

bool IsValidPrice(double price)
{
    return (price > 0 && price != EMPTY_VALUE);
}

bool IsValidVolume(double volume)
{
    return (volume > 0);
}

bool IsValidDateTime(datetime dt)
{
    return (dt > 0);
}

//+------------------------------------------------------------------+
//| دوال مساعدة للحسابات                                           |
//+------------------------------------------------------------------+
double CalculatePercentage(int part, int total)
{
    if(total <= 0) return 0;
    return (double)part / total * 100;
}

double CalculateAverage(double sum, int count)
{
    if(count <= 0) return 0;
    return sum / count;
}

double CalculateRatio(double numerator, double denominator)
{
    if(denominator <= 0) return 0;
    return numerator / denominator;
}

//+------------------------------------------------------------------+
//| دوال مساعدة للنصوص                                            |
//+------------------------------------------------------------------+
string GetOrderTypeString(ENUM_ORDER_TYPE type)
{
    switch(type) {
        case ORDER_TYPE_BUY: return "شراء فوري";
        case ORDER_TYPE_SELL: return "بيع فوري";
        case ORDER_TYPE_BUY_LIMIT: return "شراء محدود";
        case ORDER_TYPE_SELL_LIMIT: return "بيع محدود";
        case ORDER_TYPE_BUY_STOP: return "شراء إيقاف";
        case ORDER_TYPE_SELL_STOP: return "بيع إيقاف";
        case ORDER_TYPE_BUY_STOP_LIMIT: return "شراء إيقاف محدود";
        case ORDER_TYPE_SELL_STOP_LIMIT: return "بيع إيقاف محدود";
        default: return "نوع غير معروف";
    }
}

string GetOrderStateString(ENUM_ORDER_STATE state)
{
    switch(state) {
        case ORDER_STATE_STARTED: return "بدأ";
        case ORDER_STATE_PLACED: return "موضوع";
        case ORDER_STATE_CANCELED: return "ملغي";
        case ORDER_STATE_PARTIAL: return "جزئي";
        case ORDER_STATE_FILLED: return "مكتمل";
        case ORDER_STATE_REJECTED: return "مرفوض";
        case ORDER_STATE_EXPIRED: return "منتهي الصلاحية";
        case ORDER_STATE_REQUEST_ADD: return "طلب إضافة";
        case ORDER_STATE_REQUEST_MODIFY: return "طلب تعديل";
        case ORDER_STATE_REQUEST_CANCEL: return "طلب إلغاء";
        default: return "حالة غير معروفة";
    }
}

//+------------------------------------------------------------------+
//| دوال مساعدة للتوقيت                                            |
//+------------------------------------------------------------------+
string GetDayOfWeekString(int dayOfWeek)
{
    switch(dayOfWeek) {
        case 0: return "الأحد";
        case 1: return "الإثنين";
        case 2: return "الثلاثاء";
        case 3: return "الأربعاء";
        case 4: return "الخميس";
        case 5: return "الجمعة";
        case 6: return "السبت";
        default: return "غير معروف";
    }
}

bool IsWeekend(int dayOfWeek)
{
    return (dayOfWeek == 0 || dayOfWeek == 6); // الأحد والسبت
}

bool IsActiveSession(int hour)
{
    // جلسة لندن: 8-17، جلسة نيويورك: 13-22
    // تداخل الجلسات: 13-17 (أنشط فترة)
    return (hour >= 8 && hour <= 22);
}

bool IsLikelyNewsTime(int hour, int minute)
{
    // أوقات الأخبار المعتادة (تقريبية)
    if(hour == 8 && minute >= 30) return true;  // أخبار أوروبية
    if(hour == 10 && minute == 0) return true;  // أخبار أوروبية
    if(hour == 13 && minute >= 30) return true; // أخبار أمريكية
    if(hour == 15 && minute >= 30) return true; // أخبار أمريكية
    return false;
}

//+------------------------------------------------------------------+
//| دوال مساعدة للسوق                                              |
//+------------------------------------------------------------------+
double GetCurrentSpread(string symbol)
{
    return SymbolInfoInteger(symbol, SYMBOL_SPREAD) * SymbolInfoDouble(symbol, SYMBOL_POINT);
}

double GetSymbolPoint(string symbol)
{
    return SymbolInfoDouble(symbol, SYMBOL_POINT);
}

double GetCurrentAsk(string symbol)
{
    return SymbolInfoDouble(symbol, SYMBOL_ASK);
}

double GetCurrentBid(string symbol)
{
    return SymbolInfoDouble(symbol, SYMBOL_BID);
}

//+------------------------------------------------------------------+
//| دوال مساعدة للحسابات المالية                                   |
//+------------------------------------------------------------------+
double CalculatePips(double price1, double price2, string symbol)
{
    double point = GetSymbolPoint(symbol);
    if(point <= 0) return 0;
    return MathAbs(price1 - price2) / point;
}

double CalculateRiskRewardRatio(double entryPrice, double stopLoss, double takeProfit, string symbol)
{
    if(stopLoss <= 0 || takeProfit <= 0) return 0;
    
    double riskPips = CalculatePips(entryPrice, stopLoss, symbol);
    double rewardPips = CalculatePips(entryPrice, takeProfit, symbol);
    
    if(riskPips <= 0) return 0;
    return rewardPips / riskPips;
}

double CalculateDrawdownPercentage(double loss, double balance)
{
    if(balance <= 0) return 0;
    return MathAbs(loss) / balance * 100;
}

//+------------------------------------------------------------------+
//| ثوابت مهمة للتحليل                                             |
//+------------------------------------------------------------------+
#define HIGH_SPREAD_THRESHOLD    5.0    // حد السبريد العالي
#define NORMAL_SPREAD_THRESHOLD  2.0    // حد السبريد الطبيعي
#define HIGH_SLIPPAGE_THRESHOLD  3.0    // حد الانزلاق العالي
#define SHORT_ORDER_LIFETIME     5      // مدة الأمر القصيرة (دقائق)
#define LONG_ORDER_LIFETIME      1440   // مدة الأمر الطويلة (دقائق)
#define CLOSE_TO_TP_THRESHOLD    10.0   // قريب من الهدف (نقاط)
#define HIGH_VOLATILITY_THRESHOLD 3.0   // تقلب عالي (%)
#define NORMAL_VOLATILITY_THRESHOLD 1.5 // تقلب طبيعي (%)

//--- نهاية الجزء الأول ---
// ملاحظة: هذا الجزء يحتوي على الهياكل والمتغيرات الأساسية
// الأجزاء التالية ستحتوي على دوال التحليل والمعالجة
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 2/10       |
//| محلل بوت الزجزاج العبقري - الجزء الثاني: دوال جمع البيانات      |
//+------------------------------------------------------------------+

// تكملة للجزء الأول - دوال جمع البيانات الأساسية

//+------------------------------------------------------------------+
//| جمع بيانات جميع الأوامر من التاريخ                            |
//+------------------------------------------------------------------+
void CollectAllOrdersData()
{
    Print("🔍 جاري جمع بيانات الأوامر من التاريخ...");
    
    datetime fromDate = TimeCurrent() - (AnalysisPeriodDays * 24 * 3600);
    datetime toDate = TimeCurrent();
    
    Print("📅 فترة التحليل: من ", TimeToString(fromDate, TIME_DATE|TIME_MINUTES), 
          " إلى ", TimeToString(toDate, TIME_DATE|TIME_MINUTES));
    
    if(!HistorySelect(fromDate, toDate)) {
        Print("❌ خطأ في تحديد فترة التاريخ - كود الخطأ: ", GetLastError());
        return;
    }
    
    int ordersTotal = HistoryOrdersTotal();
    if(ordersTotal == 0) {
        Print("⚠️ لا توجد أوامر في الفترة المحددة");
        return;
    }
    
    ArrayResize(orders, ordersTotal);
    stats.totalOrders = 0;
    
    Print("🔍 فحص ", ordersTotal, " أمر في التاريخ...");
    
    for(int i = 0; i < ordersTotal; i++) {
        ulong ticket = HistoryOrderGetTicket(i);
        if(ticket <= 0) continue;
        
        if(CollectOrderDetails(ticket, stats.totalOrders)) {
            stats.totalOrders++;
        }
        
        if(i % 100 == 0 && i > 0) {
            Print("📊 تم معالجة ", i, " أمر من أصل ", ordersTotal);
        }
    }
    
    ArrayResize(orders, stats.totalOrders);
    Print("📊 تم جمع ", stats.totalOrders, " أمر للتحليل");
}

//+------------------------------------------------------------------+
//| جمع تفاصيل أمر محدد                                            |
//+------------------------------------------------------------------+
bool CollectOrderDetails(ulong ticket, int index)
{
    if(!IsValidTicket(ticket)) return false;
    
    if(!HistoryOrderSelect(ticket)) {
        Print("⚠️ لا يمكن تحديد الأمر: ", ticket);
        return false;
    }
    
    // جمع البيانات الأساسية
    orders[index].ticket = ticket;
    orders[index].timeSetup = (datetime)HistoryOrderGetInteger(ticket, ORDER_TIME_SETUP);
    orders[index].timeDone = (datetime)HistoryOrderGetInteger(ticket, ORDER_TIME_DONE);
    orders[index].symbol = HistoryOrderGetString(ticket, ORDER_SYMBOL);
    orders[index].type = (ENUM_ORDER_TYPE)HistoryOrderGetInteger(ticket, ORDER_TYPE);
    orders[index].volume = HistoryOrderGetDouble(ticket, ORDER_VOLUME_INITIAL);
    orders[index].priceOpen = HistoryOrderGetDouble(ticket, ORDER_PRICE_OPEN);
    orders[index].sl = HistoryOrderGetDouble(ticket, ORDER_SL);
    orders[index].tp = HistoryOrderGetDouble(ticket, ORDER_TP);
    orders[index].state = (ENUM_ORDER_STATE)HistoryOrderGetInteger(ticket, ORDER_STATE);
    
    // تحليل عوامل الوقت
    AnalyzeTimeFactors(index);
    
    // تحديد حالة التنفيذ
    DetermineExecutionStatus(index);
    
    // جمع بيانات حسب حالة الأمر
    if(orders[index].isExecuted) {
        CollectExecutedOrderData(index);
        stats.executedOrders++;
    } else {
        CollectNonExecutedOrderData(index);
        ClassifyNonExecutedOrder(index);
    }
    
    return true;
}

//+------------------------------------------------------------------+
//| تحليل عوامل الوقت للأمر                                        |
//+------------------------------------------------------------------+
void AnalyzeTimeFactors(int index)
{
    MqlDateTime dt;
    TimeToStruct(orders[index].timeSetup, dt);
    
    // تحديد يوم الأسبوع
    orders[index].dayOfWeek = GetDayOfWeekString(dt.day_of_week);
    orders[index].hourOfDay = dt.hour;
    
    // فحص الظروف الزمنية
    orders[index].wasWeekend = IsWeekend(dt.day_of_week);
    orders[index].wasSessionOpen = IsActiveSession(dt.hour);
    orders[index].wasNewsTime = IsLikelyNewsTime(dt.hour, dt.min);
    
    // تحليل التوقيت
    if(orders[index].wasWeekend) {
        orders[index].timeAnalysis = "نهاية أسبوع - سيولة منخفضة";
    } else if(dt.hour >= 8 && dt.hour <= 17) {
        orders[index].timeAnalysis = "ساعات عمل رئيسية - سيولة جيدة";
    } else if(dt.hour >= 18 && dt.hour <= 22) {
        orders[index].timeAnalysis = "مساء - سيولة متوسطة";
    } else {
        orders[index].timeAnalysis = "ساعات هادئة - سيولة منخفضة";
    }
    
    // إحصائيات الوقت
    if(orders[index].wasWeekend) stats.weekendOrders++;
    if(orders[index].wasNewsTime) stats.newsTimeOrders++;
}

//+------------------------------------------------------------------+
//| تحديد حالة تنفيذ الأمر بالتفصيل                               |
//+------------------------------------------------------------------+
void DetermineExecutionStatus(int index)
{
    switch(orders[index].state) {
        case ORDER_STATE_FILLED:
            orders[index].isExecuted = true;
            orders[index].executionStatus = "✅ تم التنفيذ بنجاح";
            orders[index].detailedAnalysis = "تم تنفيذ الأمر كما هو مطلوب";
            break;
            
        case ORDER_STATE_CANCELED:
            orders[index].isExecuted = false;
            orders[index].executionStatus = "❌ تم الإلغاء";
            orders[index].failureReason = "تم إلغاء الأمر يدوياً أو بواسطة النظام";
            orders[index].detailedAnalysis = "الأمر ألغي قبل الوصول للسعر المطلوب";
            break;
            
        case ORDER_STATE_EXPIRED:
            orders[index].isExecuted = false;
            orders[index].executionStatus = "⏰ انتهت صلاحية الأمر";
            orders[index].failureReason = "انتهت مدة صلاحية الأمر دون وصول السعر للمستوى المطلوب";
            orders[index].detailedAnalysis = "الأمر انتهت صلاحيته تلقائياً";
            break;
            
        case ORDER_STATE_REJECTED:
            orders[index].isExecuted = false;
            orders[index].executionStatus = "🚫 تم رفض الأمر";
            orders[index].failureReason = "رفض الوسيط للأمر - عدم كفاية الهامش أو خطأ في المعاملات";
            orders[index].detailedAnalysis = "الوسيط رفض الأمر فور وضعه";
            break;
            
        case ORDER_STATE_PARTIAL:
            orders[index].isExecuted = true;
            orders[index].executionStatus = "⚡ تم التنفيذ جزئياً";
            orders[index].detailedAnalysis = "تم تنفيذ جزء من الأمر فقط";
            stats.partiallyFilled++;
            break;
            
        default:
            orders[index].isExecuted = false;
            orders[index].executionStatus = "❓ حالة غير معروفة";
            orders[index].failureReason = "حالة الأمر غير محددة";
            orders[index].detailedAnalysis = "حالة الأمر غير واضحة";
    }
}

//+------------------------------------------------------------------+
//| جمع بيانات الأوامر المنفذة                                     |
//+------------------------------------------------------------------+
void CollectExecutedOrderData(int index)
{
    // البحث عن الصفقة المقابلة
    if(!FindCorrespondingDeal(index)) {
        Print("⚠️ لم يتم العثور على صفقة للأمر: ", orders[index].ticket);
        return;
    }
    
    // حساب البيانات الأساسية
    CalculateBasicExecutionData(index);
    
    // تحليل الأداء التفصيلي إذا تم إغلاق الصفقة
    if(orders[index].timeDone > 0) {
        AnalyzeDetailedPerformance(index);
    }
    
    // حساب مقاييس المخاطر والعوائد
    CalculateRiskRewardMetrics(index);
    
    // تحليل ظروف السوق
    AnalyzeMarketConditions(index);
}

//+------------------------------------------------------------------+
//| البحث عن الصفقة المقابلة للأمر                                 |
//+------------------------------------------------------------------+
bool FindCorrespondingDeal(int index)
{
    ulong orderTicket = orders[index].ticket;
    int dealsTotal = HistoryDealsTotal();
    
    for(int i = 0; i < dealsTotal; i++) {
        ulong dealTicket = HistoryDealGetTicket(i);
        if(dealTicket <= 0) continue;
        
        ulong dealOrderTicket = HistoryDealGetInteger(dealTicket, DEAL_ORDER);
        if(dealOrderTicket == orderTicket) {
            // وجدنا الصفقة المقابلة
            orders[index].priceActual = HistoryDealGetDouble(dealTicket, DEAL_PRICE);
            orders[index].profit = HistoryDealGetDouble(dealTicket, DEAL_PROFIT);
            orders[index].swap = HistoryDealGetDouble(dealTicket, DEAL_SWAP);
            orders[index].commission = HistoryDealGetDouble(dealTicket, DEAL_COMMISSION);
            orders[index].netProfit = orders[index].profit + orders[index].swap + orders[index].commission;
            
            // حساب الانزلاق
            orders[index].slippage = MathAbs(orders[index].priceActual - orders[index].priceOpen);
            
            // البحث عن صفقة الإغلاق
            FindClosingDeal(index);
            
            return true;
        }
    }
    
    return false;
}

//+------------------------------------------------------------------+
//| البحث عن صفقة الإغلاق                                          |
//+------------------------------------------------------------------+
void FindClosingDeal(int index)
{
    string symbol = orders[index].symbol;
    datetime openTime = orders[index].timeDone;
    ENUM_ORDER_TYPE openType = orders[index].type;
    
    int dealsTotal = HistoryDealsTotal();
    datetime closestCloseTime = 0;
    double closePrice = 0;
    double closingProfit = 0;
    
    for(int i = 0; i < dealsTotal; i++) {
        ulong dealTicket = HistoryDealGetTicket(i);
        if(dealTicket <= 0) continue;
        
        datetime dealTime = (datetime)HistoryDealGetInteger(dealTicket, DEAL_TIME);
        if(dealTime <= openTime) continue;
        
        string dealSymbol = HistoryDealGetString(dealTicket, DEAL_SYMBOL);
        if(dealSymbol != symbol) continue;
        
        ENUM_DEAL_TYPE dealType = (ENUM_DEAL_TYPE)HistoryDealGetInteger(dealTicket, DEAL_TYPE);
        
        // فحص إذا كانت صفقة إغلاق مقابلة
        bool isClosingDeal = false;
        if(openType == ORDER_TYPE_BUY && dealType == DEAL_TYPE_SELL) isClosingDeal = true;
        if(openType == ORDER_TYPE_SELL && dealType == DEAL_TYPE_BUY) isClosingDeal = true;
        
        if(isClosingDeal) {
            if(closestCloseTime == 0 || dealTime < closestCloseTime) {
                closestCloseTime = dealTime;
                closePrice = HistoryDealGetDouble(dealTicket, DEAL_PRICE);
                closingProfit = HistoryDealGetDouble(dealTicket, DEAL_PROFIT);
            }
        }
    }
    
    if(closestCloseTime > 0) {
        orders[index].netProfit += closingProfit;
        orders[index].holdingTimeMinutes = (int)((closestCloseTime - openTime) / 60);
        AnalyzeTradePerformance(index, closePrice, closestCloseTime);
    }
}

//+------------------------------------------------------------------+
//| تحليل أداء الصفقة                                              |
//+------------------------------------------------------------------+
void AnalyzeTradePerformance(int index, double closePrice, datetime closeTime)
{
    string symbol = orders[index].symbol;
    datetime openTime = orders[index].timeDone;
    
    // تهيئة أعلى وأدنى سعر
    orders[index].maxPrice = orders[index].priceActual;
    orders[index].minPrice = orders[index].priceActual;
    
    // فحص أعلى وأدنى سعر خلال فترة الصفقة
    int totalBars = Bars(symbol, PERIOD_M1, openTime, closeTime);
    if(totalBars > 0) {
        for(int j = 0; j < MathMin(totalBars, 1000); j++) {
            double high = iHigh(symbol, PERIOD_M1, j);
            double low = iLow(symbol, PERIOD_M1, j);
            
            if(high > orders[index].maxPrice) orders[index].maxPrice = high;
            if(low < orders[index].minPrice) orders[index].minPrice = low;
        }
    }
    
    // حساب مدة الصفقة والتقلب
    orders[index].barsDuration = totalBars;
    double priceRange = orders[index].maxPrice - orders[index].minPrice;
    double avgPrice = (orders[index].maxPrice + orders[index].minPrice) / 2;
    orders[index].volatilityDuringTrade = (avgPrice > 0) ? priceRange / avgPrice * 100 : 0;
    
    // حساب المسافات والأسباب
    CalculateDistancesAndReasons(index);
}

//+------------------------------------------------------------------+
//| حساب المسافات وتحديد الأسباب                                   |
//+------------------------------------------------------------------+
void CalculateDistancesAndReasons(int index)
{
    double point = GetSymbolPoint(orders[index].symbol);
    if(point <= 0) return;
    
    if(orders[index].type == ORDER_TYPE_BUY) {
        orders[index].pointsToTP = (orders[index].tp > 0) ? 
            (orders[index].maxPrice - orders[index].tp) / point : 0;
        orders[index].pointsToSL = (orders[index].sl > 0) ? 
            (orders[index].sl - orders[index].minPrice) / point : 0;
        orders[index].wasCorrectDirection = (orders[index].maxPrice > orders[index].priceActual * 1.001);
        orders[index].maxRunup = (orders[index].maxPrice - orders[index].priceActual) / point;
        orders[index].maxDrawdown = (orders[index].priceActual - orders[index].minPrice) / point;
    } else {
        orders[index].pointsToTP = (orders[index].tp > 0) ? 
            (orders[index].tp - orders[index].minPrice) / point : 0;
        orders[index].pointsToSL = (orders[index].sl > 0) ? 
            (orders[index].maxPrice - orders[index].sl) / point : 0;
        orders[index].wasCorrectDirection = (orders[index].minPrice < orders[index].priceActual * 0.999);
        orders[index].maxRunup = (orders[index].priceActual - orders[index].minPrice) / point;
        orders[index].maxDrawdown = (orders[index].maxPrice - orders[index].priceActual) / point;
    }
    
    // تحديد إذا وصل للأهداف
    orders[index].reachedTPLevel = (orders[index].pointsToTP <= 0);
    orders[index].reachedSLLevel = (orders[index].pointsToSL <= 0);
    orders[index].hitTakeProfit = orders[index].reachedTPLevel;
    orders[index].hitStopLoss = orders[index].reachedSLLevel;
    
    // تحديد سبب النتيجة
    DetermineTradeOutcomeReason(index);
}

//+------------------------------------------------------------------+
//| تحديد سبب نتيجة الصفقة                                         |
//+------------------------------------------------------------------+
void DetermineTradeOutcomeReason(int index)
{
    if(orders[index].netProfit > 0) {
        orders[index].failureReason = "✅ صفقة ناجحة - حققت أرباح";
        if(orders[index].hitTakeProfit) {
            orders[index].exitReason = "وصل للهدف";
        } else {
            orders[index].exitReason = "إغلاق يدوي بربح";
        }
    } else {
        string reason = "";
        
        // تحليل أسباب الفشل
        if(orders[index].pointsToTP > 0 && orders[index].pointsToTP < CLOSE_TO_TP_THRESHOLD) {
            reason += StringFormat("وصل قريباً من الهدف (%.1f نقاط فقط) | ", orders[index].pointsToTP);
        }
        
        double slippagePips = orders[index].slippage / GetSymbolPoint(orders[index].symbol);
        if(slippagePips > HIGH_SLIPPAGE_THRESHOLD) {
            reason += StringFormat("انزلاق عالي (%.1f نقاط) | ", slippagePips);
        }
        
        if(!orders[index].wasCorrectDirection) {
            reason += "اتجاه السوق عكس التوقع | ";
        }
        
        if(orders[index].hitStopLoss) {
            reason += "ضرب الستوب لوز | ";
        }
        
        if(reason == "") {
            reason = "ظروف السوق غير مناسبة للاستراتيجية";
        }
        
        orders[index].failureReason = reason;
        
        // تحديد سبب الخروج
        if(orders[index].hitStopLoss) {
            orders[index].exitReason = "ضرب الستوب لوز";
        } else {
            orders[index].exitReason = "إغلاق يدوي بخسارة";
        }
    }
}

//+------------------------------------------------------------------+
//| حساب البيانات الأساسية للتنفيذ                                 |
//+------------------------------------------------------------------+
void CalculateBasicExecutionData(int index)
{
    // حساب تأخير التنفيذ
    orders[index].executionDelay = (int)(orders[index].timeDone - orders[index].timeSetup);
    
    // حساب السبريد
    string symbol = orders[index].symbol;
    double currentSpread = GetCurrentSpread(symbol);
    orders[index].spreadAtSetup = currentSpread;
    orders[index].spreadAtExecution = currentSpread;
    orders[index].spreadPercentage = (orders[index].priceOpen > 0) ? 
        currentSpread / orders[index].priceOpen * 100 : 0;
    
    // فحص الفجوات
    DetectGaps(index);
    
    // إحصائيات السبريد والانزلاق
    UpdateSpreadAndSlippageStats(index);
}

//+------------------------------------------------------------------+
//| كشف الفجوات                                                    |
//+------------------------------------------------------------------+
void DetectGaps(int index)
{
    string symbol = orders[index].symbol;
    double prevClose = iClose(symbol, PERIOD_D1, 1);
    
    if(IsValidPrice(prevClose) && IsValidPrice(orders[index].priceOpen)) {
        double gapSize = MathAbs(orders[index].priceOpen - prevClose);
        double normalSpread = GetCurrentSpread(symbol);
        
        orders[index].hadGap = (gapSize > normalSpread * 3);
        orders[index].gapSize = gapSize / GetSymbolPoint(symbol);
        
        if(orders[index].hadGap) {
            stats.gappedOrders++;
            stats.avgGapSize = (stats.avgGapSize * (stats.gappedOrders - 1) + orders[index].gapSize) / stats.gappedOrders;
        }
    }
}

//+------------------------------------------------------------------+
//| تحديث إحصائيات السبريد والانزلاق                               |
//+------------------------------------------------------------------+
void UpdateSpreadAndSlippageStats(int index)
{
    // إحصائيات السبريد
    if(orders[index].spreadAtSetup > stats.maxSpread) {
        stats.maxSpread = orders[index].spreadAtSetup;
    }
    stats.avgSpread = (stats.avgSpread * (stats.executedOrders - 1) + orders[index].spreadAtSetup) / stats.executedOrders;
    
    // إحصائيات الانزلاق
    double slippagePips = orders[index].slippage / GetSymbolPoint(orders[index].symbol);
    if(slippagePips > stats.maxSlippage) {
        stats.maxSlippage = slippagePips;
    }
    stats.avgSlippage = (stats.avgSlippage * (stats.executedOrders - 1) + slippagePips) / stats.executedOrders;
}

//+------------------------------------------------------------------+
//| جمع بيانات الأوامر غير المنفذة                                 |
//+------------------------------------------------------------------+
void CollectNonExecutedOrderData(int index)
{
    // حساب مدة بقاء الأمر
    orders[index].orderLifetimeMinutes = (int)((orders[index].timeDone - orders[index].timeSetup) / 60);
    
    // السعر وقت وضع الأمر
    orders[index].priceAtTime = orders[index].priceOpen;
    
    // تحليل نوع الأمر المحدد
    AnalyzeSpecificOrderType(index);
    
    // تحديد حالة السوق وقت الوضع
    DetermineMarketConditionAtSetup(index);
    
    // تحليل سبب عدم التنفيذ بالتفصيل
    DetermineDetailedFailureReason(index);
}

//+------------------------------------------------------------------+
//| تصنيف الأوامر غير المنفذة                                      |
//+------------------------------------------------------------------+
void ClassifyNonExecutedOrder(int index)
{
    switch(orders[index].state) {
        case ORDER_STATE_EXPIRED:
            stats.pendingExpired++;
            if(orders[index].priceReachedLevel) {
                stats.priceReachedButNotExecuted++;
            } else {
                stats.priceDidntReach++;
            }
            break;
            
        case ORDER_STATE_CANCELED:
            stats.pendingCancelled++;
            stats.cancelledManually++;
            break;
            
        case ORDER_STATE_REJECTED:
            stats.pendingRejected++;
            stats.rejectedOrders++;
            break;
    }
    
    // إحصائيات مدة الأوامر
    if(orders[index].orderLifetimeMinutes > 0) {
        stats.avgOrderLifetime = (stats.avgOrderLifetime * (stats.totalOrders - stats.executedOrders - 1) + 
                                 orders[index].orderLifetimeMinutes) / (stats.totalOrders - stats.executedOrders);
    }
}

//--- نهاية الجزء الثاني ---
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 3/15       |
//| محلل بوت الزجزاج العبقري - الجزء الثالث: دوال التحليل الأساسية |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - دوال التحليل الأساسية للأوامر المنفذة

//+------------------------------------------------------------------+
//| تحليل الأوامر المنفذة بالتفصيل                                  |
//+------------------------------------------------------------------+
void AnalyzeDetailedPerformance(int index)
{
    if(!orders[index].isExecuted) return;
    
    string symbol = orders[index].symbol;
    datetime openTime = orders[index].timeDone;
    
    // تحليل الأداء خلال فترة الصفقة
    AnalyzePriceMovement(index);
    
    // تحليل التوقيت والمدة
    AnalyzeTimingAndDuration(index);
    
    // تحليل السبريد والتنفيذ
    AnalyzeSpreadAndExecution(index);
    
    // تحديد نمط الفشل أو النجاح
    IdentifyPerformancePattern(index);
}

//+------------------------------------------------------------------+
//| تحليل حركة السعر                                                |
//+------------------------------------------------------------------+
void AnalyzePriceMovement(int index)
{
    string symbol = orders[index].symbol;
    double point = GetSymbolPoint(symbol);
    
    if(point <= 0) return;
    
    // حساب أقصى حركة إيجابية وسلبية
    if(orders[index].type == ORDER_TYPE_BUY) {
        orders[index].maxRunup = (orders[index].maxPrice - orders[index].priceActual) / point;
        orders[index].maxDrawdown = (orders[index].priceActual - orders[index].minPrice) / point;
    } else {
        orders[index].maxRunup = (orders[index].priceActual - orders[index].minPrice) / point;
        orders[index].maxDrawdown = (orders[index].maxPrice - orders[index].priceActual) / point;
    }
    
    // تحديد إذا كان الاتجاه صحيح
    double priceMove = 0;
    if(orders[index].type == ORDER_TYPE_BUY) {
        priceMove = orders[index].maxPrice - orders[index].priceActual;
    } else {
        priceMove = orders[index].priceActual - orders[index].minPrice;
    }
    
    orders[index].wasCorrectDirection = (priceMove > point * 5); // أكثر من 5 نقاط
}

//+------------------------------------------------------------------+
//| تحليل التوقيت والمدة                                            |
//+------------------------------------------------------------------+
void AnalyzeTimingAndDuration(int index)
{
    // حساب مدة الاحتفاظ إذا لم تحسب بعد
    if(orders[index].holdingTimeMinutes <= 0 && orders[index].timeDone > 0) {
        // تقدير مدة افتراضية بناءً على نوع الأمر
        if(orders[index].type == ORDER_TYPE_BUY || orders[index].type == ORDER_TYPE_SELL) {
            orders[index].holdingTimeMinutes = 60; // ساعة واحدة افتراضية
        } else {
            orders[index].holdingTimeMinutes = 30; // نصف ساعة للأوامر المعلقة
        }
    }
    
    // تحليل مدة الصفقة
    if(orders[index].holdingTimeMinutes > 0) {
        if(orders[index].holdingTimeMinutes < 5) {
            orders[index].detailedAnalysis += " | مدة قصيرة جداً (أقل من 5 دقائق)";
        } else if(orders[index].holdingTimeMinutes > 1440) {
            orders[index].detailedAnalysis += " | مدة طويلة جداً (أكثر من يوم)";
        } else if(orders[index].holdingTimeMinutes > 240) {
            orders[index].detailedAnalysis += " | مدة طويلة (أكثر من 4 ساعات)";
        }
    }
    
    // تحليل تأخير التنفيذ
    if(orders[index].executionDelay > 5) {
        orders[index].detailedAnalysis += StringFormat(" | تأخير في التنفيذ (%d ثواني)", orders[index].executionDelay);
    }
}

//+------------------------------------------------------------------+
//| تحليل السبريد والتنفيذ                                          |
//+------------------------------------------------------------------+
void AnalyzeSpreadAndExecution(int index)
{
    string symbol = orders[index].symbol;
    double point = GetSymbolPoint(symbol);
    
    // تحليل السبريد
    if(orders[index].spreadAtSetup > HIGH_SPREAD_THRESHOLD) {
        orders[index].detailedAnalysis += StringFormat(" | سبريد عالي (%.1f نقاط)", 
                                         orders[index].spreadAtSetup / point);
        stats.highSpreadFailures++;
    }
    
    // تحليل الانزلاق
    double slippagePips = orders[index].slippage / point;
    if(slippagePips > HIGH_SLIPPAGE_THRESHOLD) {
        orders[index].detailedAnalysis += StringFormat(" | انزلاق عالي (%.1f نقاط)", slippagePips);
        stats.slippageFailures++;
    }
    
    // مقارنة الانزلاق بالسبريد
    if(orders[index].slippage > orders[index].spreadAtSetup * 2) {
        orders[index].detailedAnalysis += " | الانزلاق أكبر من ضعف السبريد";
    }
}

//+------------------------------------------------------------------+
//| تحديد نمط الأداء                                                |
//+------------------------------------------------------------------+
void IdentifyPerformancePattern(int index)
{
    // تحليل الصفقات الرابحة
    if(orders[index].netProfit > 0) {
        if(orders[index].hitTakeProfit) {
            orders[index].detailedAnalysis += " | وصل للهدف المحدد";
        } else {
            orders[index].detailedAnalysis += " | إغلاق يدوي بربح";
        }
        
        // تحليل جودة الربح
        if(orders[index].maxRunup > 0 && orders[index].netProfit > 0) {
            double profitEfficiency = (orders[index].netProfit / orders[index].volume) / orders[index].maxRunup * 100;
            if(profitEfficiency > 80) {
                orders[index].detailedAnalysis += " | كفاءة ربح عالية";
            } else if(profitEfficiency < 30) {
                orders[index].detailedAnalysis += " | كفاءة ربح منخفضة";
            }
        }
    } 
    // تحليل الصفقات الخاسرة
    else if(orders[index].netProfit < 0) {
        if(orders[index].hitStopLoss) {
            orders[index].detailedAnalysis += " | ضرب الستوب لوز";
        } else {
            orders[index].detailedAnalysis += " | إغلاق يدوي بخسارة";
        }
        
        // تحليل أنماط الفشل
        AnalyzeFailurePatterns(index);
    }
    // الصفقات المتعادلة
    else {
        orders[index].detailedAnalysis += " | صفقة متعادلة (بدون ربح أو خسارة)";
        stats.executedBreakeven++;
    }
}

//+------------------------------------------------------------------+
//| تحليل أنماط الفشل للصفقات الخاسرة                              |
//+------------------------------------------------------------------+
void AnalyzeFailurePatterns(int index)
{
    double point = GetSymbolPoint(orders[index].symbol);
    
    // فحص إذا كان قريب من الهدف
    if(orders[index].pointsToTP > 0 && orders[index].pointsToTP < CLOSE_TO_TP_THRESHOLD) {
        orders[index].detailedAnalysis += StringFormat(" | كان قريباً من الهدف (%.1f نقاط)", 
                                         orders[index].pointsToTP);
        stats.almostTPFailures++;
    }
    
    // فحص الاتجاه الخاطئ
    if(!orders[index].wasCorrectDirection) {
        orders[index].detailedAnalysis += " | الاتجاه كان خاطئاً من البداية";
        stats.wrongDirectionFailures++;
    }
    
    // فحص التوقيت السيء
    if(orders[index].wasWeekend) {
        orders[index].detailedAnalysis += " | تم في نهاية الأسبوع";
    }
    
    if(orders[index].wasNewsTime) {
        orders[index].detailedAnalysis += " | تم أثناء وقت الأخبار";
    }
    
    // فحص السيولة
    if(!orders[index].wasSessionOpen) {
        orders[index].detailedAnalysis += " | تم خارج ساعات السيولة العالية";
        stats.liquidityFailures++;
    }
}

//+------------------------------------------------------------------+
//| حساب مقاييس المخاطر والعوائد المتقدمة                          |
//+------------------------------------------------------------------+
void CalculateRiskRewardMetrics(int index)
{
    if(!orders[index].isExecuted) return;
    
    string symbol = orders[index].symbol;
    double point = GetSymbolPoint(symbol);
    
    // حساب نسبة المخاطر للعوائد المخططة
    if(IsValidPrice(orders[index].sl) && IsValidPrice(orders[index].tp) && point > 0) {
        double riskPips = MathAbs(orders[index].priceOpen - orders[index].sl) / point;
        double rewardPips = MathAbs(orders[index].tp - orders[index].priceOpen) / point;
        
        if(riskPips > 0) {
            orders[index].riskRewardRatio = rewardPips / riskPips;
        }
        
        // تحليل جودة النسبة
        if(orders[index].riskRewardRatio < 1.0) {
            orders[index].detailedAnalysis += " | نسبة مخاطر/عائد ضعيفة";
        } else if(orders[index].riskRewardRatio > 3.0) {
            orders[index].detailedAnalysis += " | نسبة مخاطر/عائد ممتازة";
        }
    }
    
    // حساب النسبة الفعلية المحققة
    if(orders[index].commission != 0 && MathAbs(orders[index].commission) > 0) {
        orders[index].actualRiskReward = orders[index].netProfit / MathAbs(orders[index].commission);
    }
    
    // حساب نسبة السحب من رأس المال
    double accountBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    if(accountBalance > 0 && orders[index].netProfit < 0) {
        orders[index].percentageDrawdown = MathAbs(orders[index].netProfit) / accountBalance * 100;
        
        // تحليل حجم السحب
        if(orders[index].percentageDrawdown > 5.0) {
            orders[index].detailedAnalysis += StringFormat(" | سحب كبير من رأس المال (%.2f%%)", 
                                             orders[index].percentageDrawdown);
        }
    }
}

//+------------------------------------------------------------------+
//| تحليل ظروف السوق المتقدمة                                      |
//+------------------------------------------------------------------+
void AnalyzeMarketConditions(int index)
{
    if(!orders[index].isExecuted) return;
    
    // تحليل التقلب
    double volatility = orders[index].volatilityDuringTrade;
    
    if(volatility > HIGH_VOLATILITY_THRESHOLD) {
        orders[index].marketCondition = "متقلب جداً - حركة قوية";
        orders[index].detailedAnalysis += " | سوق متقلب جداً";
    } else if(volatility > NORMAL_VOLATILITY_THRESHOLD) {
        orders[index].marketCondition = "متقلب - حركة معتدلة";
        orders[index].detailedAnalysis += " | سوق متقلب معتدل";
    } else if(volatility > 0.5) {
        orders[index].marketCondition = "معتدل - حركة طبيعية";
    } else {
        orders[index].marketCondition = "هادئ - حركة ضعيفة";
        orders[index].detailedAnalysis += " | سوق هادئ";
    }
    
    // تحليل ملائمة الاستراتيجية لظروف السوق
    AnalyzeStrategyFitness(index);
}

//+------------------------------------------------------------------+
//| تحليل ملائمة الاستراتيجية لظروف السوق                         |
//+------------------------------------------------------------------+
void AnalyzeStrategyFitness(int index)
{
    // تحليل بناءً على نوع الأمر وظروف السوق
    bool isMarketOrder = (orders[index].type == ORDER_TYPE_BUY || orders[index].type == ORDER_TYPE_SELL);
    bool isPendingOrder = !isMarketOrder;
    
    // الأوامر الفورية في السوق المتقلب
    if(isMarketOrder && orders[index].volatilityDuringTrade > HIGH_VOLATILITY_THRESHOLD) {
        if(orders[index].netProfit < 0) {
            orders[index].detailedAnalysis += " | أمر فوري في سوق متقلب - مخاطر عالية";
        } else {
            orders[index].detailedAnalysis += " | استفاد من التقلب العالي";
        }
    }
    
    // الأوامر المعلقة في السوق الهادئ
    if(isPendingOrder && orders[index].volatilityDuringTrade < 0.5) {
        orders[index].detailedAnalysis += " | أمر معلق في سوق هادئ - قد يحتاج وقت أطول";
    }
    
    // تحليل التوقيت
    AnalyzeTimingEffectiveness(index);
}

//+------------------------------------------------------------------+
//| تحليل فعالية التوقيت                                           |
//+------------------------------------------------------------------+
void AnalyzeTimingEffectiveness(int index)
{
    // تحليل بناءً على ساعة التنفيذ
    int hour = orders[index].hourOfDay;
    
    if(hour >= 8 && hour <= 12) {
        orders[index].detailedAnalysis += " | تنفيذ في الصباح (جلسة أوروبا)";
    } else if(hour >= 13 && hour <= 17) {
        orders[index].detailedAnalysis += " | تنفيذ في تداخل الجلسات (أفضل سيولة)";
    } else if(hour >= 18 && hour <= 22) {
        orders[index].detailedAnalysis += " | تنفيذ في جلسة أمريكا";
    } else {
        orders[index].detailedAnalysis += " | تنفيذ في ساعات هادئة";
        if(orders[index].netProfit < 0) {
            stats.timeoutFailures++;
        }
    }
    
    // تحليل يوم الأسبوع
    if(orders[index].dayOfWeek == "الجمعة") {
        orders[index].detailedAnalysis += " | يوم الجمعة - سيولة متناقصة";
    } else if(orders[index].dayOfWeek == "الإثنين") {
        orders[index].detailedAnalysis += " | يوم الإثنين - بداية الأسبوع";
    }
}

//+------------------------------------------------------------------+
//| تحليل شامل للصفقة                                              |
//+------------------------------------------------------------------+
void PerformComprehensiveTradeAnalysis(int index)
{
    if(!orders[index].isExecuted) return;
    
    // تجميع كل التحاليل
    AnalyzeDetailedPerformance(index);
    CalculateRiskRewardMetrics(index);
    AnalyzeMarketConditions(index);
    
    // تقييم عام للصفقة
    string overallAssessment = "";
    
    if(orders[index].netProfit > 0) {
        if(orders[index].riskRewardRatio > 2.0 && orders[index].wasCorrectDirection) {
            overallAssessment = "صفقة ممتازة - ربح جيد وإدارة مخاطر سليمة";
        } else if(orders[index].wasCorrectDirection) {
            overallAssessment = "صفقة جيدة - ربح لكن يمكن تحسين إدارة المخاطر";
        } else {
            overallAssessment = "ربح محظوظ - الاتجاه لم يكن مثالياً";
        }
    } else {
        if(orders[index].pointsToTP < 10) {
            overallAssessment = "خسارة مؤسفة - كانت قريبة من الربح";
        } else if(!orders[index].wasCorrectDirection) {
            overallAssessment = "خسارة متوقعة - الاتجاه كان خاطئاً";
        } else {
            overallAssessment = "خسارة عادية - ضمن إدارة المخاطر";
        }
    }
    
    orders[index].detailedAnalysis += " | التقييم: " + overallAssessment;
}

//--- نهاية الجزء الثالث ---
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 4/15       |
//| محلل بوت الزجزاج العبقري - الجزء الرابع: حساب المسافات والنقاط |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - حساب المسافات والنقاط بالتفصيل

//+------------------------------------------------------------------+
//| تحليل نوع الأمر المحدد وحساب المسافات                         |
//+------------------------------------------------------------------+
void AnalyzeSpecificOrderType(int index)
{
    string symbol = orders[index].symbol;
    double currentPrice = 0;
    
    // تحديد السعر الحالي بناءً على نوع الأمر
    if(orders[index].type == ORDER_TYPE_BUY_LIMIT || orders[index].type == ORDER_TYPE_BUY_STOP) {
        currentPrice = GetCurrentAsk(symbol);
    } else {
        currentPrice = GetCurrentBid(symbol);
    }
    
    // حساب المسافة من السعر المطلوب
    orders[index].distanceFromPrice = MathAbs(currentPrice - orders[index].priceOpen);
    
    // فحص ما إذا كان السعر وصل للمستوى المطلوب
    CheckIfPriceReachedLevel(index);
    
    // تحليل مفصل لكل نوع أمر
    AnalyzeOrderTypeSpecifics(index, currentPrice);
    
    // حساب إحصائيات المسافة
    CalculateDistanceStatistics(index);
}

//+------------------------------------------------------------------+
//| فحص ما إذا وصل السعر للمستوى المطلوب خلال فترة الأمر          |
//+------------------------------------------------------------------+
void CheckIfPriceReachedLevel(int index)
{
    string symbol = orders[index].symbol;
    datetime startTime = orders[index].timeSetup;
    datetime endTime = orders[index].timeDone;
    double point = GetSymbolPoint(symbol);
    
    // تهيئة القيم
    double highestPrice = orders[index].priceOpen;
    double lowestPrice = orders[index].priceOpen;
    
    // فحص الأسعار خلال فترة الأمر
    int totalBars = Bars(symbol, PERIOD_M1, startTime, endTime);
    if(totalBars > 0) {
        // فحص عينة من الشموع لتوفير الأداء
        int step = MathMax(1, totalBars / 500); // فحص حد أقصى 500 شمعة
        
        for(int j = 0; j < totalBars; j += step) {
            double high = iHigh(symbol, PERIOD_M1, j);
            double low = iLow(symbol, PERIOD_M1, j);
            
            if(IsValidPrice(high) && high > highestPrice) highestPrice = high;
            if(IsValidPrice(low) && low < lowestPrice) lowestPrice = low;
        }
    }
    
    // تحديد أفضل سعر وصل إليه حسب نوع الأمر
    DetermineBestPriceReached(index, highestPrice, lowestPrice, point);
    
    // تحليل مدى قرب وصول السعر للهدف
    AnalyzePriceProximity(index, point);
}

//+------------------------------------------------------------------+
//| تحديد أفضل سعر وصل إليه                                        |
//+------------------------------------------------------------------+
void DetermineBestPriceReached(int index, double highestPrice, double lowestPrice, double point)
{
    switch(orders[index].type) {
        case ORDER_TYPE_BUY_LIMIT:
        case ORDER_TYPE_SELL_STOP:
            // هذه الأوامر تحتاج السعر ينخفض للمستوى المطلوب
            orders[index].bestPriceReached = lowestPrice;
            orders[index].priceReachedLevel = (lowestPrice <= orders[index].priceOpen + point); // هامش نقطة واحدة
            orders[index].minDistanceFromTarget = MathAbs(lowestPrice - orders[index].priceOpen) / point;
            break;
            
        case ORDER_TYPE_SELL_LIMIT:
        case ORDER_TYPE_BUY_STOP:
            // هذه الأوامر تحتاج السعر يرتفع للمستوى المطلوب
            orders[index].bestPriceReached = highestPrice;
            orders[index].priceReachedLevel = (highestPrice >= orders[index].priceOpen - point); // هامش نقطة واحدة
            orders[index].minDistanceFromTarget = MathAbs(highestPrice - orders[index].priceOpen) / point;
            break;
            
        default:
            // للأوامر الفورية
            orders[index].bestPriceReached = orders[index].priceOpen;
            orders[index].priceReachedLevel = true;
            orders[index].minDistanceFromTarget = 0;
    }
    
    // حساب أقصى مسافة من الهدف
    orders[index].maxDistanceFromTarget = MathMax(
        MathAbs(highestPrice - orders[index].priceOpen) / point,
        MathAbs(lowestPrice - orders[index].priceOpen) / point
    );
}

//+------------------------------------------------------------------+
//| تحليل مدى قرب وصول السعر للهدف                                |
//+------------------------------------------------------------------+
void AnalyzePriceProximity(int index, double point)
{
    // تحليل مدى قرب السعر من الهدف
    if(orders[index].minDistanceFromTarget < 1.0) {
        orders[index].failureReason += "وصل السعر تقريباً للمستوى المطلوب (أقل من نقطة واحدة) | ";
        stats.liquidityFailures++; // يعتبر مشكلة سيولة
    } else if(orders[index].minDistanceFromTarget < 5.0) {
        orders[index].failureReason += StringFormat("وصل قريباً جداً من المستوى (%.1f نقاط) | ", 
                                                   orders[index].minDistanceFromTarget);
        stats.liquidityFailures++;
    } else if(orders[index].minDistanceFromTarget < 20.0) {
        orders[index].failureReason += StringFormat("وصل قريباً من المستوى (%.1f نقاط) | ", 
                                                   orders[index].minDistanceFromTarget);
    } else {
        orders[index].failureReason += StringFormat("لم يقترب من المستوى - أقرب مسافة %.1f نقاط | ", 
                                                   orders[index].minDistanceFromTarget);
    }
    
    // تحليل التقلب خلال فترة الأمر
    double priceRange = orders[index].maxDistanceFromTarget;
    if(priceRange > 50.0) {
        orders[index].failureReason += "السوق كان متقلباً جداً خلال فترة الأمر | ";
    } else if(priceRange < 5.0) {
        orders[index].failureReason += "السوق كان هادئاً جداً خلال فترة الأمر | ";
    }
}

//+------------------------------------------------------------------+
//| تحليل تفاصيل نوع الأمر                                         |
//+------------------------------------------------------------------+
void AnalyzeOrderTypeSpecifics(int index, double currentPrice)
{
    double point = GetSymbolPoint(orders[index].symbol);
    double priceDiffPips = MathAbs(currentPrice - orders[index].priceOpen) / point;
    
    switch(orders[index].type) {
        case ORDER_TYPE_BUY_LIMIT:
            if(orders[index].priceOpen >= currentPrice) {
                orders[index].failureReason += StringFormat("أمر شراء محدود - السعر الحالي %.5f أقل من المطلوب %.5f | ", 
                                                           currentPrice, orders[index].priceOpen);
            } else {
                orders[index].failureReason += StringFormat("أمر شراء محدود - السعر تجاوز المستوى بـ %.1f نقاط | ", 
                                                           priceDiffPips);
            }
            break;
            
        case ORDER_TYPE_SELL_LIMIT:
            if(orders[index].priceOpen <= currentPrice) {
                orders[index].failureReason += StringFormat("أمر بيع محدود - السعر الحالي %.5f أعلى من المطلوب %.5f | ", 
                                                           currentPrice, orders[index].priceOpen);
            } else {
                orders[index].failureReason += StringFormat("أمر بيع محدود - السعر انخفض عن المستوى بـ %.1f نقاط | ", 
                                                           priceDiffPips);
            }
            break;
            
        case ORDER_TYPE_BUY_STOP:
            if(orders[index].priceOpen <= currentPrice) {
                orders[index].failureReason += StringFormat("أمر شراء إيقاف - السعر الحالي %.5f أعلى من المطلوب %.5f | ", 
                                                           currentPrice, orders[index].priceOpen);
            } else {
                orders[index].failureReason += StringFormat("أمر شراء إيقاف - السعر لم يصل للمستوى، يحتاج %.1f نقاط | ", 
                                                           priceDiffPips);
            }
            break;
            
        case ORDER_TYPE_SELL_STOP:
            if(orders[index].priceOpen >= currentPrice) {
                orders[index].failureReason += StringFormat("أمر بيع إيقاف - السعر الحالي %.5f أقل من المطلوب %.5f | ", 
                                                           currentPrice, orders[index].priceOpen);
            } else {
                orders[index].failureReason += StringFormat("أمر بيع إيقاف - السعر ارتفع عن المستوى بـ %.1f نقاط | ", 
                                                           priceDiffPips);
            }
            break;
            
        case ORDER_TYPE_BUY:
            orders[index].failureReason += "أمر شراء فوري - تم التنفيذ فوراً | ";
            break;
            
        case ORDER_TYPE_SELL:
            orders[index].failureReason += "أمر بيع فوري - تم التنفيذ فوراً | ";
            break;
            
        default:
            orders[index].failureReason += "نوع أمر غير معروف | ";
    }
}

//+------------------------------------------------------------------+
//| حساب إحصائيات المسافة                                          |
//+------------------------------------------------------------------+
void CalculateDistanceStatistics(int index)
{
    // تحديث إحصائيات المسافة للأوامر غير المنفذة
    if(!orders[index].isExecuted && orders[index].minDistanceFromTarget > 0) {
        // حساب متوسط المسافة من الهدف
        int nonExecutedCount = stats.totalOrders - stats.executedOrders;
        if(nonExecutedCount > 0) {
            stats.avgDistanceFromTarget = (stats.avgDistanceFromTarget * (nonExecutedCount - 1) + 
                                         orders[index].minDistanceFromTarget) / nonExecutedCount;
        }
    }
}

//+------------------------------------------------------------------+
//| تحديد حالة السوق وقت وضع الأمر                                 |
//+------------------------------------------------------------------+
void DetermineMarketConditionAtSetup(int index)
{
    string symbol = orders[index].symbol;
    double spread = GetCurrentSpread(symbol);
    double point = GetSymbolPoint(symbol);
    double spreadPips = spread / point;
    
    // تحليل السبريد
    if(spreadPips > HIGH_SPREAD_THRESHOLD) {
        orders[index].marketConditionAtSetup = "سبريد عالي جداً";
        orders[index].failureReason += StringFormat("سبريد عالي جداً (%.1f نقاط) | ", spreadPips);
    } else if(spreadPips > NORMAL_SPREAD_THRESHOLD) {
        orders[index].marketConditionAtSetup = "سبريد عالي";
        orders[index].failureReason += StringFormat("سبريد عالي (%.1f نقاط) | ", spreadPips);
    } else if(spreadPips > 1.0) {
        orders[index].marketConditionAtSetup = "سبريد متوسط";
    } else {
        orders[index].marketConditionAtSetup = "سبريد طبيعي";
    }
    
    // تحليل السيولة وقت وضع الأمر
    AnalyzeLiquidityAtSetup(index);
    
    // تحليل التوقيت
    AnalyzeTimingAtSetup(index);
}

//+------------------------------------------------------------------+
//| تحليل السيولة وقت وضع الأمر                                    |
//+------------------------------------------------------------------+
void AnalyzeLiquidityAtSetup(int index)
{
    // تحليل بناءً على الوقت
    if(orders[index].wasWeekend) {
        orders[index].marketConditionAtSetup += " - نهاية أسبوع";
        orders[index].failureReason += "وضع في نهاية الأسبوع (سيولة منخفضة) | ";
    }
    
    if(!orders[index].wasSessionOpen) {
        orders[index].marketConditionAtSetup += " - خارج جلسات التداول";
        orders[index].failureReason += "وضع خارج ساعات التداول النشطة | ";
    }
    
    if(orders[index].wasNewsTime) {
        orders[index].marketConditionAtSetup += " - وقت أخبار";
        orders[index].failureReason += "وضع قرب وقت الأخبار (تقلب عالي متوقع) | ";
    }
    
    // تحليل حجم الصفقة مقارنة بظروف السيولة
    if(orders[index].volume > 1.0 && !orders[index].wasSessionOpen) {
        orders[index].failureReason += "حجم كبير في وقت سيولة منخفضة | ";
    }
}

//+------------------------------------------------------------------+
//| تحليل التوقيت وقت وضع الأمر                                    |
//+------------------------------------------------------------------+
void AnalyzeTimingAtSetup(int index)
{
    MqlDateTime dt;
    TimeToStruct(orders[index].timeSetup, dt);
    
    // تحليل ساعة الوضع
    if(dt.hour < 6) {
        orders[index].failureReason += "وضع في ساعات الفجر المبكرة (سيولة ضعيفة جداً) | ";
    } else if(dt.hour > 22) {
        orders[index].failureReason += "وضع في ساعات متأخرة من الليل | ";
    }
    
    // تحليل اليوم
    if(dt.day_of_week == 5 && dt.hour > 15) {
        orders[index].failureReason += "وضع في نهاية جمعة (إغلاق أسبوعي قريب) | ";
    } else if(dt.day_of_week == 1 && dt.hour < 8) {
        orders[index].failureReason += "وضع في بداية إثنين مبكراً (افتتاح أسبوعي) | ";
    }
    
    // تحليل الموسم (تقريبي)
    if(dt.mon == 12 || dt.mon == 1) {
        orders[index].failureReason += "وضع في موسم الأعياد (سيولة قد تكون منخفضة) | ";
    } else if(dt.mon == 8) {
        orders[index].failureReason += "وضع في أغسطس (عطلات صيفية - سيولة منخفضة) | ";
    }
}

//+------------------------------------------------------------------+
//| تحديد السبب المفصل لعدم التنفيذ                                |
//+------------------------------------------------------------------+
void DetermineDetailedFailureReason(int index)
{
    string reason = orders[index].failureReason;
    
    // إضافة تحليل مفصل حسب وصول السعر للمستوى
    if(orders[index].priceReachedLevel) {
        reason += "✋ السعر وصل للمستوى المطلوب لكن لم يتم التنفيذ - أسباب محتملة: ";
        reason += "نقص السيولة، سرعة حركة السعر، أو رفض الوسيط | ";
        stats.liquidityFailures++;
    } else {
        reason += StringFormat("📏 السعر لم يصل للمستوى - أقرب مسافة %.1f نقاط | ", 
                              orders[index].minDistanceFromTarget);
    }
    
    // تحليل مدة بقاء الأمر
    if(orders[index].orderLifetimeMinutes < SHORT_ORDER_LIFETIME) {
        reason += StringFormat("⏱️ مدة الأمر قصيرة جداً (%d دقائق) - قد لا تكفي لوصول السعر | ", 
                              orders[index].orderLifetimeMinutes);
        stats.timeoutFailures++;
    } else if(orders[index].orderLifetimeMinutes > LONG_ORDER_LIFETIME) {
        reason += StringFormat("⏳ مدة الأمر طويلة جداً (%.1f ساعة) - ظروف السوق تغيرت | ", 
                              orders[index].orderLifetimeMinutes / 60.0);
    }
    
    // تحليل المسافة من السعر الحالي
    double currentDistance = orders[index].distanceFromPrice / GetSymbolPoint(orders[index].symbol);
    if(currentDistance > 100.0) {
        reason += StringFormat("📊 الأمر بعيد جداً عن السعر الحالي (%.1f نقاط) | ", currentDistance);
    } else if(currentDistance < 5.0) {
        reason += StringFormat("🎯 الأمر قريب جداً من السعر الحالي (%.1f نقاط) | ", currentDistance);
    }
    
    // تحليل نهائي للسبب
    AddFinalFailureAnalysis(index, reason);
    
    orders[index].failureReason = reason;
}

//+------------------------------------------------------------------+
//| إضافة التحليل النهائي لسبب الفشل                               |
//+------------------------------------------------------------------+
void AddFinalFailureAnalysis(int index, string &reason)
{
    // تحليل شامل للأسباب
    bool hasMultipleFactors = false;
    int factorCount = 0;
    
    // عد عوامل الفشل
    if(orders[index].wasWeekend) factorCount++;
    if(!orders[index].wasSessionOpen) factorCount++;
    if(orders[index].wasNewsTime) factorCount++;
    if(orders[index].orderLifetimeMinutes < SHORT_ORDER_LIFETIME) factorCount++;
    if(!orders[index].priceReachedLevel) factorCount++;
    
    if(factorCount > 2) {
        reason += "📍 عوامل متعددة ساهمت في عدم التنفيذ | ";
        hasMultipleFactors = true;
    }
    
    // اقتراح حل بناءً على السبب الرئيسي
    if(!orders[index].priceReachedLevel && orders[index].minDistanceFromTarget > 20) {
        reason += "💡 اقتراح: مراجعة نقاط الدخول - الأمر كان بعيداً عن الحركة الفعلية | ";
    } else if(orders[index].priceReachedLevel) {
        reason += "💡 اقتراح: فحص إعدادات الوسيط أو تحسين توقيت وضع الأوامر | ";
    } else if(orders[index].orderLifetimeMinutes < SHORT_ORDER_LIFETIME) {
        reason += "💡 اقتراح: زيادة مدة انتهاء صلاحية الأوامر | ";
    } else if(hasMultipleFactors) {
        reason += "💡 اقتراح: مراجعة استراتيجية توقيت وضع الأوامر | ";
    }
}

//+------------------------------------------------------------------+
//| تحليل شامل للأوامر غير المنفذة                                 |
//+------------------------------------------------------------------+
void PerformComprehensiveNonExecutedAnalysis(int index)
{
    if(orders[index].isExecuted) return;
    
    // تجميع كل التحاليل للأوامر غير المنفذة
    AnalyzeSpecificOrderType(index);
    DetermineMarketConditionAtSetup(index);
    DetermineDetailedFailureReason(index);
    
    // تقييم عام للأمر غير المنفذ
    string overallAssessment = "";
    
    if(orders[index].priceReachedLevel) {
        if(orders[index].minDistanceFromTarget < 1) {
            overallAssessment = "فشل محبط - السعر وصل تماماً ولم ينفذ";
        } else {
            overallAssessment = "فشل مؤسف - السعر وصل قريباً جداً";
        }
    } else if(orders[index].minDistanceFromTarget > 50) {
        overallAssessment = "أمر غير واقعي - السعر لم يقترب حتى";
    } else if(orders[index].orderLifetimeMinutes < SHORT_ORDER_LIFETIME) {
        overallAssessment = "فشل متوقع - مدة قصيرة جداً";
    } else {
        overallAssessment = "فشل طبيعي - ظروف السوق لم تساعد";
    }
    
    orders[index].detailedAnalysis = "تقييم الأمر غير المنفذ: " + overallAssessment;
}

//--- نهاية الجزء الرابع ---
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 5/15       |
//| محلل بوت الزجزاج العبقري - الجزء الخامس: تحليل المخاطر المتقدم |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - تحليل المخاطر والأداء المتقدم

//+------------------------------------------------------------------+
//| تحليل جميع الأوامر بالتفصيل                                    |
//+------------------------------------------------------------------+
void AnalyzeAllOrders()
{
    Print("🔍 جاري التحليل التفصيلي لجميع الأوامر...");
    
    for(int i = 0; i < stats.totalOrders; i++) {
        if(orders[i].isExecuted) {
            // تحليل شامل للأوامر المنفذة
            AnalyzeExecutedOrderComprehensive(i);
        } else {
            // تحليل شامل للأوامر غير المنفذة
            AnalyzeNonExecutedOrderComprehensive(i);
        }
        
        // تقرير التقدم
        if(i % 50 == 0 && i > 0) {
            Print("📊 تم تحليل ", i, " أمر من أصل ", stats.totalOrders);
        }
    }
    
    Print("✅ انتهى التحليل التفصيلي لجميع الأوامر");
}

//+------------------------------------------------------------------+
//| تحليل شامل للأوامر المنفذة                                     |
//+------------------------------------------------------------------+
void AnalyzeExecutedOrderComprehensive(int index)
{
    // تحليل الأداء التفصيلي
    PerformComprehensiveTradeAnalysis(index);
    
    // تحديث الإحصائيات للمنفذة
    UpdateExecutedOrderStatistics(index);
    
    // تحليل المخاطر الفردية
    AnalyzeIndividualRisk(index);
    
    // تصنيف نمط الصفقة
    ClassifyTradePattern(index);
}

//+------------------------------------------------------------------+
//| تحليل شامل للأوامر غير المنفذة                                 |
//+------------------------------------------------------------------+
void AnalyzeNonExecutedOrderComprehensive(int index)
{
    // تحليل شامل لعدم التنفيذ
    PerformComprehensiveNonExecutedAnalysis(index);
    
    // تحديث الإحصائيات لغير المنفذة
    UpdateNonExecutedOrderStatistics(index);
    
    // تحليل الفرصة المفقودة
    AnalyzeMissedOpportunity(index);
    
    // تصنيف نمط الفشل
    ClassifyFailurePattern(index);
}

//+------------------------------------------------------------------+
//| تحديث إحصائيات الأوامر المنفذة                                 |
//+------------------------------------------------------------------+
void UpdateExecutedOrderStatistics(int index)
{
    // تحديث الأرباح والخسائر
    stats.totalProfit += orders[index].netProfit;
    stats.totalVolume += orders[index].volume;
    stats.totalCommission += orders[index].commission;
    stats.totalSwap += orders[index].swap;
    
    // تصنيف الصفقة
    if(orders[index].netProfit > 0) {
        stats.executedWins++;
        stats.grossProfit += orders[index].netProfit;
        
        // تحديث أكبر ربح
        if(orders[index].netProfit > stats.maxWin) {
            stats.maxWin = orders[index].netProfit;
        }
    } else if(orders[index].netProfit < 0) {
        stats.executedLosses++;
        stats.grossLoss += MathAbs(orders[index].netProfit);
        
        // تحديث أكبر خسارة
        if(MathAbs(orders[index].netProfit) > stats.maxLoss) {
            stats.maxLoss = MathAbs(orders[index].netProfit);
        }
        
        // تحديث أقصى سحب
        if(orders[index].percentageDrawdown > stats.maxDrawdownPct) {
            stats.maxDrawdownPct = orders[index].percentageDrawdown;
        }
    } else {
        stats.executedBreakeven++;
    }
    
    // تحديث أقصى ربح محتمل
    if(orders[index].maxRunup > stats.maxRunupPct) {
        stats.maxRunupPct = orders[index].maxRunup;
    }
}

//+------------------------------------------------------------------+
//| تحديث إحصائيات الأوامر غير المنفذة                             |
//+------------------------------------------------------------------+
void UpdateNonExecutedOrderStatistics(int index)
{
    // تصنيف سبب عدم التنفيذ
    if(orders[index].priceReachedLevel) {
        stats.priceReachedButNotExecuted++;
    } else {
        stats.priceDidntReach++;
    }
    
    // تحديث متوسط مدة الأوامر
    if(orders[index].orderLifetimeMinutes > 0) {
        int nonExecutedCount = stats.totalOrders - stats.executedOrders;
        if(nonExecutedCount > 0) {
            stats.avgOrderLifetime = (stats.avgOrderLifetime * (nonExecutedCount - 1) + 
                                     orders[index].orderLifetimeMinutes) / nonExecutedCount;
        }
    }
}

//+------------------------------------------------------------------+
//| تحليل المخاطر الفردية للصفقة                                   |
//+------------------------------------------------------------------+
void AnalyzeIndividualRisk(int index)
{
    if(!orders[index].isExecuted) return;
    
    // تحليل حجم المخاطرة
    double accountBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    if(accountBalance > 0) {
        double riskAmount = MathAbs(orders[index].netProfit);
        double riskPercentage = riskAmount / accountBalance * 100;
        
        if(riskPercentage > 5.0) {
            orders[index].detailedAnalysis += StringFormat(" | مخاطرة عالية (%.2f%% من الحساب)", riskPercentage);
        } else if(riskPercentage > 2.0) {
            orders[index].detailedAnalysis += StringFormat(" | مخاطرة متوسطة (%.2f%% من الحساب)", riskPercentage);
        }
    }
    
    // تحليل نسبة المخاطر للعوائد
    if(orders[index].riskRewardRatio > 0) {
        if(orders[index].riskRewardRatio < 1.0) {
            orders[index].detailedAnalysis += " | نسبة مخاطر/عائد سيئة (أقل من 1:1)";
        } else if(orders[index].riskRewardRatio > 3.0) {
            orders[index].detailedAnalysis += " | نسبة مخاطر/عائد ممتازة (أكثر من 3:1)";
        }
    }
    
    // تحليل فعالية الستوب لوز
    AnalyzeStopLossEffectiveness(index);
    
    // تحليل فعالية التيك بروفت
    AnalyzeTakeProfitEffectiveness(index);
}

//+------------------------------------------------------------------+
//| تحليل فعالية الستوب لوز                                        |
//+------------------------------------------------------------------+
void AnalyzeStopLossEffectiveness(int index)
{
    if(!IsValidPrice(orders[index].sl)) {
        orders[index].detailedAnalysis += " | لا يوجد ستوب لوز (مخاطرة عالية)";
        return;
    }
    
    double point = GetSymbolPoint(orders[index].symbol);
    double slDistance = MathAbs(orders[index].priceOpen - orders[index].sl) / point;
    
    // تحليل مسافة الستوب لوز
    if(slDistance < 10) {
        orders[index].detailedAnalysis += StringFormat(" | ستوب لوز قريب جداً (%.1f نقاط)", slDistance);
    } else if(slDistance > 100) {
        orders[index].detailedAnalysis += StringFormat(" | ستوب لوز بعيد جداً (%.1f نقاط)", slDistance);
    }
    
    // تحليل إذا تم ضرب الستوب لوز
    if(orders[index].hitStopLoss) {
        if(orders[index].pointsToSL <= 1) {
            orders[index].detailedAnalysis += " | ضرب الستوب لوز بدقة";
        } else {
            orders[index].detailedAnalysis += StringFormat(" | تجاوز الستوب لوز بـ %.1f نقاط", orders[index].pointsToSL);
        }
    }
}

//+------------------------------------------------------------------+
//| تحليل فعالية التيك بروفت                                       |
//+------------------------------------------------------------------+
void AnalyzeTakeProfitEffectiveness(int index)
{
    if(!IsValidPrice(orders[index].tp)) {
        orders[index].detailedAnalysis += " | لا يوجد تيك بروفت (قد يفوت أرباح)";
        return;
    }
    
    double point = GetSymbolPoint(orders[index].symbol);
    double tpDistance = MathAbs(orders[index].tp - orders[index].priceOpen) / point;
    
    // تحليل مسافة التيك بروفت
    if(tpDistance < 10) {
        orders[index].detailedAnalysis += StringFormat(" | تيك بروفت قريب جداً (%.1f نقاط)", tpDistance);
    } else if(tpDistance > 200) {
        orders[index].detailedAnalysis += StringFormat(" | تيك بروفت بعيد جداً (%.1f نقاط)", tpDistance);
    }
    
    // تحليل إذا تم الوصول للهدف
    if(orders[index].hitTakeProfit) {
        orders[index].detailedAnalysis += " | وصل للهدف بنجاح";
    } else if(orders[index].pointsToTP > 0 && orders[index].pointsToTP < 10) {
        orders[index].detailedAnalysis += StringFormat(" | كان قريباً من الهدف (%.1f نقاط فقط)", orders[index].pointsToTP);
    } else if(orders[index].pointsToTP > 50) {
        orders[index].detailedAnalysis += " | كان بعيداً عن الهدف";
    }
}

//+------------------------------------------------------------------+
//| تصنيف نمط الصفقة                                               |
//+------------------------------------------------------------------+
void ClassifyTradePattern(int index)
{
    if(!orders[index].isExecuted) return;
    
    string pattern = "";
    
    // تصنيف بناءً على النتيجة والسلوك
    if(orders[index].netProfit > 0) {
        if(orders[index].hitTakeProfit) {
            pattern = "صفقة مثالية";
        } else if(orders[index].wasCorrectDirection) {
            pattern = "صفقة جيدة - إغلاق مبكر";
        } else {
            pattern = "ربح محظوظ";
        }
    } else {
        if(orders[index].hitStopLoss) {
            pattern = "خسارة محكومة - ستوب لوز";
        } else if(!orders[index].wasCorrectDirection) {
            pattern = "خسارة - اتجاه خاطئ";
        } else if(orders[index].pointsToTP < 10) {
            pattern = "خسارة مؤسفة - قريب من الهدف";
        } else {
            pattern = "خسارة - إغلاق مبكر";
        }
    }
    
    orders[index].detailedAnalysis += " | النمط: " + pattern;
}

//+------------------------------------------------------------------+
//| تحليل الفرصة المفقودة                                          |
//+------------------------------------------------------------------+
void AnalyzeMissedOpportunity(int index)
{
    if(orders[index].isExecuted) return;
    
    // تحليل إذا كانت فرصة جيدة مفقودة
    if(orders[index].priceReachedLevel) {
        // السعر وصل لكن لم ينفذ - فرصة مفقودة
        orders[index].detailedAnalysis += " | فرصة مفقودة - السعر وصل للمستوى";
        
        // تقدير الربح المحتمل المفقود
        EstimateMissedProfit(index);
    } else {
        // السعر لم يصل - تحليل إذا كان قريب
        if(orders[index].minDistanceFromTarget < 20) {
            orders[index].detailedAnalysis += " | فرصة محتملة - السعر اقترب";
        } else {
            orders[index].detailedAnalysis += " | أمر غير واقعي - السعر لم يقترب";
        }
    }
}

//+------------------------------------------------------------------+
//| تقدير الربح المفقود                                            |
//+------------------------------------------------------------------+
void EstimateMissedProfit(int index)
{
    if(!IsValidPrice(orders[index].tp)) return;
    
    double point = GetSymbolPoint(orders[index].symbol);
    double potentialPips = MathAbs(orders[index].tp - orders[index].priceOpen) / point;
    double potentialProfit = potentialPips * orders[index].volume * 10; // تقدير تقريبي
    
    orders[index].detailedAnalysis += StringFormat(" | ربح محتمل مفقود: %.0f نقاط (~%.2f$)", 
                                                   potentialPips, potentialProfit);
}

//+------------------------------------------------------------------+
//| تصنيف نمط الفشل                                                |
//+------------------------------------------------------------------+
void ClassifyFailurePattern(int index)
{
    if(orders[index].isExecuted) return;
    
    string failureType = "";
    
    if(orders[index].state == ORDER_STATE_REJECTED) {
        failureType = "رفض الوسيط";
    } else if(orders[index].state == ORDER_STATE_CANCELED) {
        failureType = "إلغاء يدوي";
    } else if(orders[index].state == ORDER_STATE_EXPIRED) {
        if(orders[index].priceReachedLevel) {
            failureType = "فشل تقني - وصل السعر";
        } else if(orders[index].minDistanceFromTarget < 10) {
            failureType = "فشل بسيط - كان قريب";
        } else {
            failureType = "فشل طبيعي - لم يصل السعر";
        }
    } else {
        failureType = "فشل غير محدد";
    }
    
    orders[index].detailedAnalysis += " | نوع الفشل: " + failureType;
}

//+------------------------------------------------------------------+
//| حساب الإحصائيات الشاملة                                        |
//+------------------------------------------------------------------+
void CalculateGlobalStatistics()
{
    Print("📊 جاري حساب الإحصائيات الشاملة...");
    
    // حساب المعدلات والنسب للأوامر المنفذة فقط
    CalculateExecutedOrderRatios();
    
    // حساب إحصائيات المخاطر
    CalculateRiskStatistics();
    
    // تحليل أنماط الوقت
    AnalyzeTimePatterns();
    
    // تحليل أنماط الفشل
    AnalyzeFailurePatterns();
    
    // حساب مؤشرات الأداء المتقدمة
    CalculateAdvancedPerformanceMetrics();
    
    Print("✅ تم حساب الإحصائيات الشاملة");
}

//+------------------------------------------------------------------+
//| حساب المعدلات والنسب للأوامر المنفذة                          |
//+------------------------------------------------------------------+
void CalculateExecutedOrderRatios()
{
    if(stats.executedOrders <= 0) return;
    
    // معدل النجاح للأوامر المنفذة فقط
    stats.winRate = CalculatePercentage(stats.executedWins, stats.executedOrders);
    
    // متوسطات الأرباح والخسائر
    stats.avgWin = CalculateAverage(stats.grossProfit, stats.executedWins);
    stats.avgLoss = CalculateAverage(stats.grossLoss, stats.executedLosses);
    
    // معامل الربح
    stats.profitFactor = CalculateRatio(stats.grossProfit, stats.grossLoss);
    
    // متوسط حجم الصفقة
    stats.avgVolume = CalculateAverage(stats.totalVolume, stats.executedOrders);
    
    // نسب أخرى
    if(stats.executedLosses > 0) {
        stats.avgDrawdownPct = stats.maxDrawdownPct / stats.executedLosses;
    }
    
    if(stats.executedWins > 0) {
        stats.avgRiskReward = CalculateAverage(stats.grossProfit / stats.executedWins, 
                                              stats.grossLoss / MathMax(stats.executedLosses, 1));
    }
}

//+------------------------------------------------------------------+
//| حساب إحصائيات المخاطر                                          |
//+------------------------------------------------------------------+
void CalculateRiskStatistics()
{
    double totalRiskReward = 0;
    int validRRCount = 0;
    
    for(int i = 0; i < stats.totalOrders; i++) {
        if(orders[i].isExecuted && orders[i].riskRewardRatio > 0) {
            totalRiskReward += orders[i].riskRewardRatio;
            validRRCount++;
        }
    }
    
    if(validRRCount > 0) {
        stats.avgRiskReward = totalRiskReward / validRRCount;
    }
    
    // حساب معامل شارب تقريبي
    if(stats.executedOrders > 1 && stats.avgLoss > 0) {
        double avgReturn = stats.totalProfit / stats.executedOrders;
        double returnStdDev = CalculateReturnStandardDeviation();
        if(returnStdDev > 0) {
            stats.sharpeRatio = avgReturn / returnStdDev;
        }
    }
    
    // معامل الاسترداد
    if(stats.maxDrawdownPct > 0) {
        stats.recoveryFactor = stats.totalProfit / stats.maxDrawdownPct;
    }
}

//+------------------------------------------------------------------+
//| حساب الانحراف المعياري للعوائد                                 |
//+------------------------------------------------------------------+
double CalculateReturnStandardDeviation()
{
    if(stats.executedOrders <= 1) return 0;
    
    double avgReturn = stats.totalProfit / stats.executedOrders;
    double sumSquaredDiffs = 0;
    
    for(int i = 0; i < stats.totalOrders; i++) {
        if(orders[i].isExecuted) {
            double diff = orders[i].netProfit - avgReturn;
            sumSquaredDiffs += diff * diff;
        }
    }
    
    return MathSqrt(sumSquaredDiffs / (stats.executedOrders - 1));
}

//+------------------------------------------------------------------+
//| تحليل أنماط الوقت                                              |
//+------------------------------------------------------------------+
void AnalyzeTimePatterns()
{
    int hourlyStats[24][3]; // [hour][total, executed, profitable]
    int dailyStats[7][3];   // [day][total, executed, profitable]
    
    // تهيئة المصفوفات
    ArrayInitialize(hourlyStats, 0);
    ArrayInitialize(dailyStats, 0);
    
    // جمع الإحصائيات
    for(int i = 0; i < stats.totalOrders; i++) {
        int hour = orders[i].hourOfDay;
        MqlDateTime dt;
        TimeToStruct(orders[i].timeSetup, dt);
        int day = dt.day_of_week;
        
        // إحصائيات الساعات
        if(hour >= 0 && hour < 24) {
            hourlyStats[hour][0]++; // إجمالي
            if(orders[i].isExecuted) {
                hourlyStats[hour][1]++; // منفذة
                if(orders[i].netProfit > 0) {
                    hourlyStats[hour][2]++; // رابحة
                }
            }
        }
        
        // إحصائيات الأيام
        if(day >= 0 && day < 7) {
            dailyStats[day][0]++; // إجمالي
            if(orders[i].isExecuted) {
                dailyStats[day][1]++; // منفذة
                if(orders[i].netProfit > 0) {
                    dailyStats[day][2]++; // رابحة
                }
            }
        }
    }
    
    // تحديد أفضل وأسوأ أوقات
    FindBestAndWorstTimes(hourlyStats, dailyStats);
}

//+------------------------------------------------------------------+
//| تحديد أفضل وأسوأ أوقات للتداول                                |
//+------------------------------------------------------------------+
void FindBestAndWorstTimes(int hourlyStats[][3], int dailyStats[][3])
{
    double bestHourRate = 0;
    double worstHourRate = 100;
    
    // تحليل الساعات
    for(int h = 0; h < 24; h++) {
        if(hourlyStats[h][1] >= 3) { // على الأقل 3 صفقات منفذة
            double execRate = CalculatePercentage(hourlyStats[h][1], hourlyStats[h][0]);
            if(execRate > bestHourRate) {
                bestHourRate = execRate;
                stats.bestHourExecution = h;
                stats.bestHourExecutionRate = execRate;
            }
            if(execRate < worstHourRate) {
                worstHourRate = execRate;
                stats.worstHourExecution = h;
                stats.worstHourExecutionRate = execRate;
            }
        }
    }
    
    // تحليل الأيام
    double bestDayRate = 0;
    double worstDayRate = 100;
    
    for(int d = 0; d < 7; d++) {
        if(dailyStats[d][1] >= 3) { // على الأقل 3 صفقات منفذة
            double execRate = CalculatePercentage(dailyStats[d][1], dailyStats[d][0]);
            if(execRate > bestDayRate) {
                bestDayRate = execRate;
                stats.bestDayExecution = d;
            }
            if(execRate < worstDayRate) {
                worstDayRate = execRate;
                stats.worstDayExecution = d;
            }
        }
    }
}

//+------------------------------------------------------------------+
//| تحليل أنماط الفشل الشاملة                                      |
//+------------------------------------------------------------------+
void AnalyzeFailurePatterns()
{
    // عد أنماط الفشل من التحليل المسبق
    for(int i = 0; i < stats.totalOrders; i++) {
        if(!orders[i].isExecuted || orders[i].netProfit < 0) {
            // تحديث عدادات أنماط الفشل بناءً على التحليل المسبق
            string analysis = orders[i].failureReason + orders[i].detailedAnalysis;
            
            if(StringFind(analysis, "سبريد عالي", 0) >= 0) {
                stats.highSpreadFailures++;
            }
            if(StringFind(analysis, "اتجاه", 0) >= 0) {
                stats.wrongDirectionFailures++;
            }
            if(StringFind(analysis, "قريباً من الهدف", 0) >= 0) {
                stats.almostTPFailures++;
            }
            if(StringFind(analysis, "انزلاق", 0) >= 0) {
                stats.slippageFailures++;
            }
            if(StringFind(analysis, "سيولة", 0) >= 0) {
                stats.liquidityFailures++;
            }
            if(StringFind(analysis, "ساعات هادئة", 0) >= 0 || StringFind(analysis, "نهاية أسبوع", 0) >= 0) {
                stats.timeoutFailures++;
            }
        }
    }
}

//+------------------------------------------------------------------+
//| حساب مؤشرات الأداء المتقدمة                                    |
//+------------------------------------------------------------------+
void CalculateAdvancedPerformanceMetrics()
{
    // حساب متوسط الانزلاق والسبريد (تم في الأجزاء السابقة)
    
    // حساب نسبة تنفيذ الأوامر
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    
    // تحليل جودة التنفيذ
    double qualityScore = 0;
    if(stats.executedOrders > 0) {
        qualityScore += (stats.winRate / 100.0) * 40; // 40% للربحية
        qualityScore += (executionRate / 100.0) * 30; // 30% لمعدل التنفيذ
        qualityScore += MathMin(stats.profitFactor / 2.0, 1.0) * 30; // 30% لمعامل الربح
    }
    
    // إضافة النتيجة للتحليل
    Print("📊 نقاط الجودة الإجمالية: ", DoubleToString(qualityScore, 1), "/100");
}

//--- نهاية الجزء الخامس ---
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 6/15       |
//| محلل بوت الزجزاج العبقري - الجزء السادس: غير المنفذة الأول    |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - تحليل الأوامر غير المنفذة بالتفصيل

//+------------------------------------------------------------------+
//| إنشاء التقرير المتقدم الشامل                                   |
//+------------------------------------------------------------------+
void GenerateAdvancedReport()
{
    Print("\n");
    Print("==========================================");
    Print("📊 تقرير محلل بوت الزجزاج المتقدم");
    Print("📅 تاريخ التقرير: ", TimeToString(TimeCurrent()));
    Print("⏱️ فترة التحليل: ", AnalysisPeriodDays, " يوم");
    Print("==========================================");
    
    // الإحصائيات العامة
    GenerateOverallStatistics();
    
    // تحليل الأوامر المنفذة (للحسابات النهائية)
    GenerateExecutedOrdersAnalysis();
    
    // تحليل الأوامر غير المنفذة (للمعلومات فقط)
    GenerateNonExecutedOrdersAnalysis();
    
    // تحليل الأنماط والتوصيات
    GeneratePatternAnalysis();
    
    // التحليل التفصيلي للأوامر الفردية
    if(ShowDetailedReport) {
        GenerateDetailedOrderAnalysis();
    }
    
    // التوصيات المتقدمة
    GenerateAdvancedRecommendations();
    
    Print("==========================================");
}

//+------------------------------------------------------------------+
//| إنشاء الإحصائيات العامة                                        |
//+------------------------------------------------------------------+
void GenerateOverallStatistics()
{
    Print("\n📊 الإحصائيات العامة:");
    Print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    Print("🔢 إجمالي الأوامر: ", stats.totalOrders);
    Print("✅ أوامر منفذة: ", stats.executedOrders, " (", DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 1), "%)");
    Print("⏰ أوامر منتهية الصلاحية: ", stats.pendingExpired, " (", DoubleToString(CalculatePercentage(stats.pendingExpired, stats.totalOrders), 1), "%)");
    Print("❌ أوامر ملغاة: ", stats.pendingCancelled, " (", DoubleToString(CalculatePercentage(stats.pendingCancelled, stats.totalOrders), 1), "%)");
    Print("🚫 أوامر مرفوضة: ", stats.pendingRejected, " (", DoubleToString(CalculatePercentage(stats.pendingRejected, stats.totalOrders), 1), "%)");
    Print("⚡ أوامر جزئية: ", stats.partiallyFilled);
    Print("📈 معدل التنفيذ: ", DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 1), "%");
    
    // إحصائيات الوقت
    Print("\n⏰ إحصائيات التوقيت:");
    Print("🌅 أوامر نهاية الأسبوع: ", stats.weekendOrders);
    Print("📰 أوامر وقت الأخبار: ", stats.newsTimeOrders);
    if(stats.avgOrderLifetime > 0) {
        Print("⏱️ متوسط مدة الأوامر غير المنفذة: ", DoubleToString(stats.avgOrderLifetime, 1), " دقيقة");
    }
}

//+------------------------------------------------------------------+
//| تحليل الأوامر المنفذة (للحسابات النهائية)                    |
//+------------------------------------------------------------------+
void GenerateExecutedOrdersAnalysis()
{
    if(stats.executedOrders == 0) {
        Print("\n⚠️ لا توجد أوامر منفذة للتحليل");
        return;
    }
    
    Print("\n💰 تحليل الأوامر المنفذة (الحسابات النهائية):");
    Print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    Print("📊 عدد الأوامر المنفذة: ", stats.executedOrders);
    Print("🟢 صفقات رابحة: ", stats.executedWins, " (", DoubleToString(stats.winRate, 1), "%)");
    Print("🔴 صفقات خاسرة: ", stats.executedLosses, " (", DoubleToString(100 - stats.winRate, 1), "%)");
    Print("⚖️ صفقات متعادلة: ", stats.executedBreakeven);
    Print("💵 صافي الربح: ", DoubleToString(stats.totalProfit, 2), "$");
    Print("📈 إجمالي الأرباح: ", DoubleToString(stats.grossProfit, 2), "$");
    Print("📉 إجمالي الخسائر: ", DoubleToString(stats.grossLoss, 2), "$");
    Print("🔢 متوسط الربح: ", DoubleToString(stats.avgWin, 2), "$");
    Print("🔻 متوسط الخسارة: ", DoubleToString(stats.avgLoss, 2), "$");
    Print("⚖️ معامل الربح: ", DoubleToString(stats.profitFactor, 2));
    Print("📏 متوسط حجم الصفقة: ", DoubleToString(stats.avgVolume, 2), " لوت");
    Print("🔺 أكبر ربح: ", DoubleToString(stats.maxWin, 2), "$");
    Print("🔻 أكبر خسارة: ", DoubleToString(stats.maxLoss, 2), "$");
    
    // مؤشرات المخاطر
    if(stats.maxDrawdownPct > 0) {
        Print("📉 أقصى سحب: ", DoubleToString(stats.maxDrawdownPct, 2), "%");
    }
    if(stats.sharpeRatio != 0) {
        Print("📊 نسبة شارب: ", DoubleToString(stats.sharpeRatio, 2));
    }
    if(stats.avgRiskReward > 0) {
        Print("⚖️ متوسط نسبة المخاطر/العائد: ", DoubleToString(stats.avgRiskReward, 2));
    }
}

//+------------------------------------------------------------------+
//| تحليل الأوامر غير المنفذة (للمعلومات فقط)                   |
//+------------------------------------------------------------------+
void GenerateNonExecutedOrdersAnalysis()
{
    int nonExecuted = stats.totalOrders - stats.executedOrders;
    if(nonExecuted == 0) {
        Print("\n✅ جميع الأوامر تم تنفيذها - لا توجد أوامر معلقة فاشلة");
        return;
    }
    
    Print("\n📋 تحليل الأوامر غير المنفذة (للمعلومات فقط):");
    Print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    Print("📊 إجمالي الأوامر غير المنفذة: ", nonExecuted);
    
    // تصنيف أسباب عدم التنفيذ
    Print("\n🔍 تصنيف أسباب عدم التنفيذ:");
    Print("   🎯 السعر لم يصل للمستوى: ", stats.priceDidntReach, " أوامر");
    Print("   ⚠️ السعر وصل لكن لم ينفذ: ", stats.priceReachedButNotExecuted, " أوامر");
    Print("   ✋ ملغاة يدوياً: ", stats.cancelledManually, " أوامر");
    Print("   ⏰ منتهية الصلاحية: ", stats.expiredOrders, " أوامر");
    Print("   🚫 مرفوضة من الوسيط: ", stats.rejectedOrders, " أوامر");
    
    if(stats.avgDistanceFromTarget > 0) {
        Print("📏 متوسط المسافة من الهدف: ", DoubleToString(stats.avgDistanceFromTarget, 1), " نقطة");
    }
    
    // تحليل الأوامر التي وصل لها السعر لكن لم تنفذ
    if(stats.priceReachedButNotExecuted > 0) {
        double percentageReached = CalculatePercentage(stats.priceReachedButNotExecuted, nonExecuted);
        Print("🚨 ", stats.priceReachedButNotExecuted, " أوامر وصل لها السعر لكن لم تنفذ (", DoubleToString(percentageReached, 1), "% من غير المنفذة)");
        Print("💡 هذا يشير إلى مشاكل محتملة في: السيولة، سرعة التنفيذ، أو إعدادات الوسيط");
    }
}

//+------------------------------------------------------------------+
//| تحليل الأنماط والاتجاهات                                       |
//+------------------------------------------------------------------+
void GeneratePatternAnalysis()
{
    Print("\n🔍 تحليل الأنماط والاتجاهات:");
    Print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    
    // تحليل أنماط الفشل
    AnalyzeFailurePatternsReport();
    
    // تحليل أفضل الأوقات
    AnalyzeBestTimingReport();
    
    // تحليل السبريد والانزلاق
    AnalyzeSpreadSlippageReport();
    
    // تحليل أحجام الصفقات
    AnalyzeVolumePatternsReport();
}

//+------------------------------------------------------------------+
//| تقرير أنماط الفشل                                              |
//+------------------------------------------------------------------+
void AnalyzeFailurePatternsReport()
{
    Print("\n⚠️ أنماط الفشل المكتشفة:");
    
    if(stats.highSpreadFailures > 0) {
        double percentage = CalculatePercentage(stats.highSpreadFailures, stats.totalOrders);
        Print("   📊 ", stats.highSpreadFailures, " صفقات تأثرت بالسبريد العالي (", DoubleToString(percentage, 1), "%)");
        if(percentage > 20) {
            Print("   💡 توصية: تجنب التداول أثناء الأخبار وساعات السيولة المنخفضة");
        }
    }
    
    if(stats.wrongDirectionFailures > 0) {
        double percentage = CalculatePercentage(stats.wrongDirectionFailures, stats.executedOrders);
        Print("   🎯 ", stats.wrongDirectionFailures, " صفقات في الاتجاه الخاطئ (", DoubleToString(percentage, 1), "% من المنفذة)");
        if(percentage > 40) {
            Print("   💡 توصية: مراجعة خوارزمية تحديد الاتجاه وإشارات الدخول");
        }
    }
    
    if(stats.almostTPFailures > 0) {
        double percentage = CalculatePercentage(stats.almostTPFailures, stats.executedLosses);
        Print("   🎯 ", stats.almostTPFailures, " صفقات كانت قريبة من الهدف (", DoubleToString(percentage, 1), "% من الخاسرة)");
        if(percentage > 30) {
            Print("   💡 توصية: تقليل مستوى التيك بروفت أو تحسين نقاط الخروج");
        }
    }
    
    if(stats.slippageFailures > 0) {
        double percentage = CalculatePercentage(stats.slippageFailures, stats.executedOrders);
        Print("   📉 ", stats.slippageFailures, " صفقات تأثرت بالانزلاق العالي (", DoubleToString(percentage, 1), "%)");
        if(percentage > 15) {
            Print("   💡 توصية: استخدام أوامر محدودة بدلاً من أوامر السوق");
        }
    }
    
    if(stats.liquidityFailures > 0) {
        double percentage = CalculatePercentage(stats.liquidityFailures, stats.totalOrders);
        Print("   💧 ", stats.liquidityFailures, " أوامر تأثرت بنقص السيولة (", DoubleToString(percentage, 1), "%)");
        if(percentage > 25) {
            Print("   💡 توصية: تحسين توقيت وضع الأوامر وتجنب ساعات السيولة المنخفضة");
        }
    }
    
    if(stats.timeoutFailures > 0) {
        double percentage = CalculatePercentage(stats.timeoutFailures, stats.totalOrders);
        Print("   ⏰ ", stats.timeoutFailures, " أوامر فشلت بسبب التوقيت (", DoubleToString(percentage, 1), "%)");
        if(percentage > 20) {
            Print("   💡 توصية: تحسين خوارزمية اختيار الأوقات المناسبة للتداول");
        }
    }
}

//+------------------------------------------------------------------+
//| تقرير أفضل الأوقات                                             |
//+------------------------------------------------------------------+
void AnalyzeBestTimingReport()
{
    Print("\n⏰ تحليل أوقات التداول:");
    
    if(stats.bestHourExecution >= 0) {
        Print("🌟 أفضل ساعة للتنفيذ: ", stats.bestHourExecution, ":00 - معدل تنفيذ ", DoubleToString(stats.bestHourExecutionRate, 1), "%");
    }
    
    if(stats.worstHourExecution >= 0) {
        Print("⛔ أسوأ ساعة للتنفيذ: ", stats.worstHourExecution, ":00 - معدل تنفيذ ", DoubleToString(stats.worstHourExecutionRate, 1), "%");
    }
    
    if(stats.bestDayExecution >= 0) {
        string dayName = GetDayOfWeekString(stats.bestDayExecution);
        Print("📅 أفضل يوم للتنفيذ: ", dayName);
    }
    
    if(stats.worstDayExecution >= 0) {
        string dayName = GetDayOfWeekString(stats.worstDayExecution);
        Print("📅 أسوأ يوم للتنفيذ: ", dayName);
    }
    
    // تحليل نسبة أوامر نهاية الأسبوع
    if(stats.weekendOrders > 0) {
        double weekendPercentage = CalculatePercentage(stats.weekendOrders, stats.totalOrders);
        Print("🌅 أوامر نهاية الأسبوع: ", stats.weekendOrders, " (", DoubleToString(weekendPercentage, 1), "%)");
        if(weekendPercentage > 15) {
            Print("   💡 توصية: تقليل التداول في نهاية الأسبوع لتحسين معدل التنفيذ");
        }
    }
    
    // تحليل أوامر وقت الأخبار
    if(stats.newsTimeOrders > 0) {
        double newsPercentage = CalculatePercentage(stats.newsTimeOrders, stats.totalOrders);
        Print("📰 أوامر وقت الأخبار: ", stats.newsTimeOrders, " (", DoubleToString(newsPercentage, 1), "%)");
        if(newsPercentage > 10) {
            Print("   💡 توصية: تجنب وضع الأوامر قرب أوقات الأخبار المهمة");
        }
    }
}

//+------------------------------------------------------------------+
//| تقرير السبريد والانزلاق                                        |
//+------------------------------------------------------------------+
void AnalyzeSpreadSlippageReport()
{
    Print("\n📊 تحليل السبريد والانزلاق:");
    
    if(stats.avgSpread > 0) {
        Print("📈 متوسط السبريد: ", DoubleToString(stats.avgSpread * 10000, 1), " نقطة");
        Print("📈 أعلى سبريد: ", DoubleToString(stats.maxSpread * 10000, 1), " نقطة");
        
        if(stats.maxSpread > NORMAL_SPREAD_THRESHOLD) {
            Print("   ⚠️ تم رصد سبريد عالي - قد يؤثر على الأداء");
        }
    }
    
    if(stats.avgSlippage > 0) {
        Print("📉 متوسط الانزلاق: ", DoubleToString(stats.avgSlippage, 1), " نقطة");
        Print("📉 أعلى انزلاق: ", DoubleToString(stats.maxSlippage, 1), " نقطة");
        
        if(stats.maxSlippage > HIGH_SLIPPAGE_THRESHOLD) {
            Print("   ⚠️ تم رصد انزلاق عالي - يؤثر على الربحية");
        }
    }
    
    // تحليل الفجوات
    if(stats.gappedOrders > 0) {
        double gapPercentage = CalculatePercentage(stats.gappedOrders, stats.totalOrders);
        Print("🕳️ أوامر مع فجوات: ", stats.gappedOrders, " (", DoubleToString(gapPercentage, 1), "%)");
        Print("📏 متوسط حجم الفجوة: ", DoubleToString(stats.avgGapSize, 1), " نقطة");
        
        if(gapPercentage > 10) {
            Print("   💡 توصية: مراقبة الفجوات وتعديل استراتيجية الدخول وفقاً لها");
        }
    }
}

//+------------------------------------------------------------------+
//| تقرير أنماط أحجام الصفقات                                     |
//+------------------------------------------------------------------+
void AnalyzeVolumePatternsReport()
{
    Print("\n💰 تحليل أحجام الصفقات:");
    
    if(stats.avgVolume > 0) {
        Print("📊 متوسط حجم الصفقة: ", DoubleToString(stats.avgVolume, 2), " لوت");
        
        // تحليل توزيع الأحجام
        int smallVolumeCount = 0;
        int mediumVolumeCount = 0;
        int largeVolumeCount = 0;
        
        for(int i = 0; i < stats.totalOrders; i++) {
            if(orders[i].volume <= 0.1) {
                smallVolumeCount++;
            } else if(orders[i].volume <= 1.0) {
                mediumVolumeCount++;
            } else {
                largeVolumeCount++;
            }
        }
        
        Print("   🔹 أحجام صغيرة (≤0.1): ", smallVolumeCount, " أوامر");
        Print("   🔸 أحجام متوسطة (0.1-1.0): ", mediumVolumeCount, " أوامر");
        Print("   🔶 أحجام كبيرة (>1.0): ", largeVolumeCount, " أوامر");
        
        // تحليل العلاقة بين الحجم والنجاح
        AnalyzeVolumeSuccessRelation(smallVolumeCount, mediumVolumeCount, largeVolumeCount);
    }
}

//+------------------------------------------------------------------+
//| تحليل العلاقة بين حجم الصفقة ومعدل النجاح                     |
//+------------------------------------------------------------------+
void AnalyzeVolumeSuccessRelation(int smallCount, int mediumCount, int largeCount)
{
    if(stats.executedOrders == 0) return;
    
    int smallSuccess = 0, mediumSuccess = 0, largeSuccess = 0;
    int smallExecuted = 0, mediumExecuted = 0, largeExecuted = 0;
    
    for(int i = 0; i < stats.totalOrders; i++) {
        if(!orders[i].isExecuted) continue;
        
        if(orders[i].volume <= 0.1) {
            smallExecuted++;
            if(orders[i].netProfit > 0) smallSuccess++;
        } else if(orders[i].volume <= 1.0) {
            mediumExecuted++;
            if(orders[i].netProfit > 0) mediumSuccess++;
        } else {
            largeExecuted++;
            if(orders[i].netProfit > 0) largeSuccess++;
        }
    }
    
    Print("\n📈 معدلات النجاح حسب الحجم:");
    if(smallExecuted > 0) {
        double smallRate = CalculatePercentage(smallSuccess, smallExecuted);
        Print("   🔹 أحجام صغيرة: ", DoubleToString(smallRate, 1), "% نجاح");
    }
    if(mediumExecuted > 0) {
        double mediumRate = CalculatePercentage(mediumSuccess, mediumExecuted);
        Print("   🔸 أحجام متوسطة: ", DoubleToString(mediumRate, 1), "% نجاح");
    }
    if(largeExecuted > 0) {
        double largeRate = CalculatePercentage(largeSuccess, largeExecuted);
        Print("   🔶 أحجام كبيرة: ", DoubleToString(largeRate, 1), "% نجاح");
    }
}

//+------------------------------------------------------------------+
//| التحليل التفصيلي للأوامر الفردية                               |
//+------------------------------------------------------------------+
void GenerateDetailedOrderAnalysis()
{
    if(stats.totalOrders == 0) return;
    
    Print("\n🔍 التحليل التفصيلي للأوامر الفردية:");
    Print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    
    // تحديد عدد الأوامر للعرض (حد أقصى 20 لتجنب الإطالة)
    int maxOrdersToShow = MathMin(stats.totalOrders, 20);
    
    for(int i = 0; i < maxOrdersToShow; i++) {
        PrintDetailedOrderInfo(i);
    }
    
    if(stats.totalOrders > maxOrdersToShow) {
        Print("... وتم تحليل ", (stats.totalOrders - maxOrdersToShow), " أمر إضافي (غير معروض لتوفير المساحة)");
    }
}

//+------------------------------------------------------------------+
//| طباعة معلومات مفصلة لأمر محدد                                  |
//+------------------------------------------------------------------+
void PrintDetailedOrderInfo(int index)
{
    string orderType = GetOrderTypeString(orders[index].type);
    string executionIcon = orders[index].isExecuted ? "✅" : "❌";
    
    Print("\n", executionIcon, " أمر #", orders[index].ticket, " - ", orders[index].symbol, " ", orderType);
    Print("⏰ الوقت: ", TimeToString(orders[index].timeSetup, TIME_DATE|TIME_MINUTES));
    Print("💰 الحجم: ", DoubleToString(orders[index].volume, 2), " لوت");
    Print("💲 السعر: ", DoubleToString(orders[index].priceOpen, 5));
    
    if(orders[index].isExecuted) {
        PrintExecutedOrderDetails(index);
    } else {
        PrintNonExecutedOrderDetails(index);
    }
    
    Print("🔍 التحليل: ", orders[index].failureReason);
    if(orders[index].detailedAnalysis != "") {
        Print("📋 تفاصيل: ", orders[index].detailedAnalysis);
    }
    Print("────────────────────────────────────────");
}

//+------------------------------------------------------------------+
//| طباعة تفاصيل الأمر المنفذ                                      |
//+------------------------------------------------------------------+
void PrintExecutedOrderDetails(int index)
{
    Print("💲 السعر الفعلي: ", DoubleToString(orders[index].priceActual, 5));
    Print("💵 النتيجة: ", DoubleToString(orders[index].netProfit, 2), "$");
    
    if(orders[index].slippage > 0) {
        double slippagePips = orders[index].slippage / GetSymbolPoint(orders[index].symbol);
        Print("📊 الانزلاق: ", DoubleToString(slippagePips, 1), " نقطة");
    }
    
    if(orders[index].holdingTimeMinutes > 0) {
        Print("⏱️ مدة الاحتفاظ: ", orders[index].holdingTimeMinutes, " دقيقة");
    }
    
    if(orders[index].pointsToTP > 0) {
        Print("🎯 المسافة من الهدف: ", DoubleToString(orders[index].pointsToTP, 1), " نقطة");
    }
    
    if(orders[index].maxRunup > 0) {
        Print("📈 أقصى ربح محتمل: ", DoubleToString(orders[index].maxRunup, 1), " نقطة");
    }
    
    if(orders[index].maxDrawdown > 0) {
        Print("📉 أقصى سحب: ", DoubleToString(orders[index].maxDrawdown, 1), " نقطة");
    }
}

//+------------------------------------------------------------------+
//| طباعة تفاصيل الأمر غير المنفذ                                  |
//+------------------------------------------------------------------+
void PrintNonExecutedOrderDetails(int index)
{
    Print("📋 الحالة: ", orders[index].executionStatus);
    Print("⏱️ مدة البقاء: ", orders[index].orderLifetimeMinutes, " دقيقة");
    
    if(orders[index].minDistanceFromTarget > 0) {
        Print("📏 أقرب مسافة للهدف: ", DoubleToString(orders[index].minDistanceFromTarget, 1), " نقطة");
    }
    
    Print("🎯 هل وصل السعر؟ ", orders[index].priceReachedLevel ? "نعم" : "لا");
    
    if(orders[index].priceReachedLevel && orders[index].bestPriceReached > 0) {
        Print("💲 أفضل سعر وصل: ", DoubleToString(orders[index].bestPriceReached, 5));
    }
    
    Print("🌊 حالة السوق: ", orders[index].marketConditionAtSetup);
    Print("⏰ تحليل التوقيت: ", orders[index].timeAnalysis);
}

//--- نهاية الجزء السادس ---
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 7/15       |
//| محلل بوت الزجزاج العبقري - الجزء السابع: غير المنفذة الثاني   |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - التوصيات المتقدمة والتحليل النهائي

//+------------------------------------------------------------------+
//| إنشاء التوصيات المتقدمة                                        |
//+------------------------------------------------------------------+
void GenerateAdvancedRecommendations()
{
    Print("\n💡 التوصيات والتحسينات المقترحة:");
    Print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    
    // تحليل معدل التنفيذ العام
    AnalyzeExecutionRateRecommendations();
    
    // توصيات بناءً على أنماط الفشل
    GenerateFailureBasedRecommendations();
    
    // توصيات التوقيت
    GenerateTimingRecommendations();
    
    // توصيات إدارة المخاطر
    GenerateRiskManagementRecommendations();
    
    // توصيات تحسين الأداء
    GeneratePerformanceImprovementRecommendations();
    
    // خطة عمل موصى بها
    GenerateActionPlan();
}

//+------------------------------------------------------------------+
//| تحليل معدل التنفيذ والتوصيات                                   |
//+------------------------------------------------------------------+
void AnalyzeExecutionRateRecommendations()
{
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    
    Print("\n📊 تحليل معدل التنفيذ:");
    Print("📈 معدل التنفيذ الحالي: ", DoubleToString(executionRate, 1), "%");
    
    if(executionRate < 50) {
        Print("🚨 معدل التنفيذ منخفض جداً!");
        Print("   💡 توصيات عاجلة:");
        Print("   • مراجعة شاملة لاستراتيجية وضع الأوامر");
        Print("   • فحص إعدادات الوسيط ومستويات السيولة");
        Print("   • تقليل المسافة بين السعر الحالي والأوامر المعلقة");
        Print("   • زيادة مدة صلاحية الأوامر");
    } else if(executionRate < 70) {
        Print("⚠️ معدل التنفيذ يحتاج تحسين");
        Print("   💡 توصيات للتحسين:");
        Print("   • تحسين توقيت وضع الأوامر");
        Print("   • مراجعة نقاط الدخول");
        Print("   • تجنب ساعات السيولة المنخفضة");
    } else if(executionRate < 85) {
        Print("✅ معدل التنفيذ جيد");
        Print("   💡 توصيات للتطوير:");
        Print("   • تحسينات طفيفة في التوقيت");
        Print("   • مراقبة أنماط عدم التنفيذ");
    } else {
        Print("🌟 معدل التنفيذ ممتاز!");
        Print("   💡 حافظ على الأداء الحالي وراقب أي تغييرات");
    }
}

//+------------------------------------------------------------------+
//| توصيات بناءً على أنماط الفشل                                  |
//+------------------------------------------------------------------+
void GenerateFailureBasedRecommendations()
{
    Print("\n🔧 توصيات مبنية على أنماط الفشل:");
    
    // مشاكل السبريد
    if(stats.highSpreadFailures > stats.totalOrders * 0.2) {
        Print("📊 مشكلة السبريد العالي:");
        Print("   💡 الحلول:");
        Print("   • تجنب التداول قبل وبعد الأخبار المهمة بـ 30 دقيقة");
        Print("   • تجنب ساعات افتتاح وإغلاق الأسواق");
        Print("   • استخدام فلتر سبريد: لا تتداول إذا كان السبريد > ", NORMAL_SPREAD_THRESHOLD, " نقاط");
        Print("   • النظر في تغيير الوسيط إذا كان السبريد مرتفع باستمرار");
    }
    
    // مشاكل الاتجاه
    if(stats.wrongDirectionFailures > stats.executedOrders * 0.4) {
        Print("🎯 مشكلة دقة الاتجاه:");
        Print("   💡 الحلول:");
        Print("   • مراجعة مؤشرات تحديد الاتجاه");
        Print("   • إضافة مؤشرات تأكيدية (RSI, MACD, Moving Averages)");
        Print("   • اختبار الاستراتيجية على فترات زمنية مختلفة");
        Print("   • تحسين نقاط الدخول باستخدام مستويات الدعم والمقاومة");
    }
    
    // مشاكل قرب الهدف
    if(stats.almostTPFailures > stats.executedLosses * 0.3) {
        Print("🎯 مشكلة قرب الأهداف:");
        Print("   💡 الحلول:");
        Print("   • تقليل مستوى التيك بروفت بـ 20-30%");
        Print("   • استخدام خروج جزئي: إغلاق 50% عند 70% من الهدف");
        Print("   • استخدام Trailing Stop لحماية الأرباح");
        Print("   • مراجعة مستويات المقاومة والدعم لتحديد أهداف واقعية");
    }
    
    // مشاكل الانزلاق
    if(stats.slippageFailures > stats.executedOrders * 0.15) {
        Print("📉 مشكلة الانزلاق:");
        Print("   💡 الحلول:");
        Print("   • استخدام أوامر محدودة بدلاً من أوامر السوق");
        Print("   • تجنب التداول في الأسواق سريعة الحركة");
        Print("   • تقليل أحجام الصفقات في أوقات السيولة المنخفضة");
        Print("   • النظر في تغيير الوسيط لأحد بسيولة أفضل");
    }
    
    // مشاكل السيولة
    if(stats.liquidityFailures > stats.totalOrders * 0.25) {
        Print("💧 مشكلة السيولة:");
        Print("   💡 الحلول:");
        Print("   • التركيز على الأزواج الرئيسية (EUR/USD, GBP/USD, USD/JPY)");
        Print("   • تجنب التداول في نهاية الأسبوع");
        Print("   • التداول فقط خلال تداخل الجلسات (13:00-17:00 GMT)");
        Print("   • تقليل أحجام الصفقات");
    }
    
    // مشاكل التوقيت
    if(stats.timeoutFailures > stats.totalOrders * 0.2) {
        Print("⏰ مشكلة التوقيت:");
        Print("   💡 الحلول:");
        Print("   • تحسين خوارزمية اختيار الأوقات");
        Print("   • تجنب الساعات 22:00-06:00 GMT");
        Print("   • زيادة النشاط في ساعات الذروة 08:00-17:00 GMT");
        Print("   • مراقبة التقويم الاقتصادي وتجنب أوقات الأخبار");
    }
}

//+------------------------------------------------------------------+
//| توصيات التوقيت                                                 |
//+------------------------------------------------------------------+
void GenerateTimingRecommendations()
{
    Print("\n⏰ توصيات تحسين التوقيت:");
    
    // تحليل أفضل الأوقات
    if(stats.bestHourExecution >= 0 && stats.bestHourExecutionRate > 0) {
        Print("🌟 أفضل أوقات التداول:");
        Print("   • الساعة ", stats.bestHourExecution, ":00 - معدل نجاح ", DoubleToString(stats.bestHourExecutionRate, 1), "%");
        Print("   💡 زيادة نشاط التداول في هذه الساعة");
        
        // اقتراح نافذة زمنية موسعة
        int startHour = MathMax(0, stats.bestHourExecution - 1);
        int endHour = MathMin(23, stats.bestHourExecution + 1);
        Print("   💡 النافذة الزمنية المقترحة: ", startHour, ":00 - ", endHour, ":00");
    }
    
    if(stats.worstHourExecution >= 0 && stats.worstHourExecutionRate < 50) {
        Print("⛔ أوقات يُنصح بتجنبها:");
        Print("   • الساعة ", stats.worstHourExecution, ":00 - معدل نجاح منخفض ", DoubleToString(stats.worstHourExecutionRate, 1), "%");
        Print("   💡 تجنب التداول في هذه الساعة أو استخدام حذر إضافي");
    }
    
    // توصيات الأيام
    if(stats.bestDayExecution >= 0) {
        string bestDay = GetDayOfWeekString(stats.bestDayExecution);
        Print("📅 أفضل يوم للتداول: ", bestDay);
        Print("   💡 زيادة التركيز في هذا اليوم");
    }
    
    if(stats.worstDayExecution >= 0) {
        string worstDay = GetDayOfWeekString(stats.worstDayExecution);
        Print("📅 يوم يحتاج حذر: ", worstDay);
        Print("   💡 تقليل المخاطر أو تجنب التداول في هذا اليوم");
    }
    
    // توصيات عامة للتوقيت
    Print("\n🕐 توصيات التوقيت العامة:");
    Print("   • أفضل الأوقات: تداخل جلسة لندن ونيويورك (13:00-17:00 GMT)");
    Print("   • تجنب: 30 دقيقة قبل وبعد الأخبار الاقتصادية المهمة");
    Print("   • تجنب: آخر 30 دقيقة من جلسة الجمعة");
    Print("   • تجنب: أول ساعة من افتتاح الأحد");
    Print("   • مراقبة: التقويم الاقتصادي يومياً");
}

//+------------------------------------------------------------------+
//| توصيات إدارة المخاطر                                           |
//+------------------------------------------------------------------+
void GenerateRiskManagementRecommendations()
{
    Print("\n🛡️ توصيات إدارة المخاطر:");
    
    // تحليل أحجام الصفقات
    if(stats.avgVolume > 0) {
        Print("💰 إدارة أحجام الصفقات:");
        Print("   • الحجم الحالي المتوسط: ", DoubleToString(stats.avgVolume, 2), " لوت");
        
        if(stats.maxDrawdownPct > 10) {
            Print("   ⚠️ أقصى سحب مرتفع (", DoubleToString(stats.maxDrawdownPct, 1), "%)");
            Print("   💡 تقليل أحجام الصفقات بنسبة 30-50%");
        } else if(stats.maxDrawdownPct > 5) {
            Print("   ⚠️ سحب متوسط (", DoubleToString(stats.maxDrawdownPct, 1), "%)");
            Print("   💡 تقليل أحجام الصفقات بنسبة 20%");
        }
    }
    
    // تحليل نسبة المخاطر للعوائد
    if(stats.avgRiskReward > 0) {
        Print("⚖️ نسبة المخاطر للعوائد:");
        Print("   • النسبة الحالية: 1:", DoubleToString(stats.avgRiskReward, 1));
        
        if(stats.avgRiskReward < 1.5) {
            Print("   ⚠️ النسبة منخفضة - زيادة الأهداف أو تقليل الستوب لوز");
        } else if(stats.avgRiskReward > 3.0) {
            Print("   ✅ النسبة ممتازة - حافظ عليها");
        }
    }
    
    // توصيات الستوب لوز والتيك بروفت
    Print("🎯 توصيات الستوب لوز والتيك بروفت:");
    Print("   • استخدم ستوب لوز دائماً (لا تتداول بدونه)");
    Print("   • نسبة مقترحة: 1:2 أو 1:3 (مخاطر:عائد)");
    Print("   • استخدم Trailing Stop عند الوصول لـ 50% من الهدف");
    Print("   • ضع الستوب لوز خلف مستويات الدعم/المقاومة المهمة");
    
    // إدارة رأس المال
    Print("💼 إدارة رأس المال:");
    Print("   • لا تخاطر بأكثر من 1-2% من الحساب في صفقة واحدة");
    Print("   • أقصى مخاطرة يومية: 5% من الحساب");
    Print("   • أقصى مخاطرة شهرية: 15% من الحساب");
    Print("   • توقف عن التداول إذا خسرت 10% في يوم واحد");
}

//+------------------------------------------------------------------+
//| توصيات تحسين الأداء                                            |
//+------------------------------------------------------------------+
void GeneratePerformanceImprovementRecommendations()
{
    Print("\n🚀 توصيات تحسين الأداء:");
    
    // تحليل معامل الربح
    if(stats.profitFactor > 0) {
        Print("📊 تحليل معامل الربح:");
        Print("   • المعامل الحالي: ", DoubleToString(stats.profitFactor, 2));
        
        if(stats.profitFactor < 1.0) {
            Print("   🚨 المعامل أقل من 1 - الاستراتيجية تحتاج مراجعة جذرية");
            Print("   💡 إيقاف التداول ومراجعة شاملة للاستراتيجية");
        } else if(stats.profitFactor < 1.3) {
            Print("   ⚠️ المعامل منخفض - تحسينات ضرورية");
            Print("   💡 تحسين نقاط الدخول والخروج");
        } else if(stats.profitFactor > 2.0) {
            Print("   ✅ المعامل ممتاز - حافظ على الأداء");
        }
    }
    
    // تحليل معدل النجاح
    if(stats.winRate > 0) {
        Print("🎯 تحليل معدل النجاح:");
        Print("   • المعدل الحالي: ", DoubleToString(stats.winRate, 1), "%");
        
        if(stats.winRate < 40) {
            Print("   ⚠️ معدل منخفض - تحسين إشارات الدخول");
        } else if(stats.winRate > 70) {
            Print("   ✅ معدل ممتاز - لكن تأكد من أن الأرباح أكبر من الخسائر");
        }
    }
    
    // توصيات تقنية
    Print("⚙️ توصيات تقنية:");
    Print("   • استخدم VPS لضمان استمرارية التداول");
    Print("   • راقب سرعة الإنترنت وزمن الاستجابة");
    Print("   • احتفظ بنسخة احتياطية من إعدادات البوت");
    Print("   • راجع السجلات يومياً للتأكد من عدم وجود أخطاء");
    
    // توصيات المراقبة
    Print("👀 توصيات المراقبة:");
    Print("   • راجع الأداء أسبوعياً");
    Print("   • احتفظ بسجل للتغييرات والتحسينات");
    Print("   • راقب أداء الوسيط وأوقات التنفيذ");
    Print("   • تابع الأخبار الاقتصادية المؤثرة على أزواجك");
}

//+------------------------------------------------------------------+
//| خطة العمل الموصى بها                                          |
//+------------------------------------------------------------------+
void GenerateActionPlan()
{
    Print("\n📋 خطة العمل الموصى بها:");
    Print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    
    Print("🎯 المرحلة الأولى (الأسبوع الأول):");
    Print("   1. تنفيذ توصيات إدارة المخاطر العاجلة");
    Print("   2. ضبط أوقات التداول حسب التحليل");
    Print("   3. تطبيق فلاتر السبريد والسيولة");
    Print("   4. مراجعة وتحديث مستويات الستوب لوز والتيك بروفت");
    
    Print("\n📈 المرحلة الثانية (الأسبوع الثاني):");
    Print("   1. تحسين خوارزمية تحديد الاتجاه");
    Print("   2. تطبيق توصيات تقليل الانزلاق");
    Print("   3. اختبار التحسينات على حساب تجريبي");
    Print("   4. مراقبة التحسينات وقياس النتائج");
    
    Print("\n🔄 المرحلة الثالثة (الأسبوع الثالث):");
    Print("   1. تحليل نتائج التحسينات");
    Print("   2. تطبيق التحسينات الناجحة على الحساب الحقيقي");
    Print("   3. مراقبة الأداء يومياً");
    Print("   4. تسجيل أي ملاحظات أو مشاكل جديدة");
    
    Print("\n✅ المرحلة الرابعة (الأسبوع الرابع):");
    Print("   1. تقييم شامل للأداء الجديد");
    Print("   2. مقارنة النتائج مع الفترة السابقة");
    Print("   3. تحديد التحسينات الإضافية المطلوبة");
    Print("   4. وضع خطة التطوير للشهر التالي");
    
    // مؤشرات الأداء المطلوبة
    Print("\n📊 مؤشرات الأداء المستهدفة:");
    double targetExecutionRate = MathMin(95, CalculatePercentage(stats.executedOrders, stats.totalOrders) + 20);
    double targetWinRate = MathMin(70, stats.winRate + 10);
    double targetProfitFactor = MathMax(1.5, stats.profitFactor + 0.3);
    
    Print("   • معدل التنفيذ المستهدف: ", DoubleToString(targetExecutionRate, 0), "%");
    Print("   • معدل النجاح المستهدف: ", DoubleToString(targetWinRate, 0), "%");
    Print("   • معامل الربح المستهدف: ", DoubleToString(targetProfitFactor, 1));
    Print("   • أقصى سحب مقبول: 5%");
    
    // تحذيرات مهمة
    Print("\n⚠️ تحذيرات مهمة:");
    Print("   • لا تطبق جميع التغييرات مرة واحدة");
    Print("   • اختبر كل تحسين على حدة");
    Print("   • احتفظ بنسخة احتياطية من الإعدادات الحالية");
    Print("   • راقب الأداء باستمرار وكن مستعداً للتراجع");
    
    Print("\n🎯 الهدف النهائي:");
    Print("   تحقيق تداول مستقر ومربح مع مخاطر محكومة");
    Print("   والوصول لمعدل تنفيذ عالي واستقرار في الأرباح");
}

//+------------------------------------------------------------------+
//| حفظ التقرير المتقدم في ملف                                    |
//+------------------------------------------------------------------+
void SaveAdvancedReportToFile()
{
    Print("\n💾 جاري حفظ التقرير المتقدم...");
    
    // إنشاء اسم ملف مفصل
    MqlDateTime dt;
    TimeToStruct(TimeCurrent(), dt);
    
    string fileName = StringFormat("%s_Advanced_%04d%02d%02d_%02d%02d.txt", 
                     ReportFileName, 
                     dt.year, dt.mon, dt.day, 
                     dt.hour, dt.min);
    
    // محاولة فتح الملف بترميز UTF-8
    int fileHandle = FileOpen(fileName, FILE_WRITE|FILE_TXT|FILE_UNICODE);
    
    if(fileHandle == INVALID_HANDLE) {
        Print("❌ فشل في فتح الملف بـ UNICODE، محاولة بـ ANSI...");
        fileHandle = FileOpen(StringFormat("ZigzagReport_%04d%02d%02d_%02d%02d.txt", 
                             dt.year, dt.mon, dt.day, dt.hour, dt.min), 
                             FILE_WRITE|FILE_TXT|FILE_ANSI);
    }
    
    if(fileHandle != INVALID_HANDLE) {
        // كتابة التقرير الكامل
        WriteCompleteReport(fileHandle);
        FileClose(fileHandle);
        
        Print("✅ تم حفظ التقرير المتقدم بنجاح: ", fileName);
        Print("📁 الملف محفوظ في: MQL5\\Files\\", fileName);
    } else {
        Print("❌ فشل في حفظ التقرير - كود الخطأ: ", GetLastError());
        Print("💡 تأكد من صلاحيات الكتابة ووجود مجلد MQL5\\Files");
    }
}

//+------------------------------------------------------------------+
//| كتابة التقرير الكامل في الملف                                 |
//+------------------------------------------------------------------+
void WriteCompleteReport(int fileHandle)
{
    // ترويسة التقرير
    WriteReportHeader(fileHandle);
    
    // الإحصائيات العامة
    WriteGeneralStatisticsToFile(fileHandle);
    
    // تحليل الأوامر المنفذة
    WriteExecutedAnalysisToFile(fileHandle);
    
    // تحليل الأوامر غير المنفذة
    WriteNonExecutedAnalysisToFile(fileHandle);
    
    // التحليل التفصيلي
    WriteDetailedAnalysisToFile(fileHandle);
    
    // التوصيات
    WriteRecommendationsToFile(fileHandle);
    
    // خاتمة التقرير
    WriteReportFooter(fileHandle);
}

//+------------------------------------------------------------------+
//| إرسال التقرير بالإيميل                                         |
//+------------------------------------------------------------------+
void SendReportByEmail()
{
    if(!SendEmailReport) return;
    
    Print("📧 جاري إرسال التقرير بالإيميل...");
    
    string subject = "تقرير محلل الزجزاج المتقدم - " + TimeToString(TimeCurrent(), TIME_DATE);
    string body = CreateEmailBody();
    
    if(SendMail(subject, body)) {
        Print("✅ تم إرسال التقرير بالإيميل بنجاح");
    } else {
        Print("❌ فشل في إرسال التقرير بالإيميل - تأكد من إعدادات الإيميل");
    }
}

//+------------------------------------------------------------------+
//| إنشاء محتوى الإيميل                                            |
//+------------------------------------------------------------------+
string CreateEmailBody()
{
    string body = "تقرير محلل بوت الزجزاج المتقدم\n";
    body += "=====================================\n\n";
    
    body += "📊 ملخص الأداء:\n";
    body += "إجمالي الأوامر: " + IntegerToString(stats.totalOrders) + "\n";
    body += "أوامر منفذة: " + IntegerToString(stats.executedOrders) + "\n";
    body += "معدل التنفيذ: " + DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 1) + "%\n";
    
    if(stats.executedOrders > 0) {
        body += "معدل النجاح: " + DoubleToString(stats.winRate, 1) + "%\n";
        body += "صافي الربح: " + DoubleToString(stats.totalProfit, 2) + "$\n";
        body += "معامل الربح: " + DoubleToString(stats.profitFactor, 2) + "\n";
    }
    
    body += "\nللحصول على التقرير المفصل، راجع ملف التقرير المحفوظ.\n";
    
    return body;
}

//--- نهاية الجزء السابع ---
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 8/15       |
//| محلل بوت الزجزاج العبقري - الجزء الثامن: حساب الإحصائيات     |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - دوال كتابة التقرير في الملف

//+------------------------------------------------------------------+
//| كتابة ترويسة التقرير                                           |
//+------------------------------------------------------------------+
void WriteReportHeader(int fileHandle)
{
    FileWriteString(fileHandle, "==========================================\n");
    FileWriteString(fileHandle, "📊 تقرير محلل بوت الزجزاج المتقدم\n");
    FileWriteString(fileHandle, "📅 تاريخ التقرير: " + TimeToString(TimeCurrent()) + "\n");
    FileWriteString(fileHandle, "⏱️ فترة التحليل: " + IntegerToString(AnalysisPeriodDays) + " يوم\n");
    FileWriteString(fileHandle, "🔍 إصدار المحلل: متقدم - شامل ومفصل\n");
    FileWriteString(fileHandle, "==========================================\n\n");
}

//+------------------------------------------------------------------+
//| كتابة الإحصائيات العامة في الملف                              |
//+------------------------------------------------------------------+
void WriteGeneralStatisticsToFile(int fileHandle)
{
    FileWriteString(fileHandle, "📊 الإحصائيات العامة:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    FileWriteString(fileHandle, "🔢 إجمالي الأوامر: " + IntegerToString(stats.totalOrders) + "\n");
    FileWriteString(fileHandle, "✅ أوامر منفذة: " + IntegerToString(stats.executedOrders) + " (" + 
                   DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 1) + "%)\n");
    FileWriteString(fileHandle, "⏰ أوامر منتهية الصلاحية: " + IntegerToString(stats.pendingExpired) + " (" + 
                   DoubleToString(CalculatePercentage(stats.pendingExpired, stats.totalOrders), 1) + "%)\n");
    FileWriteString(fileHandle, "❌ أوامر ملغاة: " + IntegerToString(stats.pendingCancelled) + " (" + 
                   DoubleToString(CalculatePercentage(stats.pendingCancelled, stats.totalOrders), 1) + "%)\n");
    FileWriteString(fileHandle, "🚫 أوامر مرفوضة: " + IntegerToString(stats.pendingRejected) + " (" + 
                   DoubleToString(CalculatePercentage(stats.pendingRejected, stats.totalOrders), 1) + "%)\n");
    FileWriteString(fileHandle, "⚡ أوامر جزئية: " + IntegerToString(stats.partiallyFilled) + "\n");
    FileWriteString(fileHandle, "📈 معدل التنفيذ الإجمالي: " + 
                   DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 1) + "%\n\n");
    
    // إحصائيات التوقيت
    FileWriteString(fileHandle, "⏰ إحصائيات التوقيت:\n");
    FileWriteString(fileHandle, "🌅 أوامر نهاية الأسبوع: " + IntegerToString(stats.weekendOrders) + "\n");
    FileWriteString(fileHandle, "📰 أوامر وقت الأخبار: " + IntegerToString(stats.newsTimeOrders) + "\n");
    if(stats.avgOrderLifetime > 0) {
        FileWriteString(fileHandle, "⏱️ متوسط مدة الأوامر غير المنفذة: " + 
                       DoubleToString(stats.avgOrderLifetime, 1) + " دقيقة\n");
    }
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| كتابة تحليل الأوامر المنفذة في الملف                          |
//+------------------------------------------------------------------+
void WriteExecutedAnalysisToFile(int fileHandle)
{
    if(stats.executedOrders == 0) {
        FileWriteString(fileHandle, "⚠️ لا توجد أوامر منفذة للتحليل\n\n");
        return;
    }
    
    FileWriteString(fileHandle, "💰 تحليل الأوامر المنفذة (الحسابات النهائية):\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    FileWriteString(fileHandle, "📊 عدد الأوامر المنفذة: " + IntegerToString(stats.executedOrders) + "\n");
    FileWriteString(fileHandle, "🟢 صفقات رابحة: " + IntegerToString(stats.executedWins) + " (" + 
                   DoubleToString(stats.winRate, 1) + "%)\n");
    FileWriteString(fileHandle, "🔴 صفقات خاسرة: " + IntegerToString(stats.executedLosses) + " (" + 
                   DoubleToString(100 - stats.winRate, 1) + "%)\n");
    FileWriteString(fileHandle, "⚖️ صفقات متعادلة: " + IntegerToString(stats.executedBreakeven) + "\n\n");
    
    // الأرباح والخسائر
    FileWriteString(fileHandle, "💵 تحليل الأرباح والخسائر:\n");
    FileWriteString(fileHandle, "💰 صافي الربح: " + DoubleToString(stats.totalProfit, 2) + "$\n");
    FileWriteString(fileHandle, "📈 إجمالي الأرباح: " + DoubleToString(stats.grossProfit, 2) + "$\n");
    FileWriteString(fileHandle, "📉 إجمالي الخسائر: " + DoubleToString(stats.grossLoss, 2) + "$\n");
    FileWriteString(fileHandle, "🔢 متوسط الربح: " + DoubleToString(stats.avgWin, 2) + "$\n");
    FileWriteString(fileHandle, "🔻 متوسط الخسارة: " + DoubleToString(stats.avgLoss, 2) + "$\n");
    FileWriteString(fileHandle, "🔺 أكبر ربح: " + DoubleToString(stats.maxWin, 2) + "$\n");
    FileWriteString(fileHandle, "🔻 أكبر خسارة: " + DoubleToString(stats.maxLoss, 2) + "$\n\n");
    
    // مؤشرات الأداء
    FileWriteString(fileHandle, "📊 مؤشرات الأداء:\n");
    FileWriteString(fileHandle, "⚖️ معامل الربح: " + DoubleToString(stats.profitFactor, 2) + "\n");
    FileWriteString(fileHandle, "📏 متوسط حجم الصفقة: " + DoubleToString(stats.avgVolume, 2) + " لوت\n");
    FileWriteString(fileHandle, "💼 إجمالي الحجم المتداول: " + DoubleToString(stats.totalVolume, 2) + " لوت\n");
    FileWriteString(fileHandle, "💸 إجمالي العمولات: " + DoubleToString(stats.totalCommission, 2) + "$\n");
    FileWriteString(fileHandle, "🔄 إجمالي السوابات: " + DoubleToString(stats.totalSwap, 2) + "$\n");
    
    // مؤشرات المخاطر
    if(stats.maxDrawdownPct > 0) {
        FileWriteString(fileHandle, "📉 أقصى سحب: " + DoubleToString(stats.maxDrawdownPct, 2) + "%\n");
        FileWriteString(fileHandle, "📊 متوسط السحب: " + DoubleToString(stats.avgDrawdownPct, 2) + "%\n");
    }
    if(stats.maxRunupPct > 0) {
        FileWriteString(fileHandle, "📈 أقصى ربح محتمل: " + DoubleToString(stats.maxRunupPct, 1) + " نقطة\n");
    }
    if(stats.sharpeRatio != 0) {
        FileWriteString(fileHandle, "📊 نسبة شارب: " + DoubleToString(stats.sharpeRatio, 2) + "\n");
    }
    if(stats.avgRiskReward > 0) {
        FileWriteString(fileHandle, "⚖️ متوسط نسبة المخاطر/العائد: " + DoubleToString(stats.avgRiskReward, 2) + "\n");
    }
    if(stats.recoveryFactor != 0) {
        FileWriteString(fileHandle, "🔄 معامل الاسترداد: " + DoubleToString(stats.recoveryFactor, 2) + "\n");
    }
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| كتابة تحليل الأوامر غير المنفذة في الملف                      |
//+------------------------------------------------------------------+
void WriteNonExecutedAnalysisToFile(int fileHandle)
{
    int nonExecuted = stats.totalOrders - stats.executedOrders;
    if(nonExecuted == 0) {
        FileWriteString(fileHandle, "✅ جميع الأوامر تم تنفيذها - لا توجد أوامر معلقة فاشلة\n\n");
        return;
    }
    
    FileWriteString(fileHandle, "📋 تحليل الأوامر غير المنفذة (للمعلومات فقط):\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    FileWriteString(fileHandle, "📊 إجمالي الأوامر غير المنفذة: " + IntegerToString(nonExecuted) + "\n\n");
    
    // تصنيف أسباب عدم التنفيذ
    FileWriteString(fileHandle, "🔍 تصنيف أسباب عدم التنفيذ:\n");
    FileWriteString(fileHandle, "   🎯 السعر لم يصل للمستوى: " + IntegerToString(stats.priceDidntReach) + " أوامر\n");
    FileWriteString(fileHandle, "   ⚠️ السعر وصل لكن لم ينفذ: " + IntegerToString(stats.priceReachedButNotExecuted) + " أوامر\n");
    FileWriteString(fileHandle, "   ✋ ملغاة يدوياً: " + IntegerToString(stats.cancelledManually) + " أوامر\n");
    FileWriteString(fileHandle, "   ⏰ منتهية الصلاحية: " + IntegerToString(stats.expiredOrders) + " أوامر\n");
    FileWriteString(fileHandle, "   🚫 مرفوضة من الوسيط: " + IntegerToString(stats.rejectedOrders) + " أوامر\n\n");
    
    // إحصائيات المسافة والوقت
    if(stats.avgDistanceFromTarget > 0) {
        FileWriteString(fileHandle, "📏 متوسط المسافة من الهدف: " + DoubleToString(stats.avgDistanceFromTarget, 1) + " نقطة\n");
    }
    
    // تحليل الأوامر التي وصل لها السعر
    if(stats.priceReachedButNotExecuted > 0) {
        double percentageReached = CalculatePercentage(stats.priceReachedButNotExecuted, nonExecuted);
        FileWriteString(fileHandle, "🚨 تحليل مهم: " + IntegerToString(stats.priceReachedButNotExecuted) + 
                       " أوامر وصل لها السعر لكن لم تنفذ (" + DoubleToString(percentageReached, 1) + "% من غير المنفذة)\n");
        FileWriteString(fileHandle, "💡 هذا يشير إلى مشاكل محتملة في: السيولة، سرعة التنفيذ، أو إعدادات الوسيط\n");
    }
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| كتابة التحليل التفصيلي في الملف                               |
//+------------------------------------------------------------------+
void WriteDetailedAnalysisToFile(int fileHandle)
{
    FileWriteString(fileHandle, "🔍 التحليل التفصيلي والأنماط:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    
    // تحليل أنماط الفشل
    WriteFailurePatternsToFile(fileHandle);
    
    // تحليل أوقات التداول
    WriteTimingAnalysisToFile(fileHandle);
    
    // تحليل السبريد والانزلاق
    WriteSpreadSlippageAnalysisToFile(fileHandle);
    
    // تحليل أحجام الصفقات
    WriteVolumeAnalysisToFile(fileHandle);
    
    // إحصائيات متقدمة
    WriteAdvancedStatisticsToFile(fileHandle);
}

//+------------------------------------------------------------------+
//| كتابة أنماط الفشل في الملف                                    |
//+------------------------------------------------------------------+
void WriteFailurePatternsToFile(int fileHandle)
{
    FileWriteString(fileHandle, "⚠️ أنماط الفشل المكتشفة:\n");
    
    if(stats.highSpreadFailures > 0) {
        double percentage = CalculatePercentage(stats.highSpreadFailures, stats.totalOrders);
        FileWriteString(fileHandle, "   📊 صفقات متأثرة بالسبريد العالي: " + IntegerToString(stats.highSpreadFailures) + 
                       " (" + DoubleToString(percentage, 1) + "%)\n");
    }
    
    if(stats.wrongDirectionFailures > 0) {
        double percentage = CalculatePercentage(stats.wrongDirectionFailures, stats.executedOrders);
        FileWriteString(fileHandle, "   🎯 صفقات في الاتجاه الخاطئ: " + IntegerToString(stats.wrongDirectionFailures) + 
                       " (" + DoubleToString(percentage, 1) + "% من المنفذة)\n");
    }
    
    if(stats.almostTPFailures > 0) {
        double percentage = CalculatePercentage(stats.almostTPFailures, stats.executedLosses);
        FileWriteString(fileHandle, "   🎯 صفقات قريبة من الهدف: " + IntegerToString(stats.almostTPFailures) + 
                       " (" + DoubleToString(percentage, 1) + "% من الخاسرة)\n");
    }
    
    if(stats.slippageFailures > 0) {
        double percentage = CalculatePercentage(stats.slippageFailures, stats.executedOrders);
        FileWriteString(fileHandle, "   📉 صفقات متأثرة بالانزلاق: " + IntegerToString(stats.slippageFailures) + 
                       " (" + DoubleToString(percentage, 1) + "%)\n");
    }
    
    if(stats.liquidityFailures > 0) {
        double percentage = CalculatePercentage(stats.liquidityFailures, stats.totalOrders);
        FileWriteString(fileHandle, "   💧 صفقات متأثرة بنقص السيولة: " + IntegerToString(stats.liquidityFailures) + 
                       " (" + DoubleToString(percentage, 1) + "%)\n");
    }
    
    if(stats.timeoutFailures > 0) {
        double percentage = CalculatePercentage(stats.timeoutFailures, stats.totalOrders);
        FileWriteString(fileHandle, "   ⏰ صفقات فاشلة بسبب التوقيت: " + IntegerToString(stats.timeoutFailures) + 
                       " (" + DoubleToString(percentage, 1) + "%)\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| كتابة تحليل الأوقات في الملف                                   |
//+------------------------------------------------------------------+
void WriteTimingAnalysisToFile(int fileHandle)
{
    FileWriteString(fileHandle, "⏰ تحليل أوقات التداول:\n");
    
    if(stats.bestHourExecution >= 0) {
        FileWriteString(fileHandle, "🌟 أفضل ساعة للتنفيذ: " + IntegerToString(stats.bestHourExecution) + 
                       ":00 - معدل " + DoubleToString(stats.bestHourExecutionRate, 1) + "%\n");
    }
    
    if(stats.worstHourExecution >= 0) {
        FileWriteString(fileHandle, "⛔ أسوأ ساعة للتنفيذ: " + IntegerToString(stats.worstHourExecution) + 
                       ":00 - معدل " + DoubleToString(stats.worstHourExecutionRate, 1) + "%\n");
    }
    
    if(stats.bestDayExecution >= 0) {
        string dayName = GetDayOfWeekString(stats.bestDayExecution);
        FileWriteString(fileHandle, "📅 أفضل يوم للتنفيذ: " + dayName + "\n");
    }
    
    if(stats.worstDayExecution >= 0) {
        string dayName = GetDayOfWeekString(stats.worstDayExecution);
        FileWriteString(fileHandle, "📅 أسوأ يوم للتنفيذ: " + dayName + "\n");
    }
    
    // نسب الأوقات الخاصة
    if(stats.weekendOrders > 0) {
        double weekendPercentage = CalculatePercentage(stats.weekendOrders, stats.totalOrders);
        FileWriteString(fileHandle, "🌅 أوامر نهاية الأسبوع: " + IntegerToString(stats.weekendOrders) + 
                       " (" + DoubleToString(weekendPercentage, 1) + "%)\n");
    }
    
    if(stats.newsTimeOrders > 0) {
        double newsPercentage = CalculatePercentage(stats.newsTimeOrders, stats.totalOrders);
        FileWriteString(fileHandle, "📰 أوامر وقت الأخبار: " + IntegerToString(stats.newsTimeOrders) + 
                       " (" + DoubleToString(newsPercentage, 1) + "%)\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| كتابة تحليل السبريد والانزلاق في الملف                        |
//+------------------------------------------------------------------+
void WriteSpreadSlippageAnalysisToFile(int fileHandle)
{
    FileWriteString(fileHandle, "📊 تحليل السبريد والانزلاق:\n");
    
    if(stats.avgSpread > 0) {
        FileWriteString(fileHandle, "📈 متوسط السبريد: " + DoubleToString(stats.avgSpread * 10000, 1) + " نقطة\n");
        FileWriteString(fileHandle, "📈 أعلى سبريد مسجل: " + DoubleToString(stats.maxSpread * 10000, 1) + " نقطة\n");
    }
    
    if(stats.avgSlippage > 0) {
        FileWriteString(fileHandle, "📉 متوسط الانزلاق: " + DoubleToString(stats.avgSlippage, 1) + " نقطة\n");
        FileWriteString(fileHandle, "📉 أعلى انزلاق مسجل: " + DoubleToString(stats.maxSlippage, 1) + " نقطة\n");
    }
    
    // تحليل الفجوات
    if(stats.gappedOrders > 0) {
        double gapPercentage = CalculatePercentage(stats.gappedOrders, stats.totalOrders);
        FileWriteString(fileHandle, "🕳️ أوامر مع فجوات سعرية: " + IntegerToString(stats.gappedOrders) + 
                       " (" + DoubleToString(gapPercentage, 1) + "%)\n");
        FileWriteString(fileHandle, "📏 متوسط حجم الفجوة: " + DoubleToString(stats.avgGapSize, 1) + " نقطة\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| كتابة تحليل الأحجام في الملف                                   |
//+------------------------------------------------------------------+
void WriteVolumeAnalysisToFile(int fileHandle)
{
    FileWriteString(fileHandle, "💰 تحليل أحجام الصفقات:\n");
    
    if(stats.avgVolume > 0) {
        FileWriteString(fileHandle, "📊 متوسط حجم الصفقة: " + DoubleToString(stats.avgVolume, 2) + " لوت\n");
        FileWriteString(fileHandle, "💼 إجمالي الحجم المتداول: " + DoubleToString(stats.totalVolume, 2) + " لوت\n");
        
        // تحليل توزيع الأحجام
        int smallVolumeCount = 0, mediumVolumeCount = 0, largeVolumeCount = 0;
        int smallSuccess = 0, mediumSuccess = 0, largeSuccess = 0;
        int smallExecuted = 0, mediumExecuted = 0, largeExecuted = 0;
        
        for(int i = 0; i < stats.totalOrders; i++) {
            if(orders[i].volume <= 0.1) {
                smallVolumeCount++;
                if(orders[i].isExecuted) {
                    smallExecuted++;
                    if(orders[i].netProfit > 0) smallSuccess++;
                }
            } else if(orders[i].volume <= 1.0) {
                mediumVolumeCount++;
                if(orders[i].isExecuted) {
                    mediumExecuted++;
                    if(orders[i].netProfit > 0) mediumSuccess++;
                }
            } else {
                largeVolumeCount++;
                if(orders[i].isExecuted) {
                    largeExecuted++;
                    if(orders[i].netProfit > 0) largeSuccess++;
                }
            }
        }
        
        FileWriteString(fileHandle, "   🔹 أحجام صغيرة (≤0.1): " + IntegerToString(smallVolumeCount) + " أوامر");
        if(smallExecuted > 0) {
            double smallRate = CalculatePercentage(smallSuccess, smallExecuted);
            FileWriteString(fileHandle, " - نجاح " + DoubleToString(smallRate, 1) + "%");
        }
        FileWriteString(fileHandle, "\n");
        
        FileWriteString(fileHandle, "   🔸 أحجام متوسطة (0.1-1.0): " + IntegerToString(mediumVolumeCount) + " أوامر");
        if(mediumExecuted > 0) {
            double mediumRate = CalculatePercentage(mediumSuccess, mediumExecuted);
            FileWriteString(fileHandle, " - نجاح " + DoubleToString(mediumRate, 1) + "%");
        }
        FileWriteString(fileHandle, "\n");
        
        FileWriteString(fileHandle, "   🔶 أحجام كبيرة (>1.0): " + IntegerToString(largeVolumeCount) + " أوامر");
        if(largeExecuted > 0) {
            double largeRate = CalculatePercentage(largeSuccess, largeExecuted);
            FileWriteString(fileHandle, " - نجاح " + DoubleToString(largeRate, 1) + "%");
        }
        FileWriteString(fileHandle, "\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| كتابة الإحصائيات المتقدمة في الملف                            |
//+------------------------------------------------------------------+
void WriteAdvancedStatisticsToFile(int fileHandle)
{
    FileWriteString(fileHandle, "📈 إحصائيات متقدمة:\n");
    
    // حساب إحصائيات إضافية
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    FileWriteString(fileHandle, "📊 معدل التنفيذ: " + DoubleToString(executionRate, 1) + "%\n");
    
    if(stats.executedOrders > 0) {
        double breakEvenRate = CalculatePercentage(stats.executedBreakeven, stats.executedOrders);
        FileWriteString(fileHandle, "⚖️ معدل التعادل: " + DoubleToString(breakEvenRate, 1) + "%\n");
        
        if(stats.totalVolume > 0) {
            double profitPerLot = stats.totalProfit / stats.totalVolume;
            FileWriteString(fileHandle, "💰 الربح لكل لوت: " + DoubleToString(profitPerLot, 2) + "$\n");
        }
        
        if(stats.totalCommission != 0) {
            double netProfitAfterCosts = stats.totalProfit - MathAbs(stats.totalCommission) - MathAbs(stats.totalSwap);
            FileWriteString(fileHandle, "💵 الربح الصافي بعد التكاليف: " + DoubleToString(netProfitAfterCosts, 2) + "$\n");
        }
    }
    
    // إحصائيات الوقت
    if(stats.avgOrderLifetime > 0) {
        FileWriteString(fileHandle, "⏱️ متوسط عمر الأوامر غير المنفذة: " + DoubleToString(stats.avgOrderLifetime / 60.0, 1) + " ساعة\n");
    }
    
    // معدل الفشل
    int totalFailures = stats.highSpreadFailures + stats.wrongDirectionFailures + stats.almostTPFailures + 
                       stats.slippageFailures + stats.liquidityFailures + stats.timeoutFailures;
    if(totalFailures > 0) {
        double failureRate = CalculatePercentage(totalFailures, stats.totalOrders);
        FileWriteString(fileHandle, "⚠️ معدل الفشل الإجمالي: " + DoubleToString(failureRate, 1) + "%\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| كتابة التوصيات في الملف                                        |
//+------------------------------------------------------------------+
void WriteRecommendationsToFile(int fileHandle)
{
    FileWriteString(fileHandle, "💡 التوصيات والتحسينات المقترحة:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    
    // تحليل معدل التنفيذ
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    FileWriteString(fileHandle, "📊 تحليل معدل التنفيذ (" + DoubleToString(executionRate, 1) + "%):\n");
    
    if(executionRate < 50) {
        FileWriteString(fileHandle, "🚨 معدل التنفيذ منخفض جداً - يتطلب تدخل عاجل\n");
        FileWriteString(fileHandle, "   💡 مراجعة شاملة لاستراتيجية وضع الأوامر\n");
        FileWriteString(fileHandle, "   💡 فحص إعدادات الوسيط ومستويات السيولة\n");
    } else if(executionRate < 70) {
        FileWriteString(fileHandle, "⚠️ معدل التنفيذ يحتاج تحسين\n");
        FileWriteString(fileHandle, "   💡 تحسين توقيت وضع الأوامر\n");
        FileWriteString(fileHandle, "   💡 مراجعة نقاط الدخول\n");
    } else {
        FileWriteString(fileHandle, "✅ معدل التنفيذ مقبول إلى جيد\n");
    }
    
    // توصيات بناءً على أنماط الفشل
    WriteFailureRecommendationsToFile(fileHandle);
    
    // توصيات التوقيت
    WriteTimingRecommendationsToFile(fileHandle);
    
    // توصيات إدارة المخاطر
    WriteRiskRecommendationsToFile(fileHandle);
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| كتابة توصيات الفشل في الملف                                    |
//+------------------------------------------------------------------+
void WriteFailureRecommendationsToFile(int fileHandle)
{
    FileWriteString(fileHandle, "\n🔧 توصيات مبنية على أنماط الفشل:\n");
    
    if(stats.highSpreadFailures > stats.totalOrders * 0.2) {
        FileWriteString(fileHandle, "📊 مشكلة السبريد العالي:\n");
        FileWriteString(fileHandle, "   💡 تجنب التداول قبل وبعد الأخبار المهمة\n");
        FileWriteString(fileHandle, "   💡 استخدام فلتر سبريد\n");
    }
    
    if(stats.wrongDirectionFailures > stats.executedOrders * 0.4) {
        FileWriteString(fileHandle, "🎯 مشكلة دقة الاتجاه:\n");
        FileWriteString(fileHandle, "   💡 مراجعة مؤشرات تحديد الاتجاه\n");
        FileWriteString(fileHandle, "   💡 إضافة مؤشرات تأكيدية\n");
    }
    
    if(stats.almostTPFailures > stats.executedLosses * 0.3) {
        FileWriteString(fileHandle, "🎯 مشكلة قرب الأهداف:\n");
        FileWriteString(fileHandle, "   💡 تقليل مستوى التيك بروفت\n");
        FileWriteString(fileHandle, "   💡 استخدام خروج جزئي\n");
    }
}

//+------------------------------------------------------------------+
//| كتابة توصيات التوقيت في الملف                                  |
//+------------------------------------------------------------------+
void WriteTimingRecommendationsToFile(int fileHandle)
{
    FileWriteString(fileHandle, "\n⏰ توصيات التوقيت:\n");
    
    if(stats.bestHourExecution >= 0) {
        FileWriteString(fileHandle, "🌟 زيادة النشاط في الساعة " + IntegerToString(stats.bestHourExecution) + ":00\n");
    }
    
    if(stats.worstHourExecution >= 0) {
        FileWriteString(fileHandle, "⛔ تجنب أو تقليل النشاط في الساعة " + IntegerToString(stats.worstHourExecution) + ":00\n");
    }
    
    FileWriteString(fileHandle, "💡 التركيز على ساعات تداخل الجلسات (13:00-17:00 GMT)\n");
    FileWriteString(fileHandle, "💡 تجنب نهايات الأسبوع وساعات السيولة المنخفضة\n");
}

//+------------------------------------------------------------------+
//| كتابة توصيات المخاطر في الملف                                  |
//+------------------------------------------------------------------+
void WriteRiskRecommendationsToFile(int fileHandle)
{
    FileWriteString(fileHandle, "\n🛡️ توصيات إدارة المخاطر:\n");
    
    if(stats.maxDrawdownPct > 10) {
        FileWriteString(fileHandle, "⚠️ أقصى سحب مرتفع (" + DoubleToString(stats.maxDrawdownPct, 1) + "%) - تقليل أحجام الصفقات\n");
    }
    
    if(stats.avgRiskReward > 0 && stats.avgRiskReward < 1.5) {
        FileWriteString(fileHandle, "⚠️ نسبة مخاطر/عائد منخفضة - تحسين نقاط الخروج\n");
    }
    
    FileWriteString(fileHandle, "💡 استخدام ستوب لوز دائماً\n");
    FileWriteString(fileHandle, "💡 عدم المخاطرة بأكثر من 2% من الحساب في صفقة واحدة\n");
    FileWriteString(fileHandle, "💡 مراقبة الأداء وتعديل الاستراتيجية حسب الحاجة\n");
}

//+------------------------------------------------------------------+
//| كتابة خاتمة التقرير                                            |
//+------------------------------------------------------------------+
void WriteReportFooter(int fileHandle)
{
    FileWriteString(fileHandle, "==========================================\n");
    FileWriteString(fileHandle, "📋 ملخص التقرير:\n");
    FileWriteString(fileHandle, "تم تحليل " + IntegerToString(stats.totalOrders) + " أمر بالكامل\n");
    FileWriteString(fileHandle, "معدل التنفيذ: " + DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 1) + "%\n");
    if(stats.executedOrders > 0) {
        FileWriteString(fileHandle, "معدل النجاح للمنفذة: " + DoubleToString(stats.winRate, 1) + "%\n");
        FileWriteString(fileHandle, "صافي الربح: " + DoubleToString(stats.totalProfit, 2) + "$\n");
    }
    FileWriteString(fileHandle, "\n🔍 تم إنشاء هذا التقرير بواسطة محلل الزجزاج المتقدم\n");
    FileWriteString(fileHandle, "📅 تاريخ الإنشاء: " + TimeToString(TimeCurrent()) + "\n");
    FileWriteString(fileHandle, "==========================================\n");
}

//--- نهاية الجزء الثامن 
---
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 9/15       |
//| محلل بوت الزجزاج العبقري - الجزء التاسع: إنشاء التقارير التفصيلية |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - إنشاء التقارير التفصيلية وتحليل الأداء

//+------------------------------------------------------------------+
//| إنشاء تقرير مفصل لكل أمر في الملف                             |
//+------------------------------------------------------------------+
void WriteDetailedOrdersToFile(int fileHandle)
{
    if(stats.totalOrders == 0) return;
    
    FileWriteString(fileHandle, "🔍 التحليل المفصل لكل أمر:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n");
    
    // تحديد عدد الأوامر للعرض التفصيلي
    int maxDetailedOrders = MathMin(stats.totalOrders, 50); // حد أقصى 50 أمر لتجنب ملفات ضخمة
    
    for(int i = 0; i < maxDetailedOrders; i++) {
        WriteIndividualOrderToFile(fileHandle, i);
    }
    
    if(stats.totalOrders > maxDetailedOrders) {
        FileWriteString(fileHandle, "... تم تحليل " + IntegerToString(stats.totalOrders - maxDetailedOrders) + 
                       " أمر إضافي (غير معروض تفصيلياً لتوفير المساحة)\n\n");
    }
}

//+------------------------------------------------------------------+
//| كتابة تفاصيل أمر فردي في الملف                                |
//+------------------------------------------------------------------+
void WriteIndividualOrderToFile(int fileHandle, int index)
{
    string orderType = GetOrderTypeString(orders[index].type);
    string executionIcon = orders[index].isExecuted ? "✅" : "❌";
    
    FileWriteString(fileHandle, executionIcon + " أمر #" + IntegerToString(orders[index].ticket) + 
                   " - " + orders[index].symbol + " " + orderType + "\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    
    // المعلومات الأساسية
    FileWriteString(fileHandle, "📋 المعلومات الأساسية:\n");
    FileWriteString(fileHandle, "   ⏰ وقت الوضع: " + TimeToString(orders[index].timeSetup, TIME_DATE|TIME_MINUTES) + "\n");
    FileWriteString(fileHandle, "   ⏰ وقت الإنجاز: " + TimeToString(orders[index].timeDone, TIME_DATE|TIME_MINUTES) + "\n");
    FileWriteString(fileHandle, "   💰 الحجم: " + DoubleToString(orders[index].volume, 2) + " لوت\n");
    FileWriteString(fileHandle, "   💲 السعر المطلوب: " + DoubleToString(orders[index].priceOpen, 5) + "\n");
    
    if(IsValidPrice(orders[index].sl)) {
        FileWriteString(fileHandle, "   🛑 ستوب لوز: " + DoubleToString(orders[index].sl, 5) + "\n");
    }
    if(IsValidPrice(orders[index].tp)) {
        FileWriteString(fileHandle, "   🎯 تيك بروفت: " + DoubleToString(orders[index].tp, 5) + "\n");
    }
    
    // تفاصيل التنفيذ
    FileWriteString(fileHandle, "\n📊 تفاصيل التنفيذ:\n");
    FileWriteString(fileHandle, "   📋 الحالة: " + orders[index].executionStatus + "\n");
    
    if(orders[index].isExecuted) {
        WriteExecutedOrderDetailsToFile(fileHandle, index);
    } else {
        WriteNonExecutedOrderDetailsToFile(fileHandle, index);
    }
    
    // التحليل والتفسير
    FileWriteString(fileHandle, "\n🔍 التحليل والتفسير:\n");
    FileWriteString(fileHandle, "   📝 السبب الرئيسي: " + orders[index].failureReason + "\n");
    if(orders[index].detailedAnalysis != "") {
        FileWriteString(fileHandle, "   📋 تحليل مفصل: " + orders[index].detailedAnalysis + "\n");
    }
    
    // تحليل التوقيت
    FileWriteString(fileHandle, "\n⏰ تحليل التوقيت:\n");
    FileWriteString(fileHandle, "   📅 اليوم: " + orders[index].dayOfWeek + "\n");
    FileWriteString(fileHandle, "   🕐 الساعة: " + IntegerToString(orders[index].hourOfDay) + ":00\n");
    FileWriteString(fileHandle, "   🌊 حالة السوق: " + orders[index].timeAnalysis + "\n");
    FileWriteString(fileHandle, "   🌅 نهاية أسبوع: " + (orders[index].wasWeekend ? "نعم" : "لا") + "\n");
    FileWriteString(fileHandle, "   📰 وقت أخبار: " + (orders[index].wasNewsTime ? "نعم" : "لا") + "\n");
    FileWriteString(fileHandle, "   🏛️ جلسة نشطة: " + (orders[index].wasSessionOpen ? "نعم" : "لا") + "\n");
    
    FileWriteString(fileHandle, "\n════════════════════════════════════════\n\n");
}

//+------------------------------------------------------------------+
//| كتابة تفاصيل الأمر المنفذ في الملف                            |
//+------------------------------------------------------------------+
void WriteExecutedOrderDetailsToFile(int fileHandle, int index)
{
    FileWriteString(fileHandle, "   💲 السعر الفعلي: " + DoubleToString(orders[index].priceActual, 5) + "\n");
    FileWriteString(fileHandle, "   💵 الربح الأولي: " + DoubleToString(orders[index].profit, 2) + "$\n");
    FileWriteString(fileHandle, "   💸 العمولة: " + DoubleToString(orders[index].commission, 2) + "$\n");
    FileWriteString(fileHandle, "   🔄 السواب: " + DoubleToString(orders[index].swap, 2) + "$\n");
    FileWriteString(fileHandle, "   💰 صافي الربح: " + DoubleToString(orders[index].netProfit, 2) + "$\n");
    
    // تحليل الانزلاق
    if(orders[index].slippage > 0) {
        double slippagePips = orders[index].slippage / GetSymbolPoint(orders[index].symbol);
        FileWriteString(fileHandle, "   📊 الانزلاق: " + DoubleToString(slippagePips, 1) + " نقاط\n");
    }
    
    // تحليل الأداء التفصيلي
    if(orders[index].maxPrice > 0 && orders[index].minPrice > 0) {
        FileWriteString(fileHandle, "\n📈 تحليل الأداء:\n");
        FileWriteString(fileHandle, "   📈 أعلى سعر: " + DoubleToString(orders[index].maxPrice, 5) + "\n");
        FileWriteString(fileHandle, "   📉 أدنى سعر: " + DoubleToString(orders[index].minPrice, 5) + "\n");
        
        if(orders[index].maxRunup > 0) {
            FileWriteString(fileHandle, "   🚀 أقصى ربح محتمل: " + DoubleToString(orders[index].maxRunup, 1) + " نقاط\n");
        }
        if(orders[index].maxDrawdown > 0) {
            FileWriteString(fileHandle, "   📉 أقصى سحب: " + DoubleToString(orders[index].maxDrawdown, 1) + " نقاط\n");
        }
        
        if(orders[index].pointsToTP > 0) {
            FileWriteString(fileHandle, "   🎯 المسافة من الهدف: " + DoubleToString(orders[index].pointsToTP, 1) + " نقاط\n");
        }
        if(orders[index].pointsToSL > 0) {
            FileWriteString(fileHandle, "   🛑 المسافة من الستوب: " + DoubleToString(orders[index].pointsToSL, 1) + " نقاط\n");
        }
        
        FileWriteString(fileHandle, "   🎯 وصل للهدف: " + (orders[index].hitTakeProfit ? "نعم" : "لا") + "\n");
        FileWriteString(fileHandle, "   🛑 ضرب الستوب: " + (orders[index].hitStopLoss ? "نعم" : "لا") + "\n");
        FileWriteString(fileHandle, "   📊 الاتجاه صحيح: " + (orders[index].wasCorrectDirection ? "نعم" : "لا") + "\n");
    }
    
    // تحليل المدة
    if(orders[index].holdingTimeMinutes > 0) {
        double holdingHours = orders[index].holdingTimeMinutes / 60.0;
        FileWriteString(fileHandle, "   ⏱️ مدة الاحتفاظ: " + IntegerToString(orders[index].holdingTimeMinutes) + 
                       " دقيقة (" + DoubleToString(holdingHours, 1) + " ساعة)\n");
    }
    
    // تحليل المخاطر
    if(orders[index].riskRewardRatio > 0) {
        FileWriteString(fileHandle, "   ⚖️ نسبة المخاطر/العائد: 1:" + DoubleToString(orders[index].riskRewardRatio, 1) + "\n");
    }
    if(orders[index].percentageDrawdown > 0) {
        FileWriteString(fileHandle, "   📉 سحب من رأس المال: " + DoubleToString(orders[index].percentageDrawdown, 2) + "%\n");
    }
}

//+------------------------------------------------------------------+
//| كتابة تفاصيل الأمر غير المنفذ في الملف                        |
//+------------------------------------------------------------------+
void WriteNonExecutedOrderDetailsToFile(int fileHandle, int index)
{
    FileWriteString(fileHandle, "   ⏱️ مدة البقاء: " + IntegerToString(orders[index].orderLifetimeMinutes) + " دقيقة\n");
    
    if(orders[index].orderLifetimeMinutes > 60) {
        double lifetimeHours = orders[index].orderLifetimeMinutes / 60.0;
        FileWriteString(fileHandle, "   ⏱️ مدة البقاء: " + DoubleToString(lifetimeHours, 1) + " ساعة\n");
    }
    
    // تحليل وصول السعر
    FileWriteString(fileHandle, "\n📏 تحليل وصول السعر:\n");
    FileWriteString(fileHandle, "   🎯 هل وصل السعر للمستوى؟ " + (orders[index].priceReachedLevel ? "نعم" : "لا") + "\n");
    
    if(orders[index].minDistanceFromTarget > 0) {
        FileWriteString(fileHandle, "   📏 أقرب مسافة للهدف: " + DoubleToString(orders[index].minDistanceFromTarget, 1) + " نقاط\n");
    }
    if(orders[index].maxDistanceFromTarget > 0) {
        FileWriteString(fileHandle, "   📏 أبعد مسافة من الهدف: " + DoubleToString(orders[index].maxDistanceFromTarget, 1) + " نقاط\n");
    }
    
    if(orders[index].priceReachedLevel && orders[index].bestPriceReached > 0) {
        FileWriteString(fileHandle, "   💲 أفضل سعر وصل: " + DoubleToString(orders[index].bestPriceReached, 5) + "\n");
    }
    
    // تحليل ظروف السوق وقت الوضع
    FileWriteString(fileHandle, "\n🌊 ظروف السوق وقت الوضع:\n");
    FileWriteString(fileHandle, "   📊 حالة السوق: " + orders[index].marketConditionAtSetup + "\n");
    
    // تحليل المسافة الحالية
    if(orders[index].distanceFromPrice > 0) {
        double currentDistancePips = orders[index].distanceFromPrice / GetSymbolPoint(orders[index].symbol);
        FileWriteString(fileHandle, "   📏 المسافة من السعر الحالي: " + DoubleToString(currentDistancePips, 1) + " نقاط\n");
    }
}

//+------------------------------------------------------------------+
//| إنشاء تقرير ملخص تنفيذي                                        |
//+------------------------------------------------------------------+
void CreateExecutiveSummaryReport(int fileHandle)
{
    FileWriteString(fileHandle, "📊 الملخص التنفيذي:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n");
    
    // الأداء العام
    FileWriteString(fileHandle, "🎯 الأداء العام:\n");
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    string executionGrade = GetPerformanceGrade(executionRate);
    FileWriteString(fileHandle, "   معدل التنفيذ: " + DoubleToString(executionRate, 1) + "% (" + executionGrade + ")\n");
    
    if(stats.executedOrders > 0) {
        string profitabilityGrade = GetPerformanceGrade(stats.winRate);
        FileWriteString(fileHandle, "   معدل الربحية: " + DoubleToString(stats.winRate, 1) + "% (" + profitabilityGrade + ")\n");
        
        string profitFactorGrade = GetProfitFactorGrade(stats.profitFactor);
        FileWriteString(fileHandle, "   معامل الربح: " + DoubleToString(stats.profitFactor, 2) + " (" + profitFactorGrade + ")\n");
        FileWriteString(fileHandle, "   صافي الربح: " + DoubleToString(stats.totalProfit, 2) + "$\n");
    }
    
    // نقاط القوة
    FileWriteString(fileHandle, "\n💪 نقاط القوة:\n");
    WriteStrengthsToFile(fileHandle);
    
    // نقاط الضعف
    FileWriteString(fileHandle, "\n⚠️ نقاط تحتاج تحسين:\n");
    WriteWeaknessesToFile(fileHandle);
    
    // التوصيات الرئيسية
    FileWriteString(fileHandle, "\n🎯 التوصيات الرئيسية (أولوية عالية):\n");
    WriteTopRecommendationsToFile(fileHandle);
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحديد درجة الأداء                                              |
//+------------------------------------------------------------------+
string GetPerformanceGrade(double percentage)
{
    if(percentage >= 90) return "ممتاز";
    else if(percentage >= 80) return "جيد جداً";
    else if(percentage >= 70) return "جيد";
    else if(percentage >= 60) return "مقبول";
    else if(percentage >= 50) return "ضعيف";
    else return "ضعيف جداً";
}

//+------------------------------------------------------------------+
//| تحديد درجة معامل الربح                                         |
//+------------------------------------------------------------------+
string GetProfitFactorGrade(double factor)
{
    if(factor >= 2.0) return "ممتاز";
    else if(factor >= 1.5) return "جيد جداً";
    else if(factor >= 1.3) return "جيد";
    else if(factor >= 1.1) return "مقبول";
    else if(factor >= 1.0) return "ضعيف";
    else return "خاسر";
}

//+------------------------------------------------------------------+
//| كتابة نقاط القوة                                               |
//+------------------------------------------------------------------+
void WriteStrengthsToFile(int fileHandle)
{
    int strengthsCount = 0;
    
    // معدل التنفيذ الجيد
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    if(executionRate >= 70) {
        FileWriteString(fileHandle, "   ✅ معدل تنفيذ جيد (" + DoubleToString(executionRate, 1) + "%)\n");
        strengthsCount++;
    }
    
    // معدل ربحية جيد
    if(stats.winRate >= 60) {
        FileWriteString(fileHandle, "   ✅ معدل ربحية مقبول (" + DoubleToString(stats.winRate, 1) + "%)\n");
        strengthsCount++;
    }
    
    // معامل ربح جيد
    if(stats.profitFactor >= 1.3) {
        FileWriteString(fileHandle, "   ✅ معامل ربح جيد (" + DoubleToString(stats.profitFactor, 2) + ")\n");
        strengthsCount++;
    }
    
    // سحب منخفض
    if(stats.maxDrawdownPct < 5.0 && stats.maxDrawdownPct > 0) {
        FileWriteString(fileHandle, "   ✅ أقصى سحب منخفض (" + DoubleToString(stats.maxDrawdownPct, 1) + "%)\n");
        strengthsCount++;
    }
    
    // انزلاق منخفض
    if(stats.avgSlippage < 2.0 && stats.avgSlippage > 0) {
        FileWriteString(fileHandle, "   ✅ انزلاق منخفض (متوسط " + DoubleToString(stats.avgSlippage, 1) + " نقاط)\n");
        strengthsCount++;
    }
    
    // توقيت جيد
    if(stats.timeoutFailures < stats.totalOrders * 0.1) {
        FileWriteString(fileHandle, "   ✅ توقيت التداول مناسب\n");
        strengthsCount++;
    }
    
    if(strengthsCount == 0) {
        FileWriteString(fileHandle, "   ⚠️ لم يتم تحديد نقاط قوة واضحة - يحتاج تحسينات شاملة\n");
    }
}

//+------------------------------------------------------------------+
//| كتابة نقاط الضعف                                               |
//+------------------------------------------------------------------+
void WriteWeaknessesToFile(int fileHandle)
{
    int weaknessesCount = 0;
    
    // معدل تنفيذ منخفض
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    if(executionRate < 70) {
        FileWriteString(fileHandle, "   ❌ معدل تنفيذ منخفض (" + DoubleToString(executionRate, 1) + "%)\n");
        weaknessesCount++;
    }
    
    // معدل ربحية منخفض
    if(stats.winRate < 50 && stats.executedOrders > 0) {
        FileWriteString(fileHandle, "   ❌ معدل ربحية منخفض (" + DoubleToString(stats.winRate, 1) + "%)\n");
        weaknessesCount++;
    }
    
    // معامل ربح ضعيف
    if(stats.profitFactor < 1.3 && stats.profitFactor > 0) {
        FileWriteString(fileHandle, "   ❌ معامل ربح ضعيف (" + DoubleToString(stats.profitFactor, 2) + ")\n");
        weaknessesCount++;
    }
    
    // سحب عالي
    if(stats.maxDrawdownPct > 10.0) {
        FileWriteString(fileHandle, "   ❌ أقصى سحب عالي (" + DoubleToString(stats.maxDrawdownPct, 1) + "%)\n");
        weaknessesCount++;
    }
    
    // انزلاق عالي
    if(stats.avgSlippage > 3.0) {
        FileWriteString(fileHandle, "   ❌ انزلاق عالي (متوسط " + DoubleToString(stats.avgSlippage, 1) + " نقاط)\n");
        weaknessesCount++;
    }
    
    // مشاكل التوقيت
    if(stats.timeoutFailures > stats.totalOrders * 0.2) {
        FileWriteString(fileHandle, "   ❌ مشاكل في توقيت التداول\n");
        weaknessesCount++;
    }
    
    // مشاكل السبريد
    if(stats.highSpreadFailures > stats.totalOrders * 0.2) {
        FileWriteString(fileHandle, "   ❌ تأثر سلبي بالسبريد العالي\n");
        weaknessesCount++;
    }
    
    // مشاكل الاتجاه
    if(stats.wrongDirectionFailures > stats.executedOrders * 0.4) {
        FileWriteString(fileHandle, "   ❌ دقة تحديد الاتجاه تحتاج تحسين\n");
        weaknessesCount++;
    }
    
    if(weaknessesCount == 0) {
        FileWriteString(fileHandle, "   ✅ لا توجد نقاط ضعف واضحة - الأداء جيد إجمالاً\n");
    }
}

//+------------------------------------------------------------------+
//| كتابة أهم التوصيات                                             |
//+------------------------------------------------------------------+
void WriteTopRecommendationsToFile(int fileHandle)
{
    int recommendationCount = 0;
    
    // تحسين معدل التنفيذ
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    if(executionRate < 70) {
        FileWriteString(fileHandle, "   1️⃣ تحسين معدل التنفيذ: مراجعة استراتيجية وضع الأوامر\n");
        recommendationCount++;
    }
    
    // تحسين دقة الاتجاه
    if(stats.wrongDirectionFailures > stats.executedOrders * 0.3) {
        FileWriteString(fileHandle, "   " + IntegerToString(recommendationCount + 1) + "️⃣ تحسين دقة تحديد الاتجاه: إضافة مؤشرات تأكيدية\n");
        recommendationCount++;
    }
    
    // تقليل السحب
    if(stats.maxDrawdownPct > 10.0) {
        FileWriteString(fileHandle, "   " + IntegerToString(recommendationCount + 1) + "️⃣ تقليل المخاطر: تصغير أحجام الصفقات\n");
        recommendationCount++;
    }
    
    // تحسين التوقيت
    if(stats.timeoutFailures > stats.totalOrders * 0.2) {
        FileWriteString(fileHandle, "   " + IntegerToString(recommendationCount + 1) + "️⃣ تحسين توقيت التداول: التركيز على ساعات السيولة العالية\n");
        recommendationCount++;
    }
    
    // تقليل تأثير السبريد
    if(stats.highSpreadFailures > stats.totalOrders * 0.2) {
        FileWriteString(fileHandle, "   " + IntegerToString(recommendationCount + 1) + "️⃣ تقليل تأثير السبريد: تجنب أوقات الأخبار\n");
        recommendationCount++;
    }
    
    if(recommendationCount == 0) {
        FileWriteString(fileHandle, "   ✅ الأداء جيد - مواصلة المراقبة والتحسين التدريجي\n");
    }
}

//+------------------------------------------------------------------+
//| إنشاء تقرير مقارن (لاستخدام مستقبلي)                         |
//+------------------------------------------------------------------+
void CreateComparisonReportPlaceholder(int fileHandle)
{
    FileWriteString(fileHandle, "📊 تقرير المقارنة (للاستخدام المستقبلي):\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    FileWriteString(fileHandle, "💡 سيتم توفير تقرير مقارن مع الفترات السابقة\n");
    FileWriteString(fileHandle, "   في التقارير المستقبلية لمتابعة التحسن.\n\n");
    
    // حفظ البيانات الأساسية للمقارنة المستقبلية
    FileWriteString(fileHandle, "📋 بيانات مرجعية للمقارنة:\n");
    FileWriteString(fileHandle, "   معدل التنفيذ المرجعي: " + DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 1) + "%\n");
    if(stats.executedOrders > 0) {
        FileWriteString(fileHandle, "   معدل الربح المرجعي: " + DoubleToString(stats.winRate, 1) + "%\n");
        FileWriteString(fileHandle, "   معامل الربح المرجعي: " + DoubleToString(stats.profitFactor, 2) + "\n");
        FileWriteString(fileHandle, "   صافي الربح المرجعي: " + DoubleToString(stats.totalProfit, 2) + "$\n");
    }
    FileWriteString(fileHandle, "\n");
}

//--- نهاية الجزء التاسع ---
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 10/15      |
//| محلل بوت الزجزاج العبقري - الجزء العاشر: إنشاء التقارير الثاني |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - إنشاء تقارير متقدمة إضافية

//+------------------------------------------------------------------+
//| إنشاء تقرير تحليل الرموز المتداولة                            |
//+------------------------------------------------------------------+
void CreateSymbolAnalysisReport(int fileHandle)
{
    FileWriteString(fileHandle, "💱 تحليل الرموز المتداولة:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    
    // إنشاء قائمة بالرموز المتداولة
    string symbols[];
    int symbolOrders[];
    int symbolExecuted[];
    double symbolProfit[];
    int symbolCount = 0;
    
    // جمع إحصائيات كل رمز
    for(int i = 0; i < stats.totalOrders; i++) {
        string currentSymbol = orders[i].symbol;
        int symbolIndex = FindSymbolIndex(symbols, symbolCount, currentSymbol);
        
        if(symbolIndex == -1) {
            // رمز جديد
            ArrayResize(symbols, symbolCount + 1);
            ArrayResize(symbolOrders, symbolCount + 1);
            ArrayResize(symbolExecuted, symbolCount + 1);
            ArrayResize(symbolProfit, symbolCount + 1);
            
            symbols[symbolCount] = currentSymbol;
            symbolOrders[symbolCount] = 1;
            symbolExecuted[symbolCount] = orders[i].isExecuted ? 1 : 0;
            symbolProfit[symbolCount] = orders[i].isExecuted ? orders[i].netProfit : 0;
            symbolCount++;
        } else {
            // رمز موجود
            symbolOrders[symbolIndex]++;
            if(orders[i].isExecuted) {
                symbolExecuted[symbolIndex]++;
                symbolProfit[symbolIndex] += orders[i].netProfit;
            }
        }
    }
    
    // كتابة تحليل كل رمز
    for(int i = 0; i < symbolCount; i++) {
        WriteSymbolAnalysis(fileHandle, symbols[i], symbolOrders[i], symbolExecuted[i], symbolProfit[i]);
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| البحث عن فهرس الرمز                                            |
//+------------------------------------------------------------------+
int FindSymbolIndex(string symbols[], int count, string symbol)
{
    for(int i = 0; i < count; i++) {
        if(symbols[i] == symbol) return i;
    }
    return -1;
}

//+------------------------------------------------------------------+
//| كتابة تحليل رمز محدد                                           |
//+------------------------------------------------------------------+
void WriteSymbolAnalysis(int fileHandle, string symbol, int totalOrders, int executedOrders, double profit)
{
    double executionRate = CalculatePercentage(executedOrders, totalOrders);
    
    FileWriteString(fileHandle, "📊 " + symbol + ":\n");
    FileWriteString(fileHandle, "   📈 إجمالي الأوامر: " + IntegerToString(totalOrders) + "\n");
    FileWriteString(fileHandle, "   ✅ أوامر منفذة: " + IntegerToString(executedOrders) + 
                   " (" + DoubleToString(executionRate, 1) + "%)\n");
    
    if(executedOrders > 0) {
        FileWriteString(fileHandle, "   💰 صافي الربح: " + DoubleToString(profit, 2) + "$\n");
        double avgProfitPerTrade = profit / executedOrders;
        FileWriteString(fileHandle, "   📊 متوسط الربح لكل صفقة: " + DoubleToString(avgProfitPerTrade, 2) + "$\n");
        
        // تحليل الأداء
        string performance = "";
        if(executionRate >= 80 && profit > 0) {
            performance = "ممتاز";
        } else if(executionRate >= 70 && profit >= 0) {
            performance = "جيد";
        } else if(executionRate >= 60) {
            performance = "مقبول";
        } else {
            performance = "يحتاج تحسين";
        }
        
        FileWriteString(fileHandle, "   🎯 الأداء: " + performance + "\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| إنشاء تقرير تحليل الأوقات المفصل                              |
//+------------------------------------------------------------------+
void CreateDetailedTimeAnalysisReport(int fileHandle)
{
    FileWriteString(fileHandle, "⏰ تحليل مفصل للأوقات:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    
    // تحليل ساعي
    CreateHourlyAnalysis(fileHandle);
    
    // تحليل أيام الأسبوع
    CreateDailyAnalysis(fileHandle);
    
    // تحليل الأوقات الخاصة
    CreateSpecialTimeAnalysis(fileHandle);
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| إنشاء التحليل الساعي                                           |
//+------------------------------------------------------------------+
void CreateHourlyAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "🕐 التحليل الساعي:\n");
    
    int hourlyStats[24][4]; // [hour][total, executed, wins, losses]
    ArrayInitialize(hourlyStats, 0);
    
    // جمع الإحصائيات
    for(int i = 0; i < stats.totalOrders; i++) {
        int hour = orders[i].hourOfDay;
        if(hour >= 0 && hour < 24) {
            hourlyStats[hour][0]++; // إجمالي
            if(orders[i].isExecuted) {
                hourlyStats[hour][1]++; // منفذة
                if(orders[i].netProfit > 0) {
                    hourlyStats[hour][2]++; // رابحة
                } else if(orders[i].netProfit < 0) {
                    hourlyStats[hour][3]++; // خاسرة
                }
            }
        }
    }
    
    // كتابة التحليل الساعي
    for(int h = 0; h < 24; h++) {
        if(hourlyStats[h][0] > 0) {
            double execRate = CalculatePercentage(hourlyStats[h][1], hourlyStats[h][0]);
            double winRate = hourlyStats[h][1] > 0 ? CalculatePercentage(hourlyStats[h][2], hourlyStats[h][1]) : 0;
            
            FileWriteString(fileHandle, StringFormat("   %02d:00 - أوامر:%d, تنفيذ:%.1f%%, نجاح:%.1f%%", 
                           h, hourlyStats[h][0], execRate, winRate));
            
            // تقييم الأداء
            if(execRate >= 80 && winRate >= 60) {
                FileWriteString(fileHandle, " ⭐ ممتاز");
            } else if(execRate >= 70 && winRate >= 50) {
                FileWriteString(fileHandle, " ✅ جيد");
            } else if(execRate < 50 || winRate < 40) {
                FileWriteString(fileHandle, " ⚠️ ضعيف");
            }
            
            FileWriteString(fileHandle, "\n");
        }
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| إنشاء التحليل اليومي                                           |
//+------------------------------------------------------------------+
void CreateDailyAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "📅 التحليل حسب أيام الأسبوع:\n");
    
    int dailyStats[7][4]; // [day][total, executed, wins, losses]
    ArrayInitialize(dailyStats, 0);
    
    // جمع الإحصائيات
    for(int i = 0; i < stats.totalOrders; i++) {
        MqlDateTime dt;
        TimeToStruct(orders[i].timeSetup, dt);
        int day = dt.day_of_week;
        
        if(day >= 0 && day < 7) {
            dailyStats[day][0]++; // إجمالي
            if(orders[i].isExecuted) {
                dailyStats[day][1]++; // منفذة
                if(orders[i].netProfit > 0) {
                    dailyStats[day][2]++; // رابحة
                } else if(orders[i].netProfit < 0) {
                    dailyStats[day][3]++; // خاسرة
                }
            }
        }
    }
    
    // كتابة التحليل اليومي
    string dayNames[7] = {"الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"};
    
    for(int d = 0; d < 7; d++) {
        if(dailyStats[d][0] > 0) {
            double execRate = CalculatePercentage(dailyStats[d][1], dailyStats[d][0]);
            double winRate = dailyStats[d][1] > 0 ? CalculatePercentage(dailyStats[d][2], dailyStats[d][1]) : 0;
            
            FileWriteString(fileHandle, "   " + dayNames[d] + " - أوامر:" + IntegerToString(dailyStats[d][0]) + 
                           ", تنفيذ:" + DoubleToString(execRate, 1) + "%, نجاح:" + DoubleToString(winRate, 1) + "%");
            
            // تقييم اليوم
            if(d == 5 || d == 6) { // جمعة وسبت
                FileWriteString(fileHandle, " (نهاية أسبوع)");
            } else if(d == 1) { // إثنين
                FileWriteString(fileHandle, " (بداية أسبوع)");
            }
            
            FileWriteString(fileHandle, "\n");
        }
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحليل الأوقات الخاصة                                           |
//+------------------------------------------------------------------+
void CreateSpecialTimeAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "🌟 تحليل الأوقات الخاصة:\n");
    
    int newsTimeOrders = 0, newsTimeExecuted = 0, newsTimeWins = 0;
    int weekendOrders = 0, weekendExecuted = 0, weekendWins = 0;
    int overlapOrders = 0, overlapExecuted = 0, overlapWins = 0; // تداخل الجلسات
    
    for(int i = 0; i < stats.totalOrders; i++) {
        // أوقات الأخبار
        if(orders[i].wasNewsTime) {
            newsTimeOrders++;
            if(orders[i].isExecuted) {
                newsTimeExecuted++;
                if(orders[i].netProfit > 0) newsTimeWins++;
            }
        }
        
        // نهاية الأسبوع
        if(orders[i].wasWeekend) {
            weekendOrders++;
            if(orders[i].isExecuted) {
                weekendExecuted++;
                if(orders[i].netProfit > 0) weekendWins++;
            }
        }
        
        // تداخل الجلسات (13:00-17:00)
        if(orders[i].hourOfDay >= 13 && orders[i].hourOfDay <= 17) {
            overlapOrders++;
            if(orders[i].isExecuted) {
                overlapExecuted++;
                if(orders[i].netProfit > 0) overlapWins++;
            }
        }
    }
    
    // تقرير أوقات الأخبار
    if(newsTimeOrders > 0) {
        double newsExecRate = CalculatePercentage(newsTimeExecuted, newsTimeOrders);
        double newsWinRate = newsTimeExecuted > 0 ? CalculatePercentage(newsTimeWins, newsTimeExecuted) : 0;
        FileWriteString(fileHandle, "   📰 أوقات الأخبار: " + IntegerToString(newsTimeOrders) + 
                       " أوامر - تنفيذ:" + DoubleToString(newsExecRate, 1) + "%, نجاح:" + DoubleToString(newsWinRate, 1) + "%\n");
    }
    
    // تقرير نهاية الأسبوع
    if(weekendOrders > 0) {
        double weekendExecRate = CalculatePercentage(weekendExecuted, weekendOrders);
        double weekendWinRate = weekendExecuted > 0 ? CalculatePercentage(weekendWins, weekendExecuted) : 0;
        FileWriteString(fileHandle, "   🌅 نهاية الأسبوع: " + IntegerToString(weekendOrders) + 
                       " أوامر - تنفيذ:" + DoubleToString(weekendExecRate, 1) + "%, نجاح:" + DoubleToString(weekendWinRate, 1) + "%\n");
    }
    
    // تقرير تداخل الجلسات
    if(overlapOrders > 0) {
        double overlapExecRate = CalculatePercentage(overlapExecuted, overlapOrders);
        double overlapWinRate = overlapExecuted > 0 ? CalculatePercentage(overlapWins, overlapExecuted) : 0;
        FileWriteString(fileHandle, "   🌟 تداخل الجلسات (13-17): " + IntegerToString(overlapOrders) + 
                       " أوامر - تنفيذ:" + DoubleToString(overlapExecRate, 1) + "%, نجاح:" + DoubleToString(overlapWinRate, 1) + "%\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| إنشاء تقرير تحليل المخاطر المفصل                              |
//+------------------------------------------------------------------+
void CreateDetailedRiskAnalysisReport(int fileHandle)
{
    FileWriteString(fileHandle, "🛡️ تحليل المخاطر المفصل:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    
    // تحليل توزيع الأرباح والخسائر
    CreateProfitLossDistribution(fileHandle);
    
    // تحليل أحجام الصفقات والمخاطر
    CreateVolumRiskAnalysis(fileHandle);
    
    // تحليل نسب المخاطر للعوائد
    CreateRiskRewardAnalysis(fileHandle);
    
    // تحليل السحب والتعافي
    CreateDrawdownAnalysis(fileHandle);
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحليل توزيع الأرباح والخسائر                                   |
//+------------------------------------------------------------------+
void CreateProfitLossDistribution(int fileHandle)
{
    FileWriteString(fileHandle, "📊 توزيع الأرباح والخسائر:\n");
    
    if(stats.executedOrders == 0) {
        FileWriteString(fileHandle, "   ⚠️ لا توجد صفقات منفذة لتحليل التوزيع\n\n");
        return;
    }
    
    // تصنيف الصفقات حسب الحجم
    int smallProfits = 0, mediumProfits = 0, largeProfits = 0;
    int smallLosses = 0, mediumLosses = 0, largeLosses = 0;
    double profitThreshold1 = 50.0, profitThreshold2 = 200.0;
    double lossThreshold1 = -50.0, lossThreshold2 = -200.0;
    
    for(int i = 0; i < stats.totalOrders; i++) {
        if(!orders[i].isExecuted) continue;
        
        if(orders[i].netProfit > 0) {
            if(orders[i].netProfit <= profitThreshold1) smallProfits++;
            else if(orders[i].netProfit <= profitThreshold2) mediumProfits++;
            else largeProfits++;
        } else if(orders[i].netProfit < 0) {
            if(orders[i].netProfit >= lossThreshold1) smallLosses++;
            else if(orders[i].netProfit >= lossThreshold2) mediumLosses++;
            else largeLosses++;
        }
    }
    
    FileWriteString(fileHandle, "   💰 الأرباح:\n");
    FileWriteString(fileHandle, "      🔹 صغيرة (≤$50): " + IntegerToString(smallProfits) + " صفقات\n");
    FileWriteString(fileHandle, "      🔸 متوسطة ($50-200): " + IntegerToString(mediumProfits) + " صفقات\n");
    FileWriteString(fileHandle, "      🔶 كبيرة (>$200): " + IntegerToString(largeProfits) + " صفقات\n");
    
    FileWriteString(fileHandle, "   📉 الخسائر:\n");
    FileWriteString(fileHandle, "      🔹 صغيرة (≥-$50): " + IntegerToString(smallLosses) + " صفقات\n");
    FileWriteString(fileHandle, "      🔸 متوسطة (-$50 إلى -$200): " + IntegerToString(mediumLosses) + " صفقات\n");
    FileWriteString(fileHandle, "      🔶 كبيرة (<-$200): " + IntegerToString(largeLosses) + " صفقات\n");
    
    // تحليل التوزيع
    if(largeLosses > largeProfits) {
        FileWriteString(fileHandle, "   ⚠️ تحذير: الخسائر الكبيرة أكثر من الأرباح الكبيرة\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحليل حجم الصفقات والمخاطر                                     |
//+------------------------------------------------------------------+
void CreateVolumRiskAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "💼 تحليل أحجام الصفقات والمخاطر:\n");
    
    if(stats.avgVolume <= 0) {
        FileWriteString(fileHandle, "   ⚠️ لا توجد بيانات كافية لتحليل الأحجام\n\n");
        return;
    }
    
    double accountBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    if(accountBalance <= 0) accountBalance = 10000; // افتراضي
    
    FileWriteString(fileHandle, "   📊 متوسط حجم الصفقة: " + DoubleToString(stats.avgVolume, 2) + " لوت\n");
    
    // تقدير المخاطرة لكل صفقة
    double avgRiskPerTrade = stats.avgLoss * stats.avgVolume;
    double riskPercentage = (avgRiskPerTrade / accountBalance) * 100;
    
    FileWriteString(fileHandle, "   💰 متوسط المخاطرة لكل صفقة: " + DoubleToString(avgRiskPerTrade, 2) + 
                   "$ (" + DoubleToString(riskPercentage, 2) + "% من الحساب)\n");
    
    // تقييم مستوى المخاطرة
    if(riskPercentage > 5.0) {
        FileWriteString(fileHandle, "   🚨 مستوى مخاطرة عالي جداً - تقليل الأحجام ضروري\n");
    } else if(riskPercentage > 2.0) {
        FileWriteString(fileHandle, "   ⚠️ مستوى مخاطرة عالي - يُنصح بتقليل الأحجام\n");
    } else if(riskPercentage > 1.0) {
        FileWriteString(fileHandle, "   ✅ مستوى مخاطرة مقبول\n");
    } else {
        FileWriteString(fileHandle, "   ✅ مستوى مخاطرة محافظ\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحليل نسب المخاطر للعوائد                                      |
//+------------------------------------------------------------------+
void CreateRiskRewardAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "⚖️ تحليل نسب المخاطر للعوائد:\n");
    
    if(stats.avgRiskReward <= 0) {
        FileWriteString(fileHandle, "   ⚠️ لا توجد بيانات كافية لحساب نسب المخاطر للعوائد\n\n");
        return;
    }
    
    FileWriteString(fileHandle, "   📊 متوسط النسبة المخططة: 1:" + DoubleToString(stats.avgRiskReward, 1) + "\n");
    
    // حساب النسبة الفعلية
    if(stats.avgLoss > 0 && stats.avgWin > 0) {
        double actualRR = stats.avgWin / stats.avgLoss;
        FileWriteString(fileHandle, "   📈 النسبة الفعلية المحققة: 1:" + DoubleToString(actualRR, 1) + "\n");
        
        // مقارنة المخطط بالفعلي
        if(actualRR < stats.avgRiskReward * 0.8) {
            FileWriteString(fileHandle, "   ⚠️ النسبة الفعلية أقل بكثير من المخطط - مراجعة نقاط الخروج\n");
        } else if(actualRR > stats.avgRiskReward * 1.2) {
            FileWriteString(fileHandle, "   ✅ النسبة الفعلية أفضل من المخطط\n");
        } else {
            FileWriteString(fileHandle, "   ✅ النسبة الفعلية قريبة من المخطط\n");
        }
    }
    
    // تقييم النسبة
    if(stats.avgRiskReward >= 3.0) {
        FileWriteString(fileHandle, "   🌟 نسبة ممتازة - استمر في هذا الأداء\n");
    } else if(stats.avgRiskReward >= 2.0) {
        FileWriteString(fileHandle, "   ✅ نسبة جيدة\n");
    } else if(stats.avgRiskReward >= 1.5) {
        FileWriteString(fileHandle, "   ⚠️ نسبة مقبولة - يمكن تحسينها\n");
    } else {
        FileWriteString(fileHandle, "   🚨 نسبة ضعيفة - تحتاج تحسين عاجل\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحليل السحب والتعافي                                           |
//+------------------------------------------------------------------+
void CreateDrawdownAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "📉 تحليل السحب والتعافي:\n");
    
    if(stats.maxDrawdownPct <= 0) {
        FileWriteString(fileHandle, "   ✅ لم يتم رصد سحب كبير\n\n");
        return;
    }
    
    FileWriteString(fileHandle, "   📊 أقصى سحب مسجل: " + DoubleToString(stats.maxDrawdownPct, 2) + "%\n");
    FileWriteString(fileHandle, "   📊 متوسط السحب: " + DoubleToString(stats.avgDrawdownPct, 2) + "%\n");
    
    // تقييم مستوى السحب
    if(stats.maxDrawdownPct > 20.0) {
        FileWriteString(fileHandle, "   🚨 سحب خطير جداً - إيقاف التداول ومراجعة الاستراتيجية\n");
    } else if(stats.maxDrawdownPct > 15.0) {
        FileWriteString(fileHandle, "   🚨 سحب عالي جداً - تقليل المخاطر فوراً\n");
    } else if(stats.maxDrawdownPct > 10.0) {
        FileWriteString(fileHandle, "   ⚠️ سحب عالي - مراجعة إدارة المخاطر\n");
    } else if(stats.maxDrawdownPct > 5.0) {
        FileWriteString(fileHandle, "   ⚠️ سحب متوسط - مراقبة مستمرة\n");
    } else {
        FileWriteString(fileHandle, "   ✅ سحب منخفض - إدارة مخاطر جيدة\n");
    }
    
    // معامل الاسترداد
    if(stats.recoveryFactor > 0) {
        FileWriteString(fileHandle, "   🔄 معامل الاسترداد: " + DoubleToString(stats.recoveryFactor, 2) + "\n");
        
        if(stats.recoveryFactor >= 3.0) {
            FileWriteString(fileHandle, "   ✅ قدرة تعافي ممتازة\n");
        } else if(stats.recoveryFactor >= 2.0) {
            FileWriteString(fileHandle, "   ✅ قدرة تعافي جيدة\n");
        } else {
            FileWriteString(fileHandle, "   ⚠️ قدرة تعافي ضعيفة\n");
        }
    }
    
    FileWriteString(fileHandle, "\n");
}

//--- نهاية الجزء العاشر ---
//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 11/15      |
//| محلل بوت الزجزاج العبقري - الجزء الحادي عشر: التقارير الثالث   |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - إنشاء تقارير تفصيلية إضافية ومؤشرات متقدمة

//+------------------------------------------------------------------+
//| إنشاء تقرير تحليل الأداء التقني                                |
//+------------------------------------------------------------------+
void CreateTechnicalPerformanceReport(int fileHandle)
{
    FileWriteString(fileHandle, "⚙️ تحليل الأداء التقني:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    
    // تحليل سرعة التنفيذ
    CreateExecutionSpeedAnalysis(fileHandle);
    
    // تحليل الانزلاق والسبريد
    CreateSlippageSpreadAnalysis(fileHandle);
    
    // تحليل جودة التنفيذ
    CreateExecutionQualityAnalysis(fileHandle);
    
    // تحليل الأخطاء التقنية
    CreateTechnicalErrorAnalysis(fileHandle);
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحليل سرعة التنفيذ                                              |
//+------------------------------------------------------------------+
void CreateExecutionSpeedAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "⚡ تحليل سرعة التنفيذ:\n");
    
    if(stats.executedOrders == 0) {
        FileWriteString(fileHandle, "   ⚠️ لا توجد صفقات منفذة لتحليل السرعة\n\n");
        return;
    }
    
    // حساب متوسط وقت التنفيذ
    int totalExecutionTime = 0;
    int validExecutionTimes = 0;
    int fastExecutions = 0; // أقل من ثانية
    int slowExecutions = 0; // أكثر من 5 ثوان
    
    for(int i = 0; i < stats.totalOrders; i++) {
        if(orders[i].isExecuted && orders[i].executionDelay >= 0) {
            totalExecutionTime += orders[i].executionDelay;
            validExecutionTimes++;
            
            if(orders[i].executionDelay < 1) fastExecutions++;
            if(orders[i].executionDelay > 5) slowExecutions++;
        }
    }
    
    if(validExecutionTimes > 0) {
        double avgExecutionTime = (double)totalExecutionTime / validExecutionTimes;
        FileWriteString(fileHandle, "   ⏱️ متوسط وقت التنفيذ: " + DoubleToString(avgExecutionTime, 1) + " ثانية\n");
        
        double fastPercentage = CalculatePercentage(fastExecutions, validExecutionTimes);
        double slowPercentage = CalculatePercentage(slowExecutions, validExecutionTimes);
        
        FileWriteString(fileHandle, "   🚀 تنفيذ سريع (<1 ثانية): " + IntegerToString(fastExecutions) + 
                       " (" + DoubleToString(fastPercentage, 1) + "%)\n");
        FileWriteString(fileHandle, "   🐌 تنفيذ بطيء (>5 ثواني): " + IntegerToString(slowExecutions) + 
                       " (" + DoubleToString(slowPercentage, 1) + "%)\n");
        
        // تقييم الأداء
        if(avgExecutionTime < 1.0) {
            FileWriteString(fileHandle, "   ✅ سرعة تنفيذ ممتازة\n");
        } else if(avgExecutionTime < 3.0) {
            FileWriteString(fileHandle, "   ✅ سرعة تنفيذ جيدة\n");
        } else if(avgExecutionTime < 5.0) {
            FileWriteString(fileHandle, "   ⚠️ سرعة تنفيذ مقبولة\n");
        } else {
            FileWriteString(fileHandle, "   🚨 سرعة تنفيذ بطيئة - فحص الاتصال والوسيط\n");
        }
    } else {
        FileWriteString(fileHandle, "   ⚠️ لا توجد بيانات كافية لتحليل سرعة التنفيذ\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحليل الانزلاق والسبريد التفصيلي                              |
//+------------------------------------------------------------------+
void CreateSlippageSpreadAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "📊 تحليل الانزلاق والسبريد:\n");
    
    if(stats.executedOrders == 0) {
        FileWriteString(fileHandle, "   ⚠️ لا توجد صفقات منفذة للتحليل\n\n");
        return;
    }
    
    // إحصائيات السبريد
    if(stats.avgSpread > 0) {
        double avgSpreadPips = stats.avgSpread * 10000;
        double maxSpreadPips = stats.maxSpread * 10000;
        
        FileWriteString(fileHandle, "   📈 السبريد:\n");
        FileWriteString(fileHandle, "      متوسط السبريد: " + DoubleToString(avgSpreadPips, 1) + " نقطة\n");
        FileWriteString(fileHandle, "      أعلى سبريد: " + DoubleToString(maxSpreadPips, 1) + " نقطة\n");
        
        // تقييم السبريد
        if(avgSpreadPips < 1.0) {
            FileWriteString(fileHandle, "      ✅ سبريد ممتاز (منخفض جداً)\n");
        } else if(avgSpreadPips < 2.0) {
            FileWriteString(fileHandle, "      ✅ سبريد جيد\n");
        } else if(avgSpreadPips < 3.0) {
            FileWriteString(fileHandle, "      ⚠️ سبريد مقبول\n");
        } else {
            FileWriteString(fileHandle, "      🚨 سبريد عالي - فحص الوسيط أو تغيير الأوقات\n");
        }
    }
    
    // إحصائيات الانزلاق
    if(stats.avgSlippage > 0) {
        FileWriteString(fileHandle, "   📉 الانزلاق:\n");
        FileWriteString(fileHandle, "      متوسط الانزلاق: " + DoubleToString(stats.avgSlippage, 1) + " نقطة\n");
        FileWriteString(fileHandle, "      أعلى انزلاق: " + DoubleToString(stats.maxSlippage, 1) + " نقطة\n");
        
        // تحليل نسبة الانزلاق للسبريد
        if(stats.avgSpread > 0) {
            double slippageToSpreadRatio = stats.avgSlippage / (stats.avgSpread * 10000);
            FileWriteString(fileHandle, "      نسبة الانزلاق/السبريد: " + DoubleToString(slippageToSpreadRatio, 1) + "x\n");
            
            if(slippageToSpreadRatio < 1.0) {
                FileWriteString(fileHandle, "      ✅ انزلاق منخفض نسبياً\n");
            } else if(slippageToSpreadRatio < 2.0) {
                FileWriteString(fileHandle, "      ⚠️ انزلاق متوسط\n");
            } else {
                FileWriteString(fileHandle, "      🚨 انزلاق عالي - مراجعة نوع الأوامر\n");
            }
        }
        
        // تقييم الانزلاق
        if(stats.avgSlippage < 1.0) {
            FileWriteString(fileHandle, "      ✅ انزلاق ممتاز\n");
        } else if(stats.avgSlippage < 2.0) {
            FileWriteString(fileHandle, "      ✅ انزلاق جيد\n");
        } else if(stats.avgSlippage < 3.0) {
            FileWriteString(fileHandle, "      ⚠️ انزلاق مقبول\n");
        } else {
            FileWriteString(fileHandle, "      🚨 انزلاق عالي - استخدم أوامر محدودة\n");
        }
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحليل جودة التنفيذ                                              |
//+------------------------------------------------------------------+
void CreateExecutionQualityAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "🎯 تحليل جودة التنفيذ:\n");
    
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    FileWriteString(fileHandle, "   📊 معدل التنفيذ العام: " + DoubleToString(executionRate, 1) + "%\n");
    
    // تحليل الأوامر التي وصل لها السعر ولم تنفذ
    if(stats.priceReachedButNotExecuted > 0) {
        double problematicRate = CalculatePercentage(stats.priceReachedButNotExecuted, stats.totalOrders);
        FileWriteString(fileHandle, "   🚨 أوامر وصل لها السعر ولم تنفذ: " + IntegerToString(stats.priceReachedButNotExecuted) + 
                       " (" + DoubleToString(problematicRate, 1) + "%)\n");
        
        if(problematicRate > 10.0) {
            FileWriteString(fileHandle, "   ⚠️ مشكلة خطيرة في جودة التنفيذ - فحص الوسيط\n");
        } else if(problematicRate > 5.0) {
            FileWriteString(fileHandle, "   ⚠️ مشكلة في جودة التنفيذ - مراجعة الإعدادات\n");
        }
    }
    
    // تحليل الأوامر الجزئية
    if(stats.partiallyFilled > 0) {
        double partialRate = CalculatePercentage(stats.partiallyFilled, stats.executedOrders);
        FileWriteString(fileHandle, "   ⚡ أوامر منفذة جزئياً: " + IntegerToString(stats.partiallyFilled) + 
                       " (" + DoubleToString(partialRate, 1) + "%)\n");
        
        if(partialRate > 15.0) {
            FileWriteString(fileHandle, "   ⚠️ نسبة عالية من التنفيذ الجزئي - مراجعة أحجام الصفقات\n");
        }
    }
    
    // تحليل الأوامر المرفوضة
    if(stats.pendingRejected > 0) {
        double rejectionRate = CalculatePercentage(stats.pendingRejected, stats.totalOrders);
        FileWriteString(fileHandle, "   🚫 أوامر مرفوضة: " + IntegerToString(stats.pendingRejected) + 
                       " (" + DoubleToString(rejectionRate, 1) + "%)\n");
        
        if(rejectionRate > 5.0) {
            FileWriteString(fileHandle, "   🚨 نسبة رفض عالية - فحص الهامش وإعدادات الحساب\n");
        }
    }
    
    // تقييم الجودة الإجمالية
    double qualityScore = executionRate;
    if(stats.priceReachedButNotExecuted > 0) {
        qualityScore -= CalculatePercentage(stats.priceReachedButNotExecuted, stats.totalOrders) * 2; // عقوبة مضاعفة
    }
    
    FileWriteString(fileHandle, "   📈 نقاط جودة التنفيذ: " + DoubleToString(qualityScore, 1) + "/100\n");
    
    if(qualityScore >= 90) {
        FileWriteString(fileHandle, "   🌟 جودة تنفيذ ممتازة\n");
    } else if(qualityScore >= 80) {
        FileWriteString(fileHandle, "   ✅ جودة تنفيذ جيدة\n");
    } else if(qualityScore >= 70) {
        FileWriteString(fileHandle, "   ⚠️ جودة تنفيذ مقبولة\n");
    } else {
        FileWriteString(fileHandle, "   🚨 جودة تنفيذ ضعيفة - تحتاج تحسين عاجل\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| تحليل الأخطاء التقنية                                          |
//+------------------------------------------------------------------+
void CreateTechnicalErrorAnalysis(int fileHandle)
{
    FileWriteString(fileHandle, "🔧 تحليل الأخطاء التقنية:\n");
    
    // حساب أنواع الأخطاء
    int connectionErrors = 0;
    int serverErrors = 0;
    int accountErrors = 0;
    int unknownErrors = 0;
    
    for(int i = 0; i < stats.totalOrders; i++) {
        if(!orders[i].isExecuted) {
            string reason = orders[i].failureReason;
            
            if(StringFind(reason, "رفض الوسيط", 0) >= 0 || StringFind(reason, "مرفوض", 0) >= 0) {
                serverErrors++;
            } else if(StringFind(reason, "هامش", 0) >= 0 || StringFind(reason, "رصيد", 0) >= 0) {
                accountErrors++;
            } else if(StringFind(reason, "اتصال", 0) >= 0 || StringFind(reason, "شبكة", 0) >= 0) {
                connectionErrors++;
            } else if(orders[i].state == ORDER_STATE_REJECTED) {
                unknownErrors++;
            }
        }
    }
    
    int totalErrors = connectionErrors + serverErrors + accountErrors + unknownErrors;
    
    if(totalErrors == 0) {
        FileWriteString(fileHandle, "   ✅ لم يتم رصد أخطاء تقنية واضحة\n");
    } else {
        FileWriteString(fileHandle, "   📊 إجمالي الأخطاء التقنية: " + IntegerToString(totalErrors) + "\n");
        
        if(serverErrors > 0) {
            FileWriteString(fileHandle, "   🏢 أخطاء الخادم/الوسيط: " + IntegerToString(serverErrors) + "\n");
        }
        if(accountErrors > 0) {
            FileWriteString(fileHandle, "   💰 أخطاء الحساب/الهامش: " + IntegerToString(accountErrors) + "\n");
        }
        if(connectionErrors > 0) {
            FileWriteString(fileHandle, "   🌐 أخطاء الاتصال: " + IntegerToString(connectionErrors) + "\n");
        }
        if(unknownErrors > 0) {
            FileWriteString(fileHandle, "   ❓ أخطاء غير محددة: " + IntegerToString(unknownErrors) + "\n");
        }
        
        // تحليل الأخطاء الأكثر شيوعاً
        int maxErrors = MathMax(MathMax(serverErrors, accountErrors), MathMax(connectionErrors, unknownErrors));
        if(maxErrors == serverErrors && serverErrors > totalErrors * 0.5) {
            FileWriteString(fileHandle, "   💡 أخطاء الخادم هي الأكثر - فحص إعدادات الوسيط\n");
        } else if(maxErrors == accountErrors && accountErrors > totalErrors * 0.5) {
            FileWriteString(fileHandle, "   💡 أخطاء الحساب هي الأكثر - فحص الهامش المتاح\n");
        } else if(maxErrors == connectionErrors && connectionErrors > totalErrors * 0.5) {
            FileWriteString(fileHandle, "   💡 أخطاء الاتصال هي الأكثر - فحص الإنترنت و VPS\n");
        }
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| إنشاء تقرير المقاييس المتقدمة                                  |
//+------------------------------------------------------------------+
void CreateAdvancedMetricsReport(int fileHandle)
{
    FileWriteString(fileHandle, "📈 المقاييس المتقدمة:\n");
    FileWriteString(fileHandle, "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n");
    
    // مقاييس الكفاءة
    CreateEfficiencyMetrics(fileHandle);
    
    // مقاييس الاستقرار
    CreateStabilityMetrics(fileHandle);
    
    // مقاييس التحسن
    CreateImprovementMetrics(fileHandle);
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| مقاييس الكفاءة                                                 |
//+------------------------------------------------------------------+
void CreateEfficiencyMetrics(int fileHandle)
{
    FileWriteString(fileHandle, "⚡ مقاييس الكفاءة:\n");
    
    if(stats.executedOrders == 0) {
        FileWriteString(fileHandle, "   ⚠️ لا توجد صفقات منفذة لحساب مقاييس الكفاءة\n\n");
        return;
    }
    
    // كفاءة التنفيذ
    double executionEfficiency = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    FileWriteString(fileHandle, "   📊 كفاءة التنفيذ: " + DoubleToString(executionEfficiency, 1) + "%\n");
    
    // كفاءة الربح (الصفقات الرابحة من المنفذة)
    double profitEfficiency = CalculatePercentage(stats.executedWins, stats.executedOrders);
    FileWriteString(fileHandle, "   💰 كفاءة الربح: " + DoubleToString(profitEfficiency, 1) + "%\n");
    
    // كفاءة رأس المال (الربح لكل وحدة مخاطرة)
    if(stats.avgLoss > 0) {
        double capitalEfficiency = stats.avgWin / stats.avgLoss;
        FileWriteString(fileHandle, "   💼 كفاءة رأس المال: " + DoubleToString(capitalEfficiency, 2) + "\n");
    }
    
    // كفاءة الوقت (الربح لكل وحدة زمنية)
    double avgHoldingTime = 0;
    int validTimes = 0;
    for(int i = 0; i < stats.totalOrders; i++) {
        if(orders[i].isExecuted && orders[i].holdingTimeMinutes > 0) {
            avgHoldingTime += orders[i].holdingTimeMinutes;
            validTimes++;
        }
    }
    
    if(validTimes > 0 && stats.totalProfit != 0) {
        avgHoldingTime /= validTimes;
        double timeEfficiency = stats.totalProfit / (avgHoldingTime / 60.0); // ربح لكل ساعة
        FileWriteString(fileHandle, "   ⏰ كفاءة الوقت: " + DoubleToString(timeEfficiency, 2) + "$/ساعة\n");
    }
    
    // النقاط الإجمالية للكفاءة
    double efficiencyScore = (executionEfficiency + profitEfficiency + (stats.profitFactor * 20)) / 3;
    FileWriteString(fileHandle, "   🎯 نقاط الكفاءة الإجمالية: " + DoubleToString(efficiencyScore, 1) + "/100\n");
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| مقاييس الاستقرار                                               |
//+------------------------------------------------------------------+
void CreateStabilityMetrics(int fileHandle)
{
    FileWriteString(fileHandle, "🛡️ مقاييس الاستقرار:\n");
    
    if(stats.executedOrders < 5) {
        FileWriteString(fileHandle, "   ⚠️ عدد صفقات قليل لحساب مقاييس الاستقرار\n\n");
        return;
    }
    
    // استقرار الأرباح (انحراف معياري للأرباح)
    double profitStability = CalculateReturnStandardDeviation();
    if(profitStability > 0) {
        FileWriteString(fileHandle, "   📊 استقرار الأرباح (انحراف معياري): " + DoubleToString(profitStability, 2) + "\n");
        
        if(profitStability < stats.avgWin * 0.5) {
            FileWriteString(fileHandle, "   ✅ أرباح مستقرة\n");
        } else if(profitStability < stats.avgWin) {
            FileWriteString(fileHandle, "   ⚠️ أرباح متقلبة قليلاً\n");
        } else {
            FileWriteString(fileHandle, "   🚨 أرباح متقلبة جداً\n");
        }
    }
    
    // استقرار الانزلاق
    if(stats.maxSlippage > 0 && stats.avgSlippage > 0) {
        double slippageStability = stats.maxSlippage / stats.avgSlippage;
        FileWriteString(fileHandle, "   📉 استقرار الانزلاق: " + DoubleToString(slippageStability, 1) + "x\n");
        
        if(slippageStability < 2.0) {
            FileWriteString(fileHandle, "   ✅ انزلاق مستقر\n");
        } else if(slippageStability < 3.0) {
            FileWriteString(fileHandle, "   ⚠️ انزلاق متقلب قليلاً\n");
        } else {
            FileWriteString(fileHandle, "   🚨 انزلاق متقلب جداً\n");
        }
    }
    
    // استقرار معدل التنفيذ (بناءً على التوزيع الزمني)
    double executionStability = CalculateExecutionStability();
    if(executionStability >= 0) {
        FileWriteString(fileHandle, "   ⚡ استقرار التنفيذ: " + DoubleToString(executionStability, 1) + "%\n");
        
        if(executionStability > 90) {
            FileWriteString(fileHandle, "   ✅ تنفيذ مستقر جداً\n");
        } else if(executionStability > 80) {
            FileWriteString(fileHandle, "   ✅ تنفيذ مستقر\n");
        } else {
            FileWriteString(fileHandle, "   ⚠️ تنفيذ غير مستقر\n");
        }
    }
    
    FileWriteString(fileHandle, "\n");
}

//+------------------------------------------------------------------+
//| حساب استقرار التنفيذ                                           |
//+------------------------------------------------------------------+
double CalculateExecutionStability()
{
    if(stats.totalOrders < 10) return -1; // بيانات غير كافية
    
    // تقسيم الأوامر إلى مجموعات زمنية وحساب معدل التنفيذ لكل مجموعة
    int groupSize = stats.totalOrders / 5; // 5 مجموعات
    if(groupSize < 2) return -1;
    
    double executionRates[5];
    int groupIndex = 0;
    
    for(int group = 0; group < 5; group++) {
        int startIndex = group * groupSize;
        int endIndex = (group == 4) ? stats.totalOrders : (group + 1) * groupSize;
        int groupExecuted = 0;
        int groupTotal = endIndex - startIndex;
        
        for(int i = startIndex; i < endIndex; i++) {
            if(orders[i].isExecuted) groupExecuted++;
        }
        
        executionRates[group] = CalculatePercentage(groupExecuted, groupTotal);
    }
    
    // حساب الانحراف المعياري لمعدلات التنفيذ
    double avgRate = 0;
    for(int i = 0; i < 5; i++) {
        avgRate += executionRates[i];
    }
    avgRate /= 5;
    
    double variance = 0;
    for(int i = 0; i < 5; i++) {
        variance += MathPow(executionRates[i] - avgRate, 2);
    }
    variance /= 5;
    
    double stability = 100 - MathSqrt(variance); // كلما قل الانحراف، زاد الاستقرار
    return MathMax(0, stability);
}

//+------------------------------------------------------------------+
//| مقاييس التحسن                                                  |
//+------------------------------------------------------------------+
void CreateImprovementMetrics(int fileHandle)
{
    FileWriteString(fileHandle, "📈 مقاييس التحسن المحتملة:\n");
    
    // إمكانية تحسين معدل التنفيذ
    double currentExecutionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    double potentialImprovement = 0;
    
    if(stats.priceReachedButNotExecuted > 0) {
        potentialImprovement = CalculatePercentage(stats.priceReachedButNotExecuted, stats.totalOrders);
        FileWriteString(fileHandle, "   📊 تحسن محتمل في التنفيذ: +" + DoubleToString(potentialImprovement, 1) + "%\n");
        FileWriteString(fileHandle, "   🎯 معدل تنفيذ محتمل: " + DoubleToString(currentExecutionRate + potentialImprovement, 1) + "%\n");
    }
    
    // إمكانية تحسين الربحية
    if(stats.almostTPFailures > 0 && stats.executedLosses > 0) {
        double profitabilityImprovement = CalculatePercentage(stats.almostTPFailures, stats.executedOrders);
        FileWriteString(fileHandle, "   💰 تحسن محتمل في الربحية: +" + DoubleToString(profitabilityImprovement, 1) + "%\n");
        FileWriteString(fileHandle, "   🎯 معدل ربح محتمل: " + DoubleToString(stats.winRate + profitabilityImprovement, 1) + "%\n");
    }
    
    // إمكانية تقليل الخسائر
    if(stats.wrongDirectionFailures > 0) {
        double lossReduction = CalculatePercentage(stats.wrongDirectionFailures, stats.executedOrders);
        FileWriteString(fileHandle, "   📉 تقليل محتمل للخسائر: -" + DoubleToString(lossReduction, 1) + "%\n");
    }
    
    // تقدير التحسن في الربح الإجمالي
    if(stats.executedOrders > 0 && potentialImprovement > 0) {
        double potentialProfit = stats.totalProfit * (1 + potentialImprovement / 100);
        double profitIncrease = potentialProfit - stats.totalProfit;
        FileWriteString(fileHandle, "   💵 زيادة محتملة في الأرباح: +" + DoubleToString(profitIncrease, 2) + "$\n");
    }
    
    FileWriteString(fileHandle, "\n");
}

//--- نهاية الجزء الحادي عشر ---                |

//+------------------------------------------------------------------+
//| Expert Advisor: Advanced Zigzag Analysis Bot - Part 12/15      |
//| محلل بوت الزجزاج العبقري - الجزء الثاني عشر: الحفظ في الملفات  |
//+------------------------------------------------------------------+

// تكملة للأجزاء السابقة - دوال الحفظ في الملفات وإدارة التقارير

//+------------------------------------------------------------------+
//| حفظ التقرير المتقدم الكامل في ملف                             |
//+------------------------------------------------------------------+
void SaveAdvancedReportToFile()
{
    Print("\n💾 جاري حفظ التقرير المتقدم الشامل...");
    
    // إنشاء اسم ملف مفصل مع التاريخ والوقت
    MqlDateTime dt;
    TimeToStruct(TimeCurrent(), dt);
    
    string fileName = StringFormat("%s_Complete_%04d%02d%02d_%02d%02d.txt", 
                     ReportFileName, 
                     dt.year, dt.mon, dt.day, 
                     dt.hour, dt.min);
    
    // محاولة فتح الملف بترميز UTF-8 أولاً
    int fileHandle = FileOpen(fileName, FILE_WRITE|FILE_TXT|FILE_UNICODE);
    
    if(fileHandle == INVALID_HANDLE) {
        Print("❌ فشل في فتح الملف بـ UNICODE، محاولة بـ ANSI...");
        
        // محاولة ثانية بترميز ANSI
        string fallbackFileName = StringFormat("ZigzagReport_%04d%02d%02d_%02d%02d.txt", 
                                 dt.year, dt.mon, dt.day, dt.hour, dt.min);
        fileHandle = FileOpen(fallbackFileName, FILE_WRITE|FILE_TXT|FILE_ANSI);
        
        if(fileHandle != INVALID_HANDLE) {
            fileName = fallbackFileName;
        }
    }
    
    if(fileHandle != INVALID_HANDLE) {
        // كتابة التقرير الكامل
        WriteCompleteAdvancedReport(fileHandle);
        FileClose(fileHandle);
        
        Print("✅ تم حفظ التقرير المتقدم بنجاح: ", fileName);
        Print("📁 الملف محفوظ في: MQL5\\Files\\", fileName);
        Print("📊 حجم التقرير: تقرير شامل مع ", stats.totalOrders, " أمر");
        
        // إنشاء ملف ملخص إضافي
        CreateSummaryFile();
        
    } else {
        Print("❌ فشل في حفظ التقرير - كود الخطأ: ", GetLastError());
        Print("💡 تحقق من:");
        Print("   • وجود مجلد MQL5\\Files");
        Print("   • صلاحيات الكتابة");
        Print("   • مساحة القرص المتاحة");
        Print("   • عدم وجود ملف بنفس الاسم مفتوح");
    }
}

//+------------------------------------------------------------------+
//| كتابة التقرير المتقدم الكامل                                   |
//+------------------------------------------------------------------+
void WriteCompleteAdvancedReport(int fileHandle)
{
    // ترويسة التقرير
    WriteReportHeader(fileHandle);
    
    // الملخص التنفيذي
    CreateExecutiveSummaryReport(fileHandle);
    
    // الإحصائيات العامة الشاملة
    WriteGeneralStatisticsToFile(fileHandle);
    
    // تحليل الأوامر المنفذة (للحسابات النهائية)
    WriteExecutedAnalysisToFile(fileHandle);
    
    // تحليل الأوامر غير المنفذة (للمعلومات فقط)
    WriteNonExecutedAnalysisToFile(fileHandle);
    
    // التحليل المفصل
    WriteDetailedAnalysisToFile(fileHandle);
    
    // تحليل الرموز المتداولة
    CreateSymbolAnalysisReport(fileHandle);
    
    // التحليل الزمني المفصل
    CreateDetailedTimeAnalysisReport(fileHandle);
    
    // تحليل المخاطر المفصل
    CreateDetailedRiskAnalysisReport(fileHandle);
    
    // تحليل الأداء التقني
    CreateTechnicalPerformanceReport(fileHandle);
    
    // المقاييس المتقدمة
    CreateAdvancedMetricsReport(fileHandle);
    
    // التحليل التفصيلي للأوامر (عينة)
    WriteDetailedOrdersToFile(fileHandle);
    
    // التوصيات الشاملة
    WriteRecommendationsToFile(fileHandle);
    
    // تقرير المقارنة (للمستقبل)
    CreateComparisonReportPlaceholder(fileHandle);
    
    // خاتمة التقرير
    WriteReportFooter(fileHandle);
}

//+------------------------------------------------------------------+
//| إنشاء ملف ملخص مبسط                                           |
//+------------------------------------------------------------------+
void CreateSummaryFile()
{
    MqlDateTime dt;
    TimeToStruct(TimeCurrent(), dt);
    
    string summaryFileName = StringFormat("%s_Summary_%04d%02d%02d.txt", 
                            ReportFileName, dt.year, dt.mon, dt.day);
    
    int summaryHandle = FileOpen(summaryFileName, FILE_WRITE|FILE_TXT|FILE_UNICODE);
    
    if(summaryHandle != INVALID_HANDLE) {
        WriteSummaryReport(summaryHandle);
        FileClose(summaryHandle);
        Print("📋 تم حفظ ملف الملخص: ", summaryFileName);
    }
}

//+------------------------------------------------------------------+
//| كتابة تقرير الملخص المبسط                                      |
//+------------------------------------------------------------------+
void WriteSummaryReport(int fileHandle)
{
    FileWriteString(fileHandle, "📊 ملخص تحليل بوت الزجزاج\n");
    FileWriteString(fileHandle, "═══════════════════════════════════════\n");
    FileWriteString(fileHandle, "📅 التاريخ: " + TimeToString(TimeCurrent(), TIME_DATE) + "\n");
    FileWriteString(fileHandle, "⏱️ فترة التحليل: " + IntegerToString(AnalysisPeriodDays) + " يوم\n\n");
    
    // الأرقام الرئيسية
    FileWriteString(fileHandle, "🔢 الأرقام الرئيسية:\n");
    FileWriteString(fileHandle, "   إجمالي الأوامر: " + IntegerToString(stats.totalOrders) + "\n");
    FileWriteString(fileHandle, "   أوامر منفذة: " + IntegerToString(stats.executedOrders) + "\n");
    FileWriteString(fileHandle, "   معدل التنفيذ: " + DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 1) + "%\n");
    
    if(stats.executedOrders > 0) {
        FileWriteString(fileHandle, "   معدل النجاح: " + DoubleToString(stats.winRate, 1) + "%\n");
        FileWriteString(fileHandle, "   صافي الربح: " + DoubleToString(stats.totalProfit, 2) + "$\n");
        FileWriteString(fileHandle, "   معامل الربح: " + DoubleToString(stats.profitFactor, 2) + "\n");
    }
    
    // التقييم السريع
    FileWriteString(fileHandle, "\n🎯 التقييم السريع:\n");
    
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    if(executionRate >= 80) {
        FileWriteString(fileHandle, "   ✅ معدل التنفيذ: ممتاز\n");
    } else if(executionRate >= 70) {
        FileWriteString(fileHandle, "   ✅ معدل التنفيذ: جيد\n");
    } else {
        FileWriteString(fileHandle, "   ⚠️ معدل التنفيذ: يحتاج تحسين\n");
    }
    
    if(stats.executedOrders > 0) {
        if(stats.winRate >= 60) {
            FileWriteString(fileHandle, "   ✅ معدل النجاح: جيد\n");
        } else {
            FileWriteString(fileHandle, "   ⚠️ معدل النجاح: يحتاج تحسين\n");
        }
        
        if(stats.profitFactor >= 1.5) {
            FileWriteString(fileHandle, "   ✅ معامل الربح: جيد\n");
        } else {
            FileWriteString(fileHandle, "   ⚠️ معامل الربح: يحتاج تحسين\n");
        }
    }
    
    // أهم التوصيات
    FileWriteString(fileHandle, "\n💡 أهم التوصيات:\n");
    
    if(executionRate < 70) {
        FileWriteString(fileHandle, "   1. تحسين معدل التنفيذ\n");
    }
    if(stats.executedOrders > 0 && stats.winRate < 50) {
        FileWriteString(fileHandle, "   2. تحسين دقة الإشارات\n");
    }
    if(stats.highSpreadFailures > stats.totalOrders * 0.2) {
        FileWriteString(fileHandle, "   3. تجنب أوقات السبريد العالي\n");
    }
    if(stats.wrongDirectionFailures > stats.executedOrders * 0.3) {
        FileWriteString(fileHandle, "   4. مراجعة تحليل الاتجاه\n");
    }
    
    FileWriteString(fileHandle, "\n📋 للتفاصيل الكاملة، راجع التقرير المفصل.\n");
    FileWriteString(fileHandle, "═══════════════════════════════════════\n");
}

//+------------------------------------------------------------------+
//| إنشاء ملف CSV للبيانات الخام                                  |
//+------------------------------------------------------------------+
void CreateRawDataCSV()
{
    if(stats.totalOrders == 0) return;
    
    MqlDateTime dt;
    TimeToStruct(TimeCurrent(), dt);
    
    string csvFileName = StringFormat("%s_RawData_%04d%02d%02d.csv", 
                        ReportFileName, dt.year, dt.mon, dt.day);
    
    int csvHandle = FileOpen(csvFileName, FILE_WRITE|FILE_TXT|FILE_ANSI);
    
    if(csvHandle != INVALID_HANDLE) {
        WriteCSVData(csvHandle);
        FileClose(csvHandle);
        Print("📊 تم حفظ ملف البيانات الخام: ", csvFileName);
    }
}

//+------------------------------------------------------------------+
//| كتابة البيانات في ملف CSV                                      |
//+------------------------------------------------------------------+
void WriteCSVData(int fileHandle)
{
    // كتابة العناوين
    FileWriteString(fileHandle, "Ticket,Symbol,Type,Volume,OpenPrice,ActualPrice,SL,TP,Executed,NetProfit,");
    FileWriteString(fileHandle, "TimeSetup,TimeDone,ExecutionDelay,Slippage,PointsToTP,PointsToSL,");
    FileWriteString(fileHandle, "HitTP,HitSL,CorrectDirection,HoldingTime,DayOfWeek,Hour,WasWeekend,WasNews\n");
    
    // كتابة البيانات
    for(int i = 0; i < stats.totalOrders; i++) {
        WriteOrderToCSV(fileHandle, i);
    }
}

//+------------------------------------------------------------------+
//| كتابة بيانات أمر واحد في CSV                                   |
//+------------------------------------------------------------------+
void WriteOrderToCSV(int fileHandle, int index)
{
    string line = "";
    
    // البيانات الأساسية
    line += IntegerToString(orders[index].ticket) + ",";
    line += orders[index].symbol + ",";
    line += GetOrderTypeString(orders[index].type) + ",";
    line += DoubleToString(orders[index].volume, 2) + ",";
    line += DoubleToString(orders[index].priceOpen, 5) + ",";
    line += DoubleToString(orders[index].priceActual, 5) + ",";
    line += DoubleToString(orders[index].sl, 5) + ",";
    line += DoubleToString(orders[index].tp, 5) + ",";
    line += (orders[index].isExecuted ? "TRUE" : "FALSE") + ",";
    line += DoubleToString(orders[index].netProfit, 2) + ",";
    
    // بيانات التوقيت
    line += TimeToString(orders[index].timeSetup, TIME_DATE|TIME_MINUTES) + ",";
    line += TimeToString(orders[index].timeDone, TIME_DATE|TIME_MINUTES) + ",";
    line += IntegerToString(orders[index].executionDelay) + ",";
    line += DoubleToString(orders[index].slippage, 5) + ",";
    line += DoubleToString(orders[index].pointsToTP, 1) + ",";
    line += DoubleToString(orders[index].pointsToSL, 1) + ",";
    
    // البيانات التحليلية
    line += (orders[index].hitTakeProfit ? "TRUE" : "FALSE") + ",";
    line += (orders[index].hitStopLoss ? "TRUE" : "FALSE") + ",";
    line += (orders[index].wasCorrectDirection ? "TRUE" : "FALSE") + ",";
    line += IntegerToString(orders[index].holdingTimeMinutes) + ",";
    line += orders[index].dayOfWeek + ",";
    line += IntegerToString(orders[index].hourOfDay) + ",";
    line += (orders[index].wasWeekend ? "TRUE" : "FALSE") + ",";
    line += (orders[index].wasNewsTime ? "TRUE" : "FALSE");
    
    FileWriteString(fileHandle, line + "\n");
}

//+------------------------------------------------------------------+
//| إنشاء ملف إحصائيات JSON                                        |
//+------------------------------------------------------------------+
void CreateStatsJSONFile()
{
    MqlDateTime dt;
    TimeToStruct(TimeCurrent(), dt);
    
    string jsonFileName = StringFormat("%s_Stats_%04d%02d%02d.json", 
                         ReportFileName, dt.year, dt.mon, dt.day);
    
    int jsonHandle = FileOpen(jsonFileName, FILE_WRITE|FILE_TXT|FILE_ANSI);
    
    if(jsonHandle != INVALID_HANDLE) {
        WriteJSONStats(jsonHandle);
        FileClose(jsonHandle);
        Print("📄 تم حفظ ملف الإحصائيات JSON: ", jsonFileName);
    }
}

//+------------------------------------------------------------------+
//| كتابة الإحصائيات في ملف JSON                                   |
//+------------------------------------------------------------------+
void WriteJSONStats(int fileHandle)
{
    FileWriteString(fileHandle, "{\n");
    FileWriteString(fileHandle, "  \"report_info\": {\n");
    FileWriteString(fileHandle, "    \"generated_at\": \"" + TimeToString(TimeCurrent()) + "\",\n");
    FileWriteString(fileHandle, "    \"analysis_period_days\": " + IntegerToString(AnalysisPeriodDays) + ",\n");
    FileWriteString(fileHandle, "    \"version\": \"Advanced Zigzag Analyzer v1.0\"\n");
    FileWriteString(fileHandle, "  },\n");
    
    FileWriteString(fileHandle, "  \"general_stats\": {\n");
    FileWriteString(fileHandle, "    \"total_orders\": " + IntegerToString(stats.totalOrders) + ",\n");
    FileWriteString(fileHandle, "    \"executed_orders\": " + IntegerToString(stats.executedOrders) + ",\n");
    FileWriteString(fileHandle, "    \"execution_rate\": " + DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 2) + ",\n");
    FileWriteString(fileHandle, "    \"pending_expired\": " + IntegerToString(stats.pendingExpired) + ",\n");
    FileWriteString(fileHandle, "    \"pending_cancelled\": " + IntegerToString(stats.pendingCancelled) + ",\n");
    FileWriteString(fileHandle, "    \"pending_rejected\": " + IntegerToString(stats.pendingRejected) + "\n");
    FileWriteString(fileHandle, "  },\n");
    
    if(stats.executedOrders > 0) {
        FileWriteString(fileHandle, "  \"performance_stats\": {\n");
        FileWriteString(fileHandle, "    \"executed_wins\": " + IntegerToString(stats.executedWins) + ",\n");
        FileWriteString(fileHandle, "    \"executed_losses\": " + IntegerToString(stats.executedLosses) + ",\n");
        FileWriteString(fileHandle, "    \"win_rate\": " + DoubleToString(stats.winRate, 2) + ",\n");
        FileWriteString(fileHandle, "    \"total_profit\": " + DoubleToString(stats.totalProfit, 2) + ",\n");
        FileWriteString(fileHandle, "    \"gross_profit\": " + DoubleToString(stats.grossProfit, 2) + ",\n");
        FileWriteString(fileHandle, "    \"gross_loss\": " + DoubleToString(stats.grossLoss, 2) + ",\n");
        FileWriteString(fileHandle, "    \"profit_factor\": " + DoubleToString(stats.profitFactor, 2) + ",\n");
        FileWriteString(fileHandle, "    \"avg_win\": " + DoubleToString(stats.avgWin, 2) + ",\n");
        FileWriteString(fileHandle, "    \"avg_loss\": " + DoubleToString(stats.avgLoss, 2) + ",\n");
        FileWriteString(fileHandle, "    \"max_win\": " + DoubleToString(stats.maxWin, 2) + ",\n");
        FileWriteString(fileHandle, "    \"max_loss\": " + DoubleToString(stats.maxLoss, 2) + "\n");
        FileWriteString(fileHandle, "  },\n");
    }
    
    FileWriteString(fileHandle, "  \"failure_patterns\": {\n");
    FileWriteString(fileHandle, "    \"high_spread_failures\": " + IntegerToString(stats.highSpreadFailures) + ",\n");
    FileWriteString(fileHandle, "    \"wrong_direction_failures\": " + IntegerToString(stats.wrongDirectionFailures) + ",\n");
    FileWriteString(fileHandle, "    \"almost_tp_failures\": " + IntegerToString(stats.almostTPFailures) + ",\n");
    FileWriteString(fileHandle, "    \"slippage_failures\": " + IntegerToString(stats.slippageFailures) + ",\n");
    FileWriteString(fileHandle, "    \"liquidity_failures\": " + IntegerToString(stats.liquidityFailures) + ",\n");
    FileWriteString(fileHandle, "    \"timeout_failures\": " + IntegerToString(stats.timeoutFailures) + "\n");
    FileWriteString(fileHandle, "  },\n");
    
    FileWriteString(fileHandle, "  \"timing_stats\": {\n");
    FileWriteString(fileHandle, "    \"weekend_orders\": " + IntegerToString(stats.weekendOrders) + ",\n");
    FileWriteString(fileHandle, "    \"news_time_orders\": " + IntegerToString(stats.newsTimeOrders) + ",\n");
    FileWriteString(fileHandle, "    \"best_hour_execution\": " + IntegerToString(stats.bestHourExecution) + ",\n");
    FileWriteString(fileHandle, "    \"worst_hour_execution\": " + IntegerToString(stats.worstHourExecution) + ",\n");
    FileWriteString(fileHandle, "    \"best_hour_rate\": " + DoubleToString(stats.bestHourExecutionRate, 2) + ",\n");
    FileWriteString(fileHandle, "    \"worst_hour_rate\": " + DoubleToString(stats.worstHourExecutionRate, 2) + "\n");
    FileWriteString(fileHandle, "  }\n");
    
    FileWriteString(fileHandle, "}\n");
}

//+------------------------------------------------------------------+
//| إرسال التقرير بالإيميل                                         |
//+------------------------------------------------------------------+
void SendReportByEmail()
{
    if(!SendEmailReport) return;
    
    Print("📧 جاري إرسال التقرير بالإيميل...");
    
    string subject = CreateEmailSubject();
    string body = CreateEmailBody();
    
    if(SendMail(subject, body)) {
        Print("✅ تم إرسال التقرير بالإيميل بنجاح");
    } else {
        Print("❌ فشل في إرسال التقرير بالإيميل");
        Print("💡 تحقق من:");
        Print("   • إعدادات SMTP في MetaTrader");
        Print("   • الاتصال بالإنترنت");
        Print("   • صحة عنوان البريد الإلكتروني");
    }
}

//+------------------------------------------------------------------+
//| إنشاء عنوان الإيميل                                           |
//+------------------------------------------------------------------+
string CreateEmailSubject()
{
    string subject = "تقرير محلل الزجزاج المتقدم - ";
    subject += TimeToString(TimeCurrent(), TIME_DATE);
    
    // إضافة ملخص سريع للحالة
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    if(executionRate >= 80) {
        subject += " (أداء ممتاز)";
    } else if(executionRate >= 70) {
        subject += " (أداء جيد)";
    } else {
        subject += " (يحتاج تحسين)";
    }
    
    return subject;
}

//+------------------------------------------------------------------+
//| إنشاء محتوى الإيميل                                            |
//+------------------------------------------------------------------+
string CreateEmailBody()
{
    string body = "تقرير محلل بوت الزجزاج المتقدم\n";
    body += "=====================================\n\n";
    
    body += "📊 ملخص الأداء:\n";
    body += "إجمالي الأوامر: " + IntegerToString(stats.totalOrders) + "\n";
    body += "أوامر منفذة: " + IntegerToString(stats.executedOrders) + "\n";
    body += "معدل التنفيذ: " + DoubleToString(CalculatePercentage(stats.executedOrders, stats.totalOrders), 1) + "%\n";
    
    if(stats.executedOrders > 0) {
        body += "معدل النجاح: " + DoubleToString(stats.winRate, 1) + "%\n";
        body += "صافي الربح: " + DoubleToString(stats.totalProfit, 2) + "$\n";
        body += "معامل الربح: " + DoubleToString(stats.profitFactor, 2) + "\n";
    }
    
    body += "\n🎯 أبرز النقاط:\n";
    
    // تحليل سريع للنقاط المهمة
    double executionRate = CalculatePercentage(stats.executedOrders, stats.totalOrders);
    if(executionRate < 70) {
        body += "• معدل التنفيذ منخفض - يحتاج تحسين\n";
    }
    
    if(stats.priceReachedButNotExecuted > 0) {
        body += "• " + IntegerToString(stats.priceReachedButNotExecuted) + " أوامر وصل لها السعر ولم تنفذ\n";
    }
    
    if(stats.wrongDirectionFailures > stats.executedOrders * 0.3) {
        body += "• نسبة عالية من الصفقات في الاتجاه الخاطئ\n";
    }
    
    if(stats.highSpreadFailures > stats.totalOrders * 0.2) {
        body += "• تأثر سلبي بالسبريد العالي\n";
    }
    
    body += "\n📋 للحصول على التقرير المفصل الكامل، راجع الملفات المحفوظة في مجلد MQL5\\Files\n\n";
    
    body += "تم إنشاء هذا التقرير بواسطة محلل الزجزاج المتقدم\n";
    body += TimeToString(TimeCurrent()) + "\n";
    
    return body;
}

//+------------------------------------------------------------------+
//| حفظ جميع أنواع التقارير                                        |
//+------------------------------------------------------------------+
void SaveAllReportTypes()
{
    Print("📁 جاري حفظ جميع أنواع التقارير...");
    
    // التقرير الرئيسي المفصل
    SaveAdvancedReportToFile();
    
    // ملف البيانات الخام CSV
    CreateRawDataCSV();
    
    // ملف الإحصائيات JSON
    CreateStatsJSONFile();
    
    Print("✅ تم حفظ جميع التقارير بنجاح");
    Print("📊 الملفات المحفوظة:");
    Print("   • تقرير مفصل (TXT)");
    Print("   • ملخص تنفيذي (TXT)");
    Print("   • بيانات خام (CSV)");
    Print("   • إحصائيات (JSON)");
}

//--- نهاية الجزء الثاني عشر ---

